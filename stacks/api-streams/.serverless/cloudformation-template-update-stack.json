{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CreateEntryStreamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/formsli-stream-dev-create-delivery-stream",
        "RetentionInDays": 7
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "formsli-stream",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-stream-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-stream-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "tag:GetResources",
                    "secretsmanager:CreateSecret",
                    "secretsmanager:ListSecrets",
                    "secretsmanager:GetRandomPassword",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:GetParameters",
                    "ssm:GetParametersByPath"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dev/formsli/*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "formsli-stream",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CreateEntryStreamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "fl-dev-deployments",
          "S3Key": "serverless/formsli-stream/dev/1571379656036-2019-10-18T06:20:56.036Z/formsli-stream.zip"
        },
        "FunctionName": "formsli-stream-dev-create-delivery-stream",
        "Handler": "functions/createstream.handle",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "CreateEntryStreamIamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 30,
        "Tags": [
          {
            "Key": "stage",
            "Value": "dev"
          },
          {
            "Key": "service",
            "Value": "formsli-stream"
          },
          {
            "Key": "region",
            "Value": "ap-northeast-1"
          },
          {
            "Key": "stack",
            "Value": "api-streams"
          }
        ],
        "Environment": {
          "Variables": {
            "region": "ap-northeast-1",
            "environment": "dev",
            "serviceName": "formsli-stream",
            "databaseName": "formsli",
            "dbClusterId": "fl-rds-cluster-dev",
            "dbClusterArn": {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
            },
            "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
            "s3_user_bucket": "fl-dev-userdata",
            "kinesisAccessRole": {
              "Fn::GetAtt": [
                "KinesisAccessRole",
                "Arn"
              ]
            }
          }
        },
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "CreateEntryStreamIamRoleLambdaExecution",
        "CreateEntryStreamLogGroup"
      ]
    },
    "CreateEntryStreamLambdaVersion9ydddqYEK7D9WLuc8xhVfCT3uaqNp7w3qV1hGMzWVY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateEntryStreamLambdaFunction"
        },
        "CodeSha256": "9i2EOEJ0v3uanFoiLD2b/EPs+gspvdViK4z9zaf5aEQ="
      }
    },
    "ApiGatewayResourceStreamFormidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": "b66gbx",
        "PathPart": "{formId}",
        "RestApiId": "w2s48kp2a7"
      }
    },
    "ApiGatewayMethodStreamFormidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceStreamFormidVar"
        },
        "RestApiId": "w2s48kp2a7"
      }
    },
    "ApiGatewayMethodStreamFormidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceStreamFormidVar"
        },
        "RestApiId": "w2s48kp2a7",
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "0bbeey",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateEntryStreamLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1571379626454": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "w2s48kp2a7",
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodStreamFormidVarOptions",
        "ApiGatewayMethodStreamFormidVarPut"
      ]
    },
    "CreateEntryStreamLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateEntryStreamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              "w2s48kp2a7",
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/formsli-stream-dev",
        "RetentionInDays": 7
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "fl-dev-deployments",
          "S3Key": "serverless/formsli-stream/dev/1571379656036-2019-10-18T06:20:56.036Z/custom-resources.zip"
        },
        "FunctionName": "formsli-stream-dev-custom-resource-apigw-cw-role",
        "Handler": "apiGatewayCloudWatchRole/handler.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 180
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "formsli-stream",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "arn:aws:apigateway:*::/account",
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "AwsAlertsAlarm": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "formsli-stream-dev-alerts-alarm",
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": "infrastructure.dev@forms.li"
          }
        ]
      }
    },
    "CreateEntryStreamFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 1,
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "CreateEntryStreamLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "CreateEntryStreamFunctionThrottlesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Throttles",
        "Threshold": 1,
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "CreateEntryStreamLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "CreateEntryStreamFunctionInvocationsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Invocations",
        "Threshold": 100,
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "CreateEntryStreamLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "CreateEntryStreamFunctionDurationAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Duration",
        "Threshold": 500,
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "CreateEntryStreamLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Average"
      }
    },
    "AlertsDashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": "formsli-stream-dev-ap-northeast-1",
        "DashboardBody": "{\"widgets\":[{\"type\":\"metric\",\"x\":0,\"y\":0,\"width\":8,\"height\":6,\"properties\":{\"title\":\"Errors\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream\"}]],\"region\":\"ap-northeast-1\",\"period\":300}},{\"type\":\"metric\",\"x\":8,\"y\":0,\"width\":6,\"height\":6,\"properties\":{\"title\":\"Errors\",\"view\":\"singleValue\",\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream\"}]],\"region\":\"ap-northeast-1\",\"period\":300}},{\"type\":\"metric\",\"x\":14,\"y\":0,\"width\":10,\"height\":6,\"properties\":{\"title\":\"Duration\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream p90\"}]],\"region\":\"ap-northeast-1\",\"period\":300}},{\"type\":\"metric\",\"x\":0,\"y\":6,\"width\":8,\"height\":6,\"properties\":{\"title\":\"Invocations\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream\"}]],\"region\":\"ap-northeast-1\",\"period\":300}},{\"type\":\"metric\",\"x\":8,\"y\":6,\"width\":6,\"height\":6,\"properties\":{\"title\":\"Invocations\",\"view\":\"singleValue\",\"metrics\":[[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream\"}]],\"region\":\"ap-northeast-1\",\"period\":300}},{\"type\":\"metric\",\"x\":14,\"y\":6,\"width\":10,\"height\":6,\"properties\":{\"title\":\"API Requests\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ApiGateway\",\"5XXError\",\"ApiName\",\"dev-formsli-stream\",{\"stat\":\"Sum\",\"period\":900}],[\"AWS/ApiGateway\",\"4XXError\",\"ApiName\",\"dev-formsli-stream\",{\"stat\":\"Sum\",\"period\":900}],[\"AWS/ApiGateway\",\"Count\",\"ApiName\",\"dev-formsli-stream\",{\"stat\":\"Sum\",\"period\":900}]],\"region\":\"ap-northeast-1\"}},{\"type\":\"metric\",\"x\":0,\"y\":12,\"width\":8,\"height\":6,\"properties\":{\"title\":\"Throttles\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream\"}]],\"region\":\"ap-northeast-1\",\"period\":300}},{\"type\":\"metric\",\"x\":8,\"y\":12,\"width\":6,\"height\":6,\"properties\":{\"title\":\"Throttles\",\"view\":\"singleValue\",\"metrics\":[[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"formsli-stream-dev-createEntryStream\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-northeast-1\",\"label\":\"createEntryStream\"}]],\"region\":\"ap-northeast-1\",\"period\":300}},{\"type\":\"metric\",\"x\":14,\"y\":12,\"width\":10,\"height\":6,\"properties\":{\"title\":\"API Latency\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ApiGateway\",\"IntegrationLatency\",\"ApiName\",\"dev-formsli-stream\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-northeast-1\"}],[\"AWS/ApiGateway\",\"Latency\",\"ApiName\",\"dev-formsli-stream\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-northeast-1\"}],[\"AWS/ApiGateway\",\"IntegrationLatency\",\"ApiName\",\"dev-formsli-stream\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-northeast-1\"}],[\"AWS/ApiGateway\",\"Latency\",\"ApiName\",\"dev-formsli-stream\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-northeast-1\"}]],\"region\":\"ap-northeast-1\"}}]}"
      }
    },
    "CreateEntryStreamIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "formsli-stream",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-stream-dev-create-delivery-stream:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "tag:GetResources",
                    "secretsmanager:CreateSecret",
                    "secretsmanager:ListSecrets",
                    "secretsmanager:GetRandomPassword",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:GetParameters",
                    "ssm:GetParametersByPath"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dev/formsli/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:secretsmanager:ap-northeast-1:${AWS::AccountId}:secret:/dev/formsli/rds/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "firehose:listDeliveryStreams",
                    "firehose:createDeliveryStream",
                    "firehose:describeDeliveryStream"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds-data:BeginTransaction",
                    "rds-data:CommitTransaction",
                    "rds-data:ExecuteStatement",
                    "rds-data:RollbackTransaction"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                    },
                    {
                      "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:passRole",
                    "iam:getRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "KinesisAccessRole",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "formsli-stream",
              "dev",
              "createEntryStream",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "KinesisAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allow Kinesis access to S3 User Bucket",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Join": [
                  ":",
                  [
                    "arn",
                    {
                      "Ref": "AWS::Partition"
                    },
                    "s3::",
                    "fl-dev-userdata*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              },
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "s3.${AWS::Region}.amazonaws.com"
                  }
                },
                "StringLike": {
                  "kms:EncryptionContext:aws:s3:arn": "fl-dev-userdata/home*"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*:*:*:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction",
                "lambda:GetFunctionConfiguration"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*:*"
                }
              ]
            }
          ]
        }
      }
    },
    "KinesisAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "formsli-stream-ap-northeast-1-kinesis-iam-role",
        "ManagedPolicyArns": [
          {
            "Ref": "KinesisAccessPolicy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "firehose.amazonaws.com"
                ]
              },
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Fn::Sub": "${AWS::AccountId}"
                  }
                }
              }
            }
          ]
        }
      },
      "DependsOn": [
        "KinesisAccessPolicy"
      ]
    },
    "ssmKinesisAccessRoleArn": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/dev/formsli/kinesis/accessRoleArn",
        "Description": "Application Name",
        "Value": {
          "Fn::GetAtt": [
            "KinesisAccessRole",
            "Arn"
          ]
        },
        "Type": "String"
      }
    },
    "CreateEntryStreamSubscriptionFilter": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:firehose:ap-northeast-1:286358943194:deliverystream/fl-dev-logs-delivery-stream",
        "FilterPattern": "",
        "LogGroupName": "/aws/lambda/formsli-stream-dev-create-delivery-stream",
        "RoleArn": "arn:aws:iam::286358943194:role/fl-dev-logs-cloudwatch-role"
      },
      "DependsOn": [
        "CreateEntryStreamLogGroup"
      ]
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "fl-dev-deployments"
    },
    "CreateEntryStreamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateEntryStreamLambdaVersion9ydddqYEK7D9WLuc8xhVfCT3uaqNp7w3qV1hGMzWVY"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "w2s48kp2a7",
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}