#serverless.yml
service: formsli-api-app
frameworkVersion: '>=1.5.0 <2.0.0'
provider:
  profile: fl-infrastructure
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs10.x
  region: ${opt:region, 'ap-northeast-1'}
  apiGateway:
    restApiId: ${ssm:/${self:provider.stage}/formsli/apig/restApiId}
    restApiRootResourceId: ${ssm:/${self:provider.stage}/formsli/apig/rootResourceId}
    restApiResources:
      /app: ${ssm:/${self:provider.stage}/formsli/apig/resource/app}
  logs:
    restApi:
      enableAccessLogging: true
      level: INFO
      dataTrace: true
  tracing: true
  memorySize: 512
  timeout: 30
  logRetentionInDays: 7
  tags:
    stage  : ${self:provider.stage}
    service: ${self:service}
    region : ${self:provider.region}
    stack  : api-app
  functions:
    formversionview: ${self:service}-${self:provider.stage}-form-versionview
    screenshot     : ${self:service}-${self:provider.stage}-form-screenshot
  environment:
    region             : ${self:provider.region}
    environment        : ${self:provider.stage}
    serviceName        : ${self:service}
    databaseName       : "formsli"
    dbClusterId        : ${ssm:/${self:provider.stage}/formsli/rds/id}
    dbClusterArn       : "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:${self:provider.environment.dbClusterId}"
    dbClusterSecretArn : ${ssm:/${self:provider.stage}/formsli/rds/password/secret}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "tag:GetResources"
        - "secretsmanager:CreateSecret"
        - "secretsmanager:ListSecrets"
        - "secretsmanager:GetRandomPassword"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "xray:PutTelemetryRecords"
        - "xray:PutTraceSegments"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
        - "ssm:GetParameters"
        - "ssm:GetParametersByPath"
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.stage}/formsli/*"

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-plugin-aws-alerts
  - '@anttiviljami/serverless-stack-output'

custom:
  alerts:
    dashboards: true
    stages:
      - dev # Disable later
      - staging
      - production
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: infrastructure.${self:provider.stage}@forms.li
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration
  serverless-iam-roles-per-function:
    defaultInherit: true
  # Stack Output Plugin
  output:
    file: outputs/stack.${self:provider.stage}.json # toml, yaml, yml, and json format is available
  # Servlerless Webpack (for functions)
  packagePath: './package.json'
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'npm'   # Packager that will be used to package your external modules
    includeModules:
      forceInclude:
        - source-map-support
functions:
  screenshot:
    name: ${self:provider.functions.screenshot}
    handler: functions/screenshot.handle
    runtime: nodejs8.10
    memorySize: 1024
    timeout: 60
    events:
      - http:
          path: /app/screenshot/{formId}/{versionId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              ${ssm:/${self:provider.stage}/formsli/apig/authorizerId}
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group
  formversionview:
    name: ${self:provider.functions.formversionview}
    handler: functions/formversionview.handle
    events:
      - http:
          path: /app/view/{formId}/{versionId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              ${ssm:/${self:provider.stage}/formsli/apig/authorizerId}
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: "Allow"
        Action:
          - "rds-data:GetItems"
          - "rds-data:ExecuteSql"
          - "rds-data:BatchExecuteStatement"
          - "rds-data:ExecuteStatement"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"