type FormEntry {
  id: ID!
  formId: ID!
  form: Form!
  meta: AWSJSON
  createdAt: AWSDateTime!
  data: AWSJSON!
}

input AddFormEntryInput {
  meta: AWSJSON
  data: AWSJSON!
}

type PaginatedFormEntries {
  items: [FormEntry!]
  nextToken: String
}

type FormVersion {
  id: ID!
  formId: ID!
  form: Form!
  owner: ID!
  ownedBy: User!
  createdAt: AWSDateTime!
  notes: String
  formData: AWSJSON
}

input AddFormVersionInput {
  formId: ID!
  owner: ID!
  notes: String
  formData: AWSJSON!
}

type PaginatedFormVersion {
  items: [FormVersion!]
  nextToken: String
}

type Form {
  id: ID!
  owner: ID!
  name: String!
  desc: String!
  versionId: ID!
  formData: FormVersion!
  ownedBy: User!
  accountId: ID!
  account: Account!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  startsAt: AWSDateTime
  endsAt: AWSDateTime
  isPaused: Boolean
  versions(filter: ModelFormVersionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelFormVersionConnection
  integrations(filter: ModelIntegrationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelIntegrationConnection
  entries(createdAt: ModelStringKeyConditionInput, filter: ModelFormEntryFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelFormEntryConnection
  version: Int!
}

input AddFormInput {
  name: String!
  desc: String
  startsAt: AWSDateTime
  endsAt: AWSDateTime
  isPaused: Boolean
}

input UpdateFormInput {
  id: ID!
  currentVersionId: ID
  name: String
  desc: String
  startsAt: AWSDateTime
  endsAt: AWSDateTime
  isPaused: Boolean
  versionId: ID
  owner: ID!
  accountId: ID!
  expectedVersion: Int!
}

type PaginatedForm {
  items: [Form!]
  nextToken: String
}

type User {
  id: ID!
  ownedBy: User
  accountId: ID!
  account: Account
  forms(filter: ModelFormFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelFormConnection
  integrations(filter: ModelIntegrationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelIntegrationConnection
  email: String!
  group: String!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  isDeleted: Boolean
  version: Int!
}

input UpdateUserInputData {
  group: String!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
}

input UpdateUserInput {
  id: ID!
  data: UpdateUserInputData!
  accountId: ID!
  expectedVersion: Int!
}

input AddUserInput {
  email: String!
  group: String!
  accountId: ID!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
}

type PaginatedUser {
  items: [User!]
  nextToken: String
}

enum AddressType {
  BILLING
  CONTACT
}

type Address {
  id: ID!
  name: String!
  addressee: String
  accountId: ID!
  account: Account!
  addressType: AddressType!
  phone_number: AWSPhone
  email: String!
  street: String
  city: String
  state: String
  country: String
  version: Int!
}

type AddAddressInput {
  name: String!
  addressee: String
  addressType: AddressType!
  phone_number: AWSPhone
  email: String!
  street: String
  city: String
  state: String
  country: String
}

type PaginatedAddress {
  items: [Address!]
  nextToken: String
}

type Account {
  id: ID!
  name: String!
  addresses(filter: ModelAddressFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAddressConnection
  website: String
  taxId: String
  owner: ID!
  ownedBy: User!
  planId: ID
  plan: Plan
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
  forms(filter: ModelFormFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelFormConnection
  integrations(filter: ModelIntegrationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelIntegrationConnection
  version: Int!
}

input UpdateAccountInput {
  id: ID!
  name: String
  planId: ID
  owner: ID!
  expectedVersion: Int!
}

input AddAccountInput {
  name: String!
}

type PaginatedAccount {
  items: [Account!]
  nextToken: String
}

type PlanType {
  id: ID!
  owner: ID!
  ownedBy: User!
  name: String!
  cost: Float!
  active: Boolean!
  billingTerm: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  version: Int!
}

input AddPlanTypeInput {
  name: String!
  cost: Float!
  billingTerm: String!
  active: Boolean!
}

input UpdatePlanTypeInput {
  id: ID!
  name: String!
  cost: Float!
  billingTerm: String!
  active: Boolean!
  owner: ID
  expectedVersion: Int!
}

type PaginatedPlanType {
  items: [PlanType!]
  nextToken: String
}

type Plan {
  id: ID!
  owner: ID!
  accountId: ID!
  planTypeId: ID!
  account: Account!
  ownedBy: User!
  planType: PlanType
  startDate: AWSDateTime!
  endDate: AWSDateTime
  active: Boolean
  lastBillDate: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  version: Int!
}

input AddPlanInput {
  accountId: ID!
  planTypeId: ID!
  endDate: AWSDateTime
  active: Boolean
}

input UpdatePlanInput {
  id: ID!
  endDate: AWSDateTime
  active: Boolean!
  accountId: ID!
  owner: ID
  planTypeId: ID!
  expectedVersion: Int!
}

type PaginatedPlan {
  items: [Plan!]
  nextToken: String
}

type IntegrationType {
  id: ID!
  owner: ID!
  planTypeId: ID!
  ownedBy: User!
  planType: PlanType
  name: String!
  active: Boolean!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  version: Int!
}

input AddIntegrationTypeInput {
  name: String!
  active: Boolean
}

input UpdateIntegrationTypeInput {
  id: ID!
  name: String!
  active: Boolean
  owner: ID!
  planTypeId: ID!
  expectedVersion: Int!
}

type PaginatedIntegrationType {
  items: [IntegrationType!]
  nextToken: String
}

type Integration {
  id: ID!
  integrationTypeId: ID!
  integrationType: IntegrationType!
  owner: ID!
  ownedBy: User!
  accountId: ID!
  account: Account!
  formId: ID!
  form: Form!
  active: Boolean!
  authType: String
  auth: AWSJSON
  target: String
  method: String
  lastExecuted: AWSDateTime
  lastExecutionResult: Boolean
  lastExecutionResultMessage: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  version: Int!
}

input AddIntegrationInput {
  integrationTypeId: ID!
  accountId: ID!
  formId: ID!
  active: Boolean
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

input UpdateIntegrationTypeInputData {
  active: Boolean
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

input UpdateIntegrationInput {
  id: ID!
  active: Boolean
  authType: String
  auth: AWSJSON
  target: String
  method: String
  integrationTypeId: ID!
  owner: ID
  accountId: ID!
  formId: ID!
  expectedVersion: Int!
}

type PaginatedIntegration {
  items: [Integration!]
  nextToken: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFormEntryConnection {
  items: [FormEntry]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelFormEntryFilterInput {
  id: ModelIDFilterInput
  formId: ModelIDFilterInput
  meta: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  data: ModelStringFilterInput
  and: [ModelFormEntryFilterInput]
  or: [ModelFormEntryFilterInput]
  not: ModelFormEntryFilterInput
}

type Query {
  getFormEntry(id: ID!, formId: ID!, createdAt: AWSDateTime!): FormEntry
  listFormEntrys(id: ID, formIdCreatedAt: ModelFormEntryPrimaryCompositeKeyConditionInput, filter: ModelFormEntryFilterInput, limit: Int, nextToken: String): ModelFormEntryConnection
  getFormVersion(id: ID!, formId: ID!, createdAt: AWSDateTime!): FormVersion
  listFormVersions(id: ID, formIdCreatedAt: ModelFormVersionPrimaryCompositeKeyConditionInput, filter: ModelFormVersionFilterInput, limit: Int, nextToken: String): ModelFormVersionConnection
  getForm(id: ID!, accountId: ID!, owner: ID!, createdAt: AWSDateTime!): Form
  listForms(id: ID, accountIdOwnerCreatedAt: ModelFormPrimaryCompositeKeyConditionInput, filter: ModelFormFilterInput, limit: Int, nextToken: String): ModelFormConnection
  getUser(id: ID!, accountId: ID!, group: String!, createdAt: AWSDateTime!): User
  listUsers(id: ID, accountIdGroupCreatedAt: ModelUserPrimaryCompositeKeyConditionInput, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getAddress(id: ID!): Address
  listAddresss(filter: ModelAddressFilterInput, limit: Int, nextToken: String): ModelAddressConnection
  getAccount(id: ID!, owner: ID!, createdAt: AWSDateTime!): Account
  listAccounts(id: ID, ownerCreatedAt: ModelAccountPrimaryCompositeKeyConditionInput, filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection
  getPlanType(id: ID!): PlanType
  listPlanTypes(filter: ModelPlanTypeFilterInput, limit: Int, nextToken: String): ModelPlanTypeConnection
  getPlan(id: ID!, accountId: ID!, planTypeId: ID!): Plan
  listPlans(id: ID, accountIdPlanTypeId: ModelPlanPrimaryCompositeKeyConditionInput, filter: ModelPlanFilterInput, limit: Int, nextToken: String): ModelPlanConnection
  getIntegrationType(id: ID!, owner: ID!, planTypeId: ID!): IntegrationType
  listIntegrationTypes(id: ID, ownerPlanTypeId: ModelIntegrationTypePrimaryCompositeKeyConditionInput, filter: ModelIntegrationTypeFilterInput, limit: Int, nextToken: String): ModelIntegrationTypeConnection
  getIntegration(id: ID!, integrationTypeId: ID!, accountId: ID!, formId: ID!): Integration
  listIntegrations(id: ID, integrationTypeIdAccountIdFormId: ModelIntegrationPrimaryCompositeKeyConditionInput, filter: ModelIntegrationFilterInput, limit: Int, nextToken: String): ModelIntegrationConnection
  formsByAccountCreatedAt(accountId: ID, createdAt: ModelStringKeyConditionInput, filter: ModelFormFilterInput, limit: Int, nextToken: String): ModelFormConnection
  formsByOwnerCreatedAt(owner: ID, createdAt: ModelStringKeyConditionInput, filter: ModelFormFilterInput, limit: Int, nextToken: String): ModelFormConnection
  usersByAccountCreatedAt(accountId: ID, createdAt: ModelStringKeyConditionInput, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  usersByAccountGroup(accountId: ID, group: ModelStringKeyConditionInput, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  accountsByPlan(planId: ID, filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection
  accountsByCreatedAt(createdAt: AWSDateTime, filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection
  plansByPlanType(planTypeId: ID, filter: ModelPlanFilterInput, limit: Int, nextToken: String): ModelPlanConnection
  plansByCreatedAt(createdAt: AWSDateTime, filter: ModelPlanFilterInput, limit: Int, nextToken: String): ModelPlanConnection
  integrationTypeByOwner(owner: ID, filter: ModelIntegrationTypeFilterInput, limit: Int, nextToken: String): ModelIntegrationTypeConnection
  integrationTypeByPlanType(planTypeId: ID, filter: ModelIntegrationTypeFilterInput, limit: Int, nextToken: String): ModelIntegrationTypeConnection
  integrationTypeByOwner(owner: ID, filter: ModelIntegrationFilterInput, limit: Int, nextToken: String): ModelIntegrationConnection
  integrationTypeByAccount(accountId: ID, filter: ModelIntegrationFilterInput, limit: Int, nextToken: String): ModelIntegrationConnection
}

input CreateFormEntryInput {
  id: ID!
  formId: ID!
  meta: AWSJSON
  createdAt: AWSDateTime!
  data: AWSJSON!
}

input UpdateFormEntryInput {
  id: ID!
  formId: ID!
  meta: AWSJSON
  createdAt: AWSDateTime!
  data: AWSJSON
}

input DeleteFormEntryInput {
  id: ID!
  formId: ID!
  createdAt: AWSDateTime!
}

type Mutation {
  createFormEntry(input: CreateFormEntryInput!): FormEntry
  updateFormEntry(input: UpdateFormEntryInput!): FormEntry
  deleteFormEntry(input: DeleteFormEntryInput!): FormEntry
  createFormVersion(input: CreateFormVersionInput!): FormVersion
  updateFormVersion(input: UpdateFormVersionInput!): FormVersion
  deleteFormVersion(input: DeleteFormVersionInput!): FormVersion
  createForm(input: CreateFormInput!): Form
  updateForm(input: UpdateFormInput!): Form
  deleteForm(input: DeleteFormInput!): Form
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createAddress(input: CreateAddressInput!): Address
  updateAddress(input: UpdateAddressInput!): Address
  deleteAddress(input: DeleteAddressInput!): Address
  createAccount(input: CreateAccountInput!): Account
  updateAccount(input: UpdateAccountInput!): Account
  deleteAccount(input: DeleteAccountInput!): Account
  createPlanType(input: CreatePlanTypeInput!): PlanType
  updatePlanType(input: UpdatePlanTypeInput!): PlanType
  deletePlanType(input: DeletePlanTypeInput!): PlanType
  createPlan(input: CreatePlanInput!): Plan
  updatePlan(input: UpdatePlanInput!): Plan
  deletePlan(input: DeletePlanInput!): Plan
  createIntegrationType(input: CreateIntegrationTypeInput!): IntegrationType
  updateIntegrationType(input: UpdateIntegrationTypeInput!): IntegrationType
  deleteIntegrationType(input: DeleteIntegrationTypeInput!): IntegrationType
  createIntegration(input: CreateIntegrationInput!): Integration
  updateIntegration(input: UpdateIntegrationInput!): Integration
  deleteIntegration(input: DeleteIntegrationInput!): Integration
}

type Subscription {
  onCreateFormEntry: FormEntry @aws_subscribe(mutations: ["createFormEntry"])
  onUpdateFormEntry: FormEntry @aws_subscribe(mutations: ["updateFormEntry"])
  onDeleteFormEntry: FormEntry @aws_subscribe(mutations: ["deleteFormEntry"])
  onCreateFormVersion: FormVersion @aws_subscribe(mutations: ["createFormVersion"])
  onUpdateFormVersion: FormVersion @aws_subscribe(mutations: ["updateFormVersion"])
  onDeleteFormVersion: FormVersion @aws_subscribe(mutations: ["deleteFormVersion"])
  onCreateForm: Form @aws_subscribe(mutations: ["createForm"])
  onUpdateForm: Form @aws_subscribe(mutations: ["updateForm"])
  onDeleteForm: Form @aws_subscribe(mutations: ["deleteForm"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateAddress: Address @aws_subscribe(mutations: ["createAddress"])
  onUpdateAddress: Address @aws_subscribe(mutations: ["updateAddress"])
  onDeleteAddress: Address @aws_subscribe(mutations: ["deleteAddress"])
  onCreateAccount: Account @aws_subscribe(mutations: ["createAccount"])
  onUpdateAccount: Account @aws_subscribe(mutations: ["updateAccount"])
  onDeleteAccount: Account @aws_subscribe(mutations: ["deleteAccount"])
  onCreatePlanType: PlanType @aws_subscribe(mutations: ["createPlanType"])
  onUpdatePlanType: PlanType @aws_subscribe(mutations: ["updatePlanType"])
  onDeletePlanType: PlanType @aws_subscribe(mutations: ["deletePlanType"])
  onCreatePlan: Plan @aws_subscribe(mutations: ["createPlan"])
  onUpdatePlan: Plan @aws_subscribe(mutations: ["updatePlan"])
  onDeletePlan: Plan @aws_subscribe(mutations: ["deletePlan"])
  onCreateIntegrationType: IntegrationType @aws_subscribe(mutations: ["createIntegrationType"])
  onUpdateIntegrationType: IntegrationType @aws_subscribe(mutations: ["updateIntegrationType"])
  onDeleteIntegrationType: IntegrationType @aws_subscribe(mutations: ["deleteIntegrationType"])
  onCreateIntegration: Integration @aws_subscribe(mutations: ["createIntegration"])
  onUpdateIntegration: Integration @aws_subscribe(mutations: ["updateIntegration"])
  onDeleteIntegration: Integration @aws_subscribe(mutations: ["deleteIntegration"])
}

type ModelFormVersionConnection {
  items: [FormVersion]
  nextToken: String
}

input ModelFormVersionFilterInput {
  id: ModelIDFilterInput
  formId: ModelIDFilterInput
  owner: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  notes: ModelStringFilterInput
  formData: ModelStringFilterInput
  and: [ModelFormVersionFilterInput]
  or: [ModelFormVersionFilterInput]
  not: ModelFormVersionFilterInput
}

input CreateFormVersionInput {
  id: ID!
  formId: ID!
  owner: ID!
  createdAt: AWSDateTime!
  notes: String
  formData: AWSJSON
}

input UpdateFormVersionInput {
  id: ID!
  formId: ID!
  owner: ID
  createdAt: AWSDateTime!
  notes: String
  formData: AWSJSON
}

input DeleteFormVersionInput {
  id: ID!
  formId: ID!
  createdAt: AWSDateTime!
}

type ModelFormConnection {
  items: [Form]
  nextToken: String
}

input ModelFormFilterInput {
  id: ModelIDFilterInput
  owner: ModelIDFilterInput
  name: ModelStringFilterInput
  desc: ModelStringFilterInput
  versionId: ModelIDFilterInput
  accountId: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  startsAt: ModelStringFilterInput
  endsAt: ModelStringFilterInput
  isPaused: ModelBooleanFilterInput
  and: [ModelFormFilterInput]
  or: [ModelFormFilterInput]
  not: ModelFormFilterInput
}

input CreateFormInput {
  id: ID!
  owner: ID!
  name: String!
  desc: String!
  versionId: ID!
  accountId: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  startsAt: AWSDateTime
  endsAt: AWSDateTime
  isPaused: Boolean
}

input DeleteFormInput {
  id: ID!
  accountId: ID!
  owner: ID!
  createdAt: AWSDateTime!
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  accountId: ModelIDFilterInput
  email: ModelStringFilterInput
  group: ModelStringFilterInput
  given_name: ModelStringFilterInput
  family_name: ModelStringFilterInput
  phone_number: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  isDeleted: ModelBooleanFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID!
  accountId: ID!
  email: String!
  group: String!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  isDeleted: Boolean
}

input DeleteUserInput {
  id: ID!
  accountId: ID!
  group: String!
  createdAt: AWSDateTime!
}

type ModelAddressConnection {
  items: [Address]
  nextToken: String
}

input ModelAddressTypeFilterInput {
  eq: AddressType
  ne: AddressType
}

input ModelAddressFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  addressee: ModelStringFilterInput
  accountId: ModelIDFilterInput
  addressType: ModelAddressTypeFilterInput
  phone_number: ModelStringFilterInput
  email: ModelStringFilterInput
  street: ModelStringFilterInput
  city: ModelStringFilterInput
  state: ModelStringFilterInput
  country: ModelStringFilterInput
  and: [ModelAddressFilterInput]
  or: [ModelAddressFilterInput]
  not: ModelAddressFilterInput
}

input CreateAddressInput {
  id: ID
  name: String!
  addressee: String
  accountId: ID!
  addressType: AddressType!
  phone_number: AWSPhone
  email: String!
  street: String
  city: String
  state: String
  country: String
}

input UpdateAddressInput {
  id: ID!
  name: String
  addressee: String
  accountId: ID
  addressType: AddressType
  phone_number: AWSPhone
  email: String
  street: String
  city: String
  state: String
  country: String
  expectedVersion: Int!
}

input DeleteAddressInput {
  id: ID
  expectedVersion: Int!
}

type ModelAccountConnection {
  items: [Account]
  nextToken: String
}

input ModelAccountFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  website: ModelStringFilterInput
  taxId: ModelStringFilterInput
  owner: ModelIDFilterInput
  planId: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelAccountFilterInput]
  or: [ModelAccountFilterInput]
  not: ModelAccountFilterInput
}

input CreateAccountInput {
  id: ID!
  name: String!
  website: String
  taxId: String
  owner: ID!
  planId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}

input DeleteAccountInput {
  id: ID!
  owner: ID!
  createdAt: AWSDateTime!
}

type ModelPlanTypeConnection {
  items: [PlanType]
  nextToken: String
}

input ModelPlanTypeFilterInput {
  id: ModelIDFilterInput
  owner: ModelIDFilterInput
  name: ModelStringFilterInput
  cost: ModelFloatFilterInput
  active: ModelBooleanFilterInput
  billingTerm: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelPlanTypeFilterInput]
  or: [ModelPlanTypeFilterInput]
  not: ModelPlanTypeFilterInput
}

input CreatePlanTypeInput {
  id: ID
  owner: ID!
  name: String!
  cost: Float!
  active: Boolean!
  billingTerm: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeletePlanTypeInput {
  id: ID
  expectedVersion: Int!
}

type ModelPlanConnection {
  items: [Plan]
  nextToken: String
}

input ModelPlanFilterInput {
  id: ModelIDFilterInput
  owner: ModelIDFilterInput
  accountId: ModelIDFilterInput
  planTypeId: ModelIDFilterInput
  startDate: ModelStringFilterInput
  endDate: ModelStringFilterInput
  active: ModelBooleanFilterInput
  lastBillDate: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelPlanFilterInput]
  or: [ModelPlanFilterInput]
  not: ModelPlanFilterInput
}

input CreatePlanInput {
  id: ID!
  owner: ID!
  accountId: ID!
  planTypeId: ID!
  startDate: AWSDateTime!
  endDate: AWSDateTime
  active: Boolean
  lastBillDate: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeletePlanInput {
  id: ID!
  accountId: ID!
  planTypeId: ID!
}

type ModelIntegrationTypeConnection {
  items: [IntegrationType]
  nextToken: String
}

input ModelIntegrationTypeFilterInput {
  id: ModelIDFilterInput
  owner: ModelIDFilterInput
  planTypeId: ModelIDFilterInput
  name: ModelStringFilterInput
  active: ModelBooleanFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelIntegrationTypeFilterInput]
  or: [ModelIntegrationTypeFilterInput]
  not: ModelIntegrationTypeFilterInput
}

input CreateIntegrationTypeInput {
  id: ID!
  owner: ID!
  planTypeId: ID!
  name: String!
  active: Boolean!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteIntegrationTypeInput {
  id: ID!
  owner: ID!
  planTypeId: ID!
}

type ModelIntegrationConnection {
  items: [Integration]
  nextToken: String
}

input ModelIntegrationFilterInput {
  id: ModelIDFilterInput
  integrationTypeId: ModelIDFilterInput
  owner: ModelIDFilterInput
  accountId: ModelIDFilterInput
  formId: ModelIDFilterInput
  active: ModelBooleanFilterInput
  authType: ModelStringFilterInput
  auth: ModelStringFilterInput
  target: ModelStringFilterInput
  method: ModelStringFilterInput
  lastExecuted: ModelStringFilterInput
  lastExecutionResult: ModelBooleanFilterInput
  lastExecutionResultMessage: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelIntegrationFilterInput]
  or: [ModelIntegrationFilterInput]
  not: ModelIntegrationFilterInput
}

input CreateIntegrationInput {
  id: ID!
  integrationTypeId: ID!
  owner: ID!
  accountId: ID!
  formId: ID!
  active: Boolean!
  authType: String
  auth: AWSJSON
  target: String
  method: String
  lastExecuted: AWSDateTime
  lastExecutionResult: Boolean
  lastExecutionResultMessage: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteIntegrationInput {
  id: ID!
  integrationTypeId: ID!
  accountId: ID!
  formId: ID!
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

input ModelFormEntryPrimaryCompositeKeyConditionInput {
  eq: ModelFormEntryPrimaryCompositeKeyInput
  le: ModelFormEntryPrimaryCompositeKeyInput
  lt: ModelFormEntryPrimaryCompositeKeyInput
  ge: ModelFormEntryPrimaryCompositeKeyInput
  gt: ModelFormEntryPrimaryCompositeKeyInput
  between: [ModelFormEntryPrimaryCompositeKeyInput]
  beginsWith: ModelFormEntryPrimaryCompositeKeyInput
}

input ModelFormEntryPrimaryCompositeKeyInput {
  formId: ID
  createdAt: String
}

input ModelFormVersionPrimaryCompositeKeyConditionInput {
  eq: ModelFormVersionPrimaryCompositeKeyInput
  le: ModelFormVersionPrimaryCompositeKeyInput
  lt: ModelFormVersionPrimaryCompositeKeyInput
  ge: ModelFormVersionPrimaryCompositeKeyInput
  gt: ModelFormVersionPrimaryCompositeKeyInput
  between: [ModelFormVersionPrimaryCompositeKeyInput]
  beginsWith: ModelFormVersionPrimaryCompositeKeyInput
}

input ModelFormVersionPrimaryCompositeKeyInput {
  formId: ID
  createdAt: String
}

input ModelFormPrimaryCompositeKeyConditionInput {
  eq: ModelFormPrimaryCompositeKeyInput
  le: ModelFormPrimaryCompositeKeyInput
  lt: ModelFormPrimaryCompositeKeyInput
  ge: ModelFormPrimaryCompositeKeyInput
  gt: ModelFormPrimaryCompositeKeyInput
  between: [ModelFormPrimaryCompositeKeyInput]
  beginsWith: ModelFormPrimaryCompositeKeyInput
}

input ModelFormPrimaryCompositeKeyInput {
  owner: ID
  accountId: ID
  createdAt: String
}

input ModelUserPrimaryCompositeKeyConditionInput {
  eq: ModelUserPrimaryCompositeKeyInput
  le: ModelUserPrimaryCompositeKeyInput
  lt: ModelUserPrimaryCompositeKeyInput
  ge: ModelUserPrimaryCompositeKeyInput
  gt: ModelUserPrimaryCompositeKeyInput
  between: [ModelUserPrimaryCompositeKeyInput]
  beginsWith: ModelUserPrimaryCompositeKeyInput
}

input ModelUserPrimaryCompositeKeyInput {
  accountId: ID
  group: String
  createdAt: String
}

input ModelAccountPrimaryCompositeKeyConditionInput {
  eq: ModelAccountPrimaryCompositeKeyInput
  le: ModelAccountPrimaryCompositeKeyInput
  lt: ModelAccountPrimaryCompositeKeyInput
  ge: ModelAccountPrimaryCompositeKeyInput
  gt: ModelAccountPrimaryCompositeKeyInput
  between: [ModelAccountPrimaryCompositeKeyInput]
  beginsWith: ModelAccountPrimaryCompositeKeyInput
}

input ModelAccountPrimaryCompositeKeyInput {
  owner: ID
  createdAt: String
}

input ModelPlanPrimaryCompositeKeyConditionInput {
  eq: ModelPlanPrimaryCompositeKeyInput
  le: ModelPlanPrimaryCompositeKeyInput
  lt: ModelPlanPrimaryCompositeKeyInput
  ge: ModelPlanPrimaryCompositeKeyInput
  gt: ModelPlanPrimaryCompositeKeyInput
  between: [ModelPlanPrimaryCompositeKeyInput]
  beginsWith: ModelPlanPrimaryCompositeKeyInput
}

input ModelPlanPrimaryCompositeKeyInput {
  accountId: ID
  planTypeId: ID
}

input ModelIntegrationTypePrimaryCompositeKeyConditionInput {
  eq: ModelIntegrationTypePrimaryCompositeKeyInput
  le: ModelIntegrationTypePrimaryCompositeKeyInput
  lt: ModelIntegrationTypePrimaryCompositeKeyInput
  ge: ModelIntegrationTypePrimaryCompositeKeyInput
  gt: ModelIntegrationTypePrimaryCompositeKeyInput
  between: [ModelIntegrationTypePrimaryCompositeKeyInput]
  beginsWith: ModelIntegrationTypePrimaryCompositeKeyInput
}

input ModelIntegrationTypePrimaryCompositeKeyInput {
  owner: ID
  planTypeId: ID
}

input ModelIntegrationPrimaryCompositeKeyConditionInput {
  eq: ModelIntegrationPrimaryCompositeKeyInput
  le: ModelIntegrationPrimaryCompositeKeyInput
  lt: ModelIntegrationPrimaryCompositeKeyInput
  ge: ModelIntegrationPrimaryCompositeKeyInput
  gt: ModelIntegrationPrimaryCompositeKeyInput
  between: [ModelIntegrationPrimaryCompositeKeyInput]
  beginsWith: ModelIntegrationPrimaryCompositeKeyInput
}

input ModelIntegrationPrimaryCompositeKeyInput {
  integrationTypeId: ID
  accountId: ID
  formId: ID
}
