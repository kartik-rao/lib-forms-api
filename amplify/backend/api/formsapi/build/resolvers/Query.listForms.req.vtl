## [Start] Set query expression for @key **
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && $util.isNullOrBlank($ctx.args.id) )
  $util.error("When providing argument 'accountIdOwnerCreatedAt' you must also provide 'id'.", "InvalidArgumentsError")
#end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) )
  #set( $sortKeyArgumentOperations = $ctx.args.accountIdOwnerCreatedAt.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error("Argument accountIdOwnerCreatedAt must specify at most one key condition operation.", "InvalidArgumentsError")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == "between" )
      #if( $ctx.args.accountIdOwnerCreatedAt.between.size() != 2 )
        $util.error("Argument 'accountIdOwnerCreatedAt.between' expects exactly two elements.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[0].createdAt) && $util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[0].owner) )
        $util.error("When providing argument 'accountIdOwnerCreatedAt.between[0].createdAt' you must also provide 'accountIdOwnerCreatedAt.between[0].owner'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[1].createdAt) && $util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[1].owner) )
        $util.error("When providing argument 'accountIdOwnerCreatedAt.between[1].createdAt' you must also provide 'accountIdOwnerCreatedAt.between[1].owner'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[0].owner) && $util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[0].accountId) )
        $util.error("When providing argument 'accountIdOwnerCreatedAt.between[0].owner' you must also provide 'accountIdOwnerCreatedAt.between[0].accountId'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[1].owner) && $util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.between[1].accountId) )
        $util.error("When providing argument 'accountIdOwnerCreatedAt.between[1].owner' you must also provide 'accountIdOwnerCreatedAt.between[1].accountId'.", "InvalidArgumentsError")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.get("$operation").createdAt) && $util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.get("$operation").owner) )
        $util.error("When providing argument 'accountIdOwnerCreatedAt.$operation.createdAt' you must also provide 'accountIdOwnerCreatedAt.$operation.owner'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.get("$operation").owner) && $util.isNullOrBlank($ctx.args.accountIdOwnerCreatedAt.get("$operation").accountId) )
        $util.error("When providing argument 'accountIdOwnerCreatedAt.$operation.owner' you must also provide 'accountIdOwnerCreatedAt.$operation.accountId'.", "InvalidArgumentsError")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = "#id = :id" )
  #set( $modelQueryExpression.expressionNames = {
  "#id": "id"
} )
  #set( $modelQueryExpression.expressionValues = {
  ":id": {
      "S": "$ctx.args.id"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = "" )
#set( $sortKeyValue2 = "" )
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && !$util.isNull($ctx.args.accountIdOwnerCreatedAt.beginsWith) )
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.beginsWith.accountId) ) #set( $sortKeyValue = "$ctx.args.accountIdOwnerCreatedAt.beginsWith.accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.beginsWith.owner) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.beginsWith.owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.beginsWith.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.beginsWith.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "accountId#owner#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && !$util.isNull($ctx.args.accountIdOwnerCreatedAt.between) )
  #if( $ctx.args.accountIdOwnerCreatedAt.between.size() != 2 )
    $util.error("Argument accountIdOwnerCreatedAt.between expects exactly 2 elements.")
  #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.between[0].accountId) ) #set( $sortKeyValue = "$ctx.args.accountIdOwnerCreatedAt.between[0].accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.between[0].owner) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.between[0].owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.between[0].createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.between[0].createdAt" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.between[1].accountId) ) #set( $sortKeyValue2 = "$ctx.args.accountIdOwnerCreatedAt.between[1].accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.between[1].owner) ) #set( $sortKeyValue2 = "$sortKeyValue2#$ctx.args.accountIdOwnerCreatedAt.between[1].owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.between[1].createdAt) ) #set( $sortKeyValue2 = "$sortKeyValue2#$ctx.args.accountIdOwnerCreatedAt.between[1].createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "accountId#owner#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey0", { "S": "$sortKeyValue" }))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey1", { "S": "$sortKeyValue2" }))
#end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && !$util.isNull($ctx.args.accountIdOwnerCreatedAt.eq) )
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.eq.accountId) ) #set( $sortKeyValue = "$ctx.args.accountIdOwnerCreatedAt.eq.accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.eq.owner) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.eq.owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.eq.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.eq.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey = :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "accountId#owner#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && !$util.isNull($ctx.args.accountIdOwnerCreatedAt.lt) )
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.lt.accountId) ) #set( $sortKeyValue = "$ctx.args.accountIdOwnerCreatedAt.lt.accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.lt.owner) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.lt.owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.lt.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.lt.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey < :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "accountId#owner#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && !$util.isNull($ctx.args.accountIdOwnerCreatedAt.le) )
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.le.accountId) ) #set( $sortKeyValue = "$ctx.args.accountIdOwnerCreatedAt.le.accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.le.owner) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.le.owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.le.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.le.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey <= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "accountId#owner#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && !$util.isNull($ctx.args.accountIdOwnerCreatedAt.gt) )
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.gt.accountId) ) #set( $sortKeyValue = "$ctx.args.accountIdOwnerCreatedAt.gt.accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.gt.owner) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.gt.owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.gt.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.gt.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey > :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "accountId#owner#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt) && !$util.isNull($ctx.args.accountIdOwnerCreatedAt.ge) )
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.ge.accountId) ) #set( $sortKeyValue = "$ctx.args.accountIdOwnerCreatedAt.ge.accountId" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.ge.owner) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.ge.owner" ) #end
#if( !$util.isNull($ctx.args.accountIdOwnerCreatedAt.ge.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.accountIdOwnerCreatedAt.ge.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey >= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "accountId#owner#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for @key **
#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  "version": "2017-02-28",
  "limit": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = "$context.args.nextToken" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson("$util.transform.toDynamoDBFilterExpression($ctx.args.filter)") )
#end
#if( !$util.isNull($modelQueryExpression) && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put("operation", "Query"))
  $util.qr($ListRequest.put("query", $modelQueryExpression))
#else
  $util.qr($ListRequest.put("operation", "Scan"))
#end
$util.toJson($ListRequest)