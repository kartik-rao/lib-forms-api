#serverless.yml
service: formsli
frameworkVersion: '>=1.5.0 <2.0.0'
provider:
  name: aws
  logs:
    restApi:
        enableAccessLogging: true
        level: INFO
        dataTrace: true
  runtime: nodejs10.x
  tracing: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}
  memorySize: 512
  timeout: 30
  logRetentionInDays: 7
  tags:
    service: ${self:service}
    region: ${self:provider.region}
  functions:
    postconfirmation: ${self:service}-${self:provider.stage}-postconfirmation
    invite        : ${self:service}-${self:provider.stage}-invite
    formentry     : ${self:service}-${self:provider.stage}-form-entry
    formjson      : ${self:service}-${self:provider.stage}-form-json
    formview      : ${self:service}-${self:provider.stage}-form-view
    authftp       : ${self:service}-${self:provider.stage}-auth-ftp
    createEntryStream : ${self:service}-${self:provider.stage}-form-create-stream
    sqs_fn_appsync     : ${self:service}-${self:provider.stage}-put-appsync
    sqs_fn_firehose    : ${self:service}-${self:provider.stage}-put-firehose
    sqs_fn_analytics   : ${self:service}-${self:provider.stage}-put-analytics
    sqs_fn_integration : ${self:service}-${self:provider.stage}-integration
  profile: fl-infrastructure
  environment:
    prefix_dev: "dev-"
    prefix_staging: "staging-"
    prefix_production: ""
    region         : ${self:provider.region}
    hostedZoneId   : Z3CMAQR65ETWUL
    certArn        : "arn:aws:acm:ap-northeast-1:286358943194:certificate/999afdb8-6c01-4f47-86ca-edbfddb3daa3"
    usEastCertArn  : "arn:aws:acm:us-east-1:286358943194:certificate/8e043316-5cf7-467c-b453-159d3cf3d68e"
    rootDomain     : ${opt:domain, 'forms.li'}
    appDomain      : "app.${self:provider.environment.rootDomain}"
    apiDomain      : "api.${self:provider.environment.rootDomain}"
    gqlDomain      : "graph.${self:provider.environment.rootDomain}"
    staticDomain   : "static.${self:provider.environment.rootDomain}"
    sftpDomain     : "sftp.${self:provider.environment.rootDomain}"
    environment    : ${self:provider.stage}
    serviceName    : ${self:service}
    databaseName   : ${self:service}
    userPoolId     : ${ssm:/${self:provider.stage}/formsli/cognito/userpool/id}
    userPoolArn    : ${ssm:/${self:provider.stage}/formsli/cognito/userpool/arn}
    userPoolClientId: ${ssm:/${self:provider.stage}/formsli/cognito/userpool/clientId}
    userPoolAdminClientId: ${ssm:/${self:provider.stage}/formsli/cognito/userpool/adminClientId}
    dbClusterId    : ${ssm:/${self:provider.stage}/formsli/rds/id}
    dbClusterArn   : "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:${self:provider.environment.dbClusterId}"
    dbClusterSecretArn : ${ssm:/${self:provider.stage}/formsli/rds/password/secret}
    graphqlApiId       : ${ssm:/${self:provider.stage}/formsli/graphql/api/id}
    graphqlApiUrl      : ${ssm:/${self:provider.stage}/formsli/graphql/api/url}
    graphqlApiKey      : ${ssm:/${self:provider.stage}/formsli/graphql/api/key}
    s3_user_bucket     : ${ssm:/${self:provider.stage}/formsli/s3/buckets/user/id}
    s3_app_bucket      : ${ssm:/${self:provider.stage}/formsli/s3/buckets/app/id}
    sqs_entry          : ${self:service}-${self:provider.stage}-entry-queue
    sqs_firehose       : ${self:service}-${self:provider.stage}-firehose-queue
    sqs_integration    : ${self:service}-${self:provider.stage}-integration-queue
    sqs_analytics      : ${self:service}-${self:provider.stage}-analytics-queue
    sqs_entry_url      :
      Ref: EntryQueue
    sqs_integration_url:
      Ref: IntegrationQueue
    sqs_firehose_url:
      Ref: FirehoseQueue
    sqs_analytics_url:
      Ref: AnalyticsQueue
    sftp_server_id     : { Fn::GetAtt: [SftpServer, ServerId] }
    sftp_server_arn    : { Fn::GetAtt: [SftpServer, Arn] }
    sftp_role_arn      : { Fn::GetAtt: [SftpUserRole, Arn] }
    kinesisAccessRole  : { Fn::GetAtt: [KinesisAccessRole, Arn] }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "tag:GetResources"
        - "secretsmanager:CreateSecret"
        - "secretsmanager:ListSecrets"
        - "secretsmanager:GetRandomPassword"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "xray:PutTelemetryRecords"
        - "xray:PutTraceSegments"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
        - "ssm:GetParameters"
        - "ssm:GetParametersByPath"
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.stage}/${self:service}/*"

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  # - serverless-plugin-aws-alerts
  - serverless-domain-manager
  - serverless-appsync-plugin
  - '@anttiviljami/serverless-stack-output'
  - serverless-offline

resources:
  - ${file(resources/iam.yml)}
  - ${file(resources/apig.auth.yml)}
  - ${file(resources/sqs.yml)}
  - ${file(resources/sftp.yml)}
  - ${file(resources/ssm.yml)}
  - ${file(resources/appsync-distribution.yml)}

custom:
  alerts:
    dashboards: true
    stages:
      - dev # Disable later
      - staging
      - production
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: infrastructure.${self:provider.stage}@forms.li
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration
  serverless-iam-roles-per-function:
    defaultInherit: true
  customDomain:
    DependsOn: ApiGatewayApiKey1
    domainName: ${self:provider.stage}-${self:provider.environment.apiDomain}
    certificateName: "*.forms.li"
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
  # Stack Output Plugin
  output:
    file: outputs/stack.${self:provider.stage}.json # toml, yaml, yml, and json format is available
  # Servlerless Webpack (for functions)
  packagePath: './package.json'
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'npm'   # Packager that will be used to package your external modules
    includeModules:
      forceInclude:
        - source-map-support
  appSync:
    name:  formsli-api-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    additionalAuthenticationProviders:
      - authenticationType: API_KEY
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: "${self:provider.environment.userPoolId}"
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncCloudWatchRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL
    schema: schema.graphql
    dataSources:
      - type: RELATIONAL_DATABASE
        name: AppData
        description: RDS source for formsli
        config:
          # The identifier for RDSCluster. Where RDSCluster is the cluster defined in Resources
          dbClusterIdentifier: ${self:provider.environment.dbClusterId}
          # The RDSClusterSecret ARN. Where RDSClusterSecret is the cluster secret defined in Resources
          awsSecretStoreArn: ${self:provider.environment.dbClusterSecretArn}
          databaseName: ${self:service}
          serviceRoleArn: { Fn::GetAtt: [AppSyncRDSRole, Arn] }
          region: ${self:provider.region}
    mappingTemplatesLocation: src/mapping-templates
    mappingTemplates: ${file(serverless.appsync-mappings.yml)}
    functionConfigurations: ${file(serverless.appsync-functions.yml)}
    ## Add substitutions here to replace all hardcoded table/index names in mapping templates
    substitutions:

functions:
  sqs_fn_firehose:
    name: ${self:provider.functions.sqs_fn_firehose}
    handler: src/sqs_fn_firehose.handle
    reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - FirehoseQueue
              - Arn
          enabled: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
        Resource :
          - { Fn::GetAtt: [FirehoseQueue, Arn] }
      - Effect: Allow
        Action:
          - firehose:putRecord
          - firehose:putRecordBatch
        Resource :
          - "*"
      - Effect: "Allow"
        Action:
          - "iam:passRole"
          - "iam:getRole"
        Resource:
          - { Fn::GetAtt: [KinesisAccessRole, Arn] }
  sqs_fn_appsync:
    name: ${self:provider.functions.sqs_fn_appsync}
    handler: src/sqs_fn_appsync.handle
    reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EntryQueue
              - Arn
          enabled: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
        Resource :
          - { Fn::GetAtt: [EntryQueue, Arn] }
      - Effect: "Allow"
        Action:
          - "appsync:GraphQL"
        Resource:
          - "arn:aws:appsync:#{AWS::Region}:#{AWS::AccountId}:apis/${self:provider.environment.graphqlApiId}/types/Mutation/fields/addFormEntry"
  createEntryStream :
    name: ${self:provider.functions.createEntryStream}
    handler: src/createstream.handle
    events:
      - http:
          path  : /stream/{formId}
          method: PUT
          cors  : true
          parameters:
            querystrings:
              tenantId: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MyApiGatewayAuthorizer
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: Allow
        Action:
          - firehose:listDeliveryStreams
          - firehose:createDeliveryStream
          - firehose:describeDeliveryStream
        Resource :
          - "*"
      - Effect: "Allow"
        Action:
          - "rds-data:BeginTransaction"
          - "rds-data:CommitTransaction"
          - "rds-data:ExecuteStatement"
          - "rds-data:RollbackTransaction"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"
  ftpAuth :
    name: ${self:provider.functions.authftp}
    handler: src/authftp.handle
    events:
      - http:
          path  : /servers/{serverId}/users/{username}/config
          method: get
          cors  : true
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminInitiateAuth
        Resource: "${self:provider.environment.userPoolArn}"
  formJson:
    name: ${self:provider.functions.formjson}
    handler: src/form.handle
    events:
      - http:
          path: /form/json/{formId}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: "Allow"
        Action:
          - "rds-data:GetItems"
          - "rds-data:ExecuteSql"
          - "rds-data:BatchExecuteStatement"
          - "rds-data:ExecuteStatement"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"
  formEntry:
    name: ${self:provider.functions.formentry}
    handler: src/formentry.handle
    events:
      - http:
          path: /form/entry/{tenantId}/{formId}
          method: post
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - sqs:SendMessage
          - sqs:ListQueues
        Resource :
          - { Fn::GetAtt: [EntryQueue, Arn] }
          - { Fn::GetAtt: [AnalyticsQueue, Arn] }
          - { Fn::GetAtt: [IntegrationQueue, Arn] }
          - { Fn::GetAtt: [FirehoseQueue, Arn] }
  formView:
    name: ${self:provider.functions.formview}
    handler: src/formview.handle
    events:
      - http:
          path: /form/view/{formId}
          method: get
          cors: true
  postConfirmation:
    name: ${self:provider.functions.postconfirmation}
    handler: src/postconfirmation.handle
    events:
      - cognitoUserPool:
          pool: fl-${self:provider.stage}-userpool
          trigger: PostConfirmation
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource:
          - "*"
        Condition:
          StringLike:
            ses:FromAddress:
              - "*@forms.li"
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: "Allow"
        Action:
          - "rds-data:BatchExecuteStatement"
          - "rds-data:BeginTransaction"
          - "rds-data:CommitTransaction"
          - "rds-data:ExecuteStatement"
          - "rds-data:RollbackTransaction"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminUpdateUserAttributes
          - cognito-idp:AdminGetUser
        Resource: "${self:provider.environment.userPoolArn}"
  signup:
    name: ${self:provider.functions.invite}
    handler: src/invite.handle
    events:
      - http:
          path: /invite
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MyApiGatewayAuthorizer
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: "Allow"
        Action:
          - "rds-data:ExecuteStatement"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminGetUser
        Resource: "${self:provider.environment.userPoolArn}"
