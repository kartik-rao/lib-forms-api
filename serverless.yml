#serverless.yml
service: formsgraphql

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  serviceName: ${self:provider.stage}-${self:service}
  functions:
    postconfirmation: ${self:provider.serviceName}-postconfirmation
    signup: ${self:provider.serviceName}-signup
  profile: default
  environment:
    serviceName: ${self:provider.stage}-${self:service}
    table_form_entries: ${self:provider.serviceName}_table_form_entries
    table_app_data: ${self:provider.serviceName}_table_appdata
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.table_app_data}"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-east-1:*:*"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.table_form_entries}"
    - Effect: Allow
      Action:
        - cognito-idp:SignUp
        - cognito-idp:AddCustomAttributes
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminRemoveUserFromGroup
        - cognito-idp:AdminGetUser
        - cognito-idp:GetUser
      Resource: "arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/*"

plugins:
  # - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - '@anttiviljami/serverless-stack-output'
  - serverless-appsync-offline
  - serverless-offline

resources:
  - ${file(resources/iam.yml)}
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/cognito.userpool.yml)}
  - ${file(resources/s3.yml)}

custom:
  # Stack Output Plugin
  output:
    file: outputs/stack.json # toml, yaml, yml, and json format is available
  # Servlerless Webpack (for functions)
  packagePath: './package.json'
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'npm'   # Packager that will be used to package your external modules
    includeModules:
      forceInclude:
        - source-map-support
  bucket: ${self:service}-${self:provider.stage}-data
  dynamodb:
    start:
      port: 8000
      inMemory: true
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  appSync:
    name:  ai-forms-backend-${self:provider.stage}
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    # if AMAZON_COGNITO_USER_POOLS
    serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBRole, Arn] }
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId:
        Ref: CognitoUserPoolMyUserPool
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncCloudWatchRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: AppData
        description: App Data Table
        config:
          tableName: ${self:provider.environment.table_app_data} # Where AppDataTable is a dynamodb table defined in Resources
      - type: AMAZON_DYNAMODB
        name: FormEntries
        description: FormEntries Table
        config:
          tableName: ${self:provider.environment.table_form_entries} # Where AppDataTable is a dynamodb table defined in Resources
    mappingTemplatesLocation: src/mapping-templates
    mappingTemplates: ${file(serverless.appsync-mappings.yml)}
    functionConfigurations:
      - dataSource: AppData
        name: authorizeFunction
        request: fetchUserAccount-request.vtl
        response: fetchUserAccount-response.vtl
      - dataSource: AppData
        name: addPlan
        request: addPlan-request.vtl
        response: passthrough-response.vtl
      - dataSource: AppData
        name: updateAccount
        request: updateAccountPlan-request.vtl
        response: updateAccountPlan-response.vtl
# functions:
#   signup:
#     name: ${self:provider.functions.signup}
#     handler: src/signup.handle
#     events:
#       - http:
#           path: /signup
#           method: post
#           cors: true
#     environment:
#       cognitoUserPoolId:
#         Ref: CognitoUserPoolMyUserPool
#       cognitoUserPoolWebClientId:
#         Ref: CognitoUserPoolClient
#   postConfirmation:
#     name: ${self:provider.functions.postconfirmation}
#     handler: src/postconfirmation.handle
#     events:
#       - http:
#           path: /postconfirm
#           method: post
#           cors: true
#       - cognitoUserPool:
#           pool: MyUserPool
#           trigger: PostConfirmation