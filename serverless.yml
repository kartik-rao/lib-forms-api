#serverless.yml

service: formsgraphql

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:stage, 'ap-southeast-2'}
  profile: default
  environment:
    TBL_FORM_ENTRY: table_${self:service}_${self:provider.stage}_entries
    TBL_MASTER_DATA: table_${self:service}_${self:provider.stage}_masterdata
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TBL_MASTER_DATA}"

plugins:
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-offline
  - serverless-offline

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/cognito.userpool.yml)}
  - ${file(resources/s3.yml)}

custom:
  TBL_MASTER_DATA: ${self:provider.environment.TBL_MASTER_DATA}
  TBL_FORM_ENTRY: ${self:provider.environment.TBL_FORM_ENTRY}
  bucket: ${self:service}-${self:provider.stage}-data
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  dynamodb:
    start:
      port: 8000
      inMemory: true
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  appSync:
    name:  ai-forms-backend-${self:provider.stage}
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    # if AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId:
        Ref: CognitoUserPool
    # logConfig:
    #   loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
    #   level: ALL # Logging Level: NONE | ERROR | ALL
    mappingTemplatesLocation: src/mapping-templates
    mappingTemplates:
      - dataSource: ${self:custom.TBL_MASTER_DATA}
        type: Query
        field: getAccount
        request: getAccount-request.vtl
        response: getAccount-response.vtl
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ${self:custom.TBL_MASTER_DATA}
        description: Master Table
        config:
          tableName: ${self:custom.TBL_MASTER_DATA} # Where MasterDataTable is a dynamodb table defined in Resources
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:${self:custom.TBL_MASTER_DATA}"
                - "arn:aws:dynamodb:${self:provider.region}:*:${self:custom.TBL_MASTER_DATA}/*"

