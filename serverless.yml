#serverless.yml
service: formsli

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}
  functions:
    postconfirmation: ${self:service}-postconfirmation
    invite: ${self:service}-invite
  profile: fl-infrastructure-${self:provider.stage}
  environment:
    protocol: ${opt:protocol, 'http://'}
    domain: ${opt:domain, 'dev-app.forms.li'}
    urlPrefix: ${opt:urlPrefix, '${self:provider.environment.protocol}${self:provider.environment.domain}'}
    region: ${self:provider.region}
    environment: ${self:provider.stage}
    serviceName: ${self:service}
    databaseName: ${self:service}
    dbClusterId: "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:formsli-${self:provider.stage}"
    dbClusterSecretArn: ${ssm:/app/formsli/dev/db/credentialsArn}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource:
        - "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:/app/formsli/${self:provider.stage}/db/*"
    - Effect: "Allow"
      Action:
        - "rds-data:InsertItems"
        - "rds-data:GetItems"
        - "rds-data:UpdateItems"
        - "rds-data:DeleteItems"
        - "rds-data:ExecuteSql"
        - "rds-data:BatchExecuteStatement"
        - "rds-data:BeginTransaction"
        - "rds-data:CommitTransaction"
        - "rds-data:ExecuteStatement"
        - "rds-data:RollbackTransaction"
      Resource:
        - "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:formsli-${self:provider.stage}"
        - "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:formsli-${self:provider.stage}:*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminRemoveUserFromGroup
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminCreateUser
      Resource: "arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-east-1:*:*"

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-appsync-plugin
  - '@anttiviljami/serverless-stack-output'
  - serverless-appsync-offline
  - serverless-offline

resources:
  - ${file(resources/iam.yml)}
  - ${file(resources/s3.yml)}
  - ${file(resources/cognito.userpool.yml)}
  - ${file(resources/cognito.identitypool.yml)}
  - ${file(resources/apig.auth.yml)}

custom:
  # Stack Output Plugin
  output:
    file: outputs/stack.${self:provider.stage}.json # toml, yaml, yml, and json format is available
  # Servlerless Webpack (for functions)
  packagePath: './package.json'
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'npm'   # Packager that will be used to package your external modules
    includeModules:
      forceInclude:
        - source-map-support
  bucket: ${self:service}-${self:provider.stage}-data
  appSync:
    name:  formsli-api-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId:
        Ref: CognitoUserPoolMyUserPool
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncCloudWatchRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL
    schema: schema.graphql
    dataSources:
      - type: RELATIONAL_DATABASE
        name: AppData
        description: RDS source for formsli
        config:
          # The identifier for RDSCluster. Where RDSCluster is the cluster defined in Resources
          dbClusterIdentifier: ${self:provider.environment.dbClusterId}
          # The RDSClusterSecret ARN. Where RDSClusterSecret is the cluster secret defined in Resources
          awsSecretStoreArn: ${self:provider.environment.dbClusterSecretArn}
          databaseName: ${self:service}
          serviceRoleArn: { Fn::GetAtt: [AppSyncRDSRole, Arn] }
          region: ${self:provider.region}
    mappingTemplatesLocation: src/mapping-templates
    mappingTemplates: ${file(serverless.appsync-mappings.yml)}
    functionConfigurations: ${file(serverless.appsync-functions.yml)}
    ## Add substitutions here to replace all hardcoded table/index names in mapping templates
    substitutions:

functions:
  postConfirmation:
    name: ${self:provider.functions.postconfirmation}
    handler: src/postconfirmation.handle
    events:
      - http:
          path: /postconfirm
          method: post
          cors: true
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PostConfirmation
  signup:
    name: ${self:provider.functions.invite}
    handler: src/invite.handle
    events:
      - http:
          path: /invite
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MyApiGatewayAuthorizer
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group