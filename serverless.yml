#serverless.yml
service: forms-li

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  functions:
    postconfirmation: ${self:service}-postconfirmation
    invite: ${self:service}-invite
  profile: default
  environment:
    protocol: ${opt:protocol, 'http://'}
    domain: ${opt:domain, 'dev-app.forms.li'}
    urlPrefix: ${opt:urlPrefix, '${self:provider.environment.protocol}${self:provider.environment.domain}'}
    region: ${self:provider.region}
    environment: ${self:provider.stage}
    serviceName: formsli
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-east-1:*:*"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminRemoveUserFromGroup
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminCreateUser
      Resource: "arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/*"

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - aws-cognito-idp-userpool-domain
  - serverless-iam-roles-per-function
#   - serverless-appsync-plugin
  - serverless-dynamodb-local
  - '@anttiviljami/serverless-stack-output'
#   - serverless-appsync-offline
  - serverless-offline

resources:
#   - ${file(resources/iam.yml)}
#   - ${file(resources/dynamodb.yml)}
  - ${file(resources/s3.yml)}
  - ${file(resources/cognito.userpool.yml)}
  - ${file(resources/cognito.identitypool.yml)}
  - ${file(resources/apig.auth.yml)}

custom:
  # Stack Output Plugin
  output:
    file: outputs/stack.json # toml, yaml, yml, and json format is available
  # Servlerless Webpack (for functions)
  packagePath: './package.json'
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'npm'   # Packager that will be used to package your external modules
    includeModules:
      forceInclude:
        - source-map-support
#   bucket: ${self:provider.stage}-${self:service}-data
#   dynamodb:
#     start:
#       port: 8000
#       inMemory: true
#   appsync-offline:
#     port: 62222
#     dynamodb:
#       client:
#         endpoint: "http://localhost:8000"
#         region: localhost
#   appSync:
#     name:  ${self:provider.stage}${self:service}
#     # apiKey # only required for update-appsync/delete-appsync
#     authenticationType: AMAZON_COGNITO_USER_POOLS
#     # if AMAZON_COGNITO_USER_POOLS
#     serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBRole, Arn] }
#     userPoolConfig:
#       awsRegion: ${self:provider.region}
#       defaultAction: ALLOW
#       userPoolId:
#         Ref: CognitoUserPoolMyUserPool
#     logConfig:
#       loggingRoleArn: { Fn::GetAtt: [AppSyncCloudWatchRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
#       level: ALL
#     schema: schema.graphql
#     dataSources:
#       - type: AMAZON_DYNAMODB
#         name: FormVersion
#         description: FormVersions
#         config:
#           tableName: "${self:provider.environment.table_prefix}form_versions"
#       - type: AMAZON_DYNAMODB
#         name: FormEntries
#         description: FormEntries Table
#         config:
#           tableName: "${self:provider.environment.table_prefix}form_entries"
#       - type: AMAZON_DYNAMODB
#         name: Form
#         description: Forms Table
#         config:
#           tableName: "${self:provider.environment.table_prefix}form"
#       - type: AMAZON_DYNAMODB
#         name: Form
#         description: Forms Table
#         config:
#           tableName: "${self:provider.environment.table_prefix}form"
#     mappingTemplatesLocation: src/mapping-templates
#     mappingTemplates: ${file(serverless.appsync-mappings.yml)}
functions:
  postConfirmation:
    name: ${self:provider.functions.postconfirmation}
    handler: src/postconfirmation.handle
    events:
      - http:
          path: /postconfirm
          method: post
          cors: true
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PostConfirmation
  signup:
    name: ${self:provider.functions.invite}
    handler: src/invite.handle
    events:
      - http:
          path: /invite
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MyApiGatewayAuthorizer
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group