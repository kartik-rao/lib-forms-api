#serverless.yml
service: formsli
frameworkVersion: '>=1.5.0 <2.0.0'
provider:
  name: aws
  runtime: nodejs10.x
  tracing: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}
  memorySize: 2048
  timeout: 30
  logRetentionInDays: 14
  tags:
    service: ${self:service}
    region: ${self:provider.region}
  functions:
    postconfirmation: ${self:service}-${self:provider.stage}-postconfirmation
    invite        : ${self:service}-${self:provider.stage}-invite
    formentry     : ${self:service}-${self:provider.stage}-form-entry
    formjson      : ${self:service}-${self:provider.stage}-form-json
    formview      : ${self:service}-${self:provider.stage}-form-view
    authftp       : ${self:service}-${self:provider.stage}-auth-ftp
    processEntries: ${self:service}-${self:provider.stage}-form-process-entries
    createEntryStream : ${self:service}-${self:provider.stage}-form-create-stream
  profile: fl-infrastructure
  environment:
    region         : ${self:provider.region}
    hostedZoneId   : Z3CMAQR65ETWUL
    rootDomain     : ${opt:domain, 'forms.li'}
    appDomain      : "app.${self:provider.environment.rootDomain}"
    apiDomain      : "api.${self:provider.environment.rootDomain}"
    staticDomain   : "static.${self:provider.environment.rootDomain}"
    sftpDomain     : "sftp.${self:provider.environment.rootDomain}"
    environment    : ${self:provider.stage}
    serviceName    : ${self:service}
    databaseName   : ${self:service}
    userPoolId     : ${ssm:/${self:provider.stage}/formsli/cognito/userpool/id}
    userPoolArn    : ${ssm:/${self:provider.stage}/formsli/cognito/userpool/arn}
    userPoolClientId: ${ssm:/${self:provider.stage}/formsli/cognito/userpool/clientId}
    userPoolAdminClientId: ${ssm:/${self:provider.stage}/formsli/cognito/userpool/adminClientId}
    dbClusterId    : ${ssm:/${self:provider.stage}/formsli/rds/id}
    dbClusterArn   : "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:${self:provider.environment.dbClusterId}"
    dbClusterSecretArn : ${ssm:/${self:provider.stage}/formsli/rds/password/secret}
    s3_user_bucket     : ${ssm:/${self:provider.stage}/formsli/s3/buckets/user/id}
    s3_app_bucket      : ${ssm:/${self:provider.stage}/formsli/s3/buckets/app/id}
    sqs_entry          : ${self:service}-${self:provider.stage}-entry-queue
    sqs_integration    : ${self:service}-${self:provider.stage}-integration-queue
    sqs_entry_url      :
      Ref: EntryQueue
    sqs_integration_url:
      Ref: IntegrationQueue
    sftp_server_id     : { Fn::GetAtt: [SftpServer, ServerId] }
    sftp_server_arn    : { Fn::GetAtt: [SftpServer, Arn] }
    sftp_role_arn      : { Fn::GetAtt: [SftpUserRole, Arn] }
    kinesisAccessRole  : { Fn::GetAtt: [KinesisAccessRole, Arn] }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "tag:GetResources"
        - "secretsmanager:CreateSecret"
        - "secretsmanager:ListSecrets"
        - "secretsmanager:GetRandomPassword"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "xray:PutTelemetryRecords"
        - "xray:PutTraceSegments"
      Resource:
        - "*"

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-domain-manager
  - serverless-appsync-plugin
  - '@anttiviljami/serverless-stack-output'
  - serverless-offline

resources:
  - ${file(resources/iam.yml)}
  - ${file(resources/apig.auth.yml)}
  - ${file(resources/sqs.yml)}
  - ${file(resources/sftp.yml)}

custom:
  serverless-iam-roles-per-function:
    defaultInherit: true
  customDomain:
    DependsOn: ApiGatewayApiKey1
    domainName: ${self:provider.stage}-${self:provider.environment.apiDomain}
    certificateName: "*.forms.li"
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
  # Stack Output Plugin
  output:
    file: outputs/stack.${self:provider.stage}.json # toml, yaml, yml, and json format is available
  # Servlerless Webpack (for functions)
  packagePath: './package.json'
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'npm'   # Packager that will be used to package your external modules
    includeModules:
      forceInclude:
        - source-map-support
  appSync:
    name:  formsli-api-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: "${self:provider.environment.userPoolId}"
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncCloudWatchRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL
    schema: schema.graphql
    dataSources:
      - type: RELATIONAL_DATABASE
        name: AppData
        description: RDS source for formsli
        config:
          # The identifier for RDSCluster. Where RDSCluster is the cluster defined in Resources
          dbClusterIdentifier: ${self:provider.environment.dbClusterId}
          # The RDSClusterSecret ARN. Where RDSClusterSecret is the cluster secret defined in Resources
          awsSecretStoreArn: ${self:provider.environment.dbClusterSecretArn}
          databaseName: ${self:service}
          serviceRoleArn: { Fn::GetAtt: [AppSyncRDSRole, Arn] }
          region: ${self:provider.region}
    mappingTemplatesLocation: src/mapping-templates
    mappingTemplates: ${file(serverless.appsync-mappings.yml)}
    functionConfigurations: ${file(serverless.appsync-functions.yml)}
    ## Add substitutions here to replace all hardcoded table/index names in mapping templates
    substitutions:

functions:
  processEntries:
    name: ${self:provider.functions.processEntries}
    handler: src/processentries.handle
    reservedConcurrency: 10
    events:
      - sqs: 
          arn:
            Fn::GetAtt:
              - EntryQueue
              - Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:RecieveMessage
          - sqs:SendMessage
          - sqs:ListQueues
        Resource : 
          - { Fn::GetAtt: [EntryQueue, Arn] }
      - Effect: Allow
        Action:
          - firehose:putRecord
          - firehose:putRecordBatch
        Resource : 
          - "*"
      - Effect: "Allow"
        Action:
          - "iam:passRole"
          - "iam:getRole"
        Resource:
          - { Fn::GetAtt: [KinesisAccessRole, Arn] }
  createEntryStream :
    name: ${self:provider.functions.createEntryStream}
    handler: src/createstream.handle
    events:
      - http:
          path  : /stream/{formId}
          method: PUT
          cors  : true
          parameters:
            querystrings:
              tenantId: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MyApiGatewayAuthorizer
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: Allow
        Action:
          - firehose:listDeliveryStreams
          - firehose:createDeliveryStream
          - firehose:describeDeliveryStream
        Resource : 
          - "*"
      - Effect: "Allow"
        Action:
          - "rds-data:BeginTransaction"
          - "rds-data:CommitTransaction"
          - "rds-data:ExecuteStatement"
          - "rds-data:RollbackTransaction"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"
  ftpAuth :
    name: ${self:provider.functions.authftp}
    handler: src/authftp.handle
    events:
      - http:
          path  : /servers/{serverId}/users/{username}/config
          method: get
          cors  : true
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminInitiateAuth
        Resource: "${self:provider.environment.userPoolArn}"
  formJson:
    name: ${self:provider.functions.formjson}
    handler: src/form.handle
    events:
      - http:
          path: /form/json/{formId}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: "Allow"
        Action:
          - "rds-data:GetItems"
          - "rds-data:ExecuteSql"
          - "rds-data:BatchExecuteStatement"
          - "rds-data:ExecuteStatement"
  formEntry:
    name: ${self:provider.functions.formentry}
    handler: src/formentry.handle
    events:
      - http:
          path: /form/entry/{tenantId}/{formId}
          method: post
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - sqs:SendMessage
          - sqs:ListQueues
        Resource : 
          - { Fn::GetAtt: [EntryQueue, Arn] }
  formView:
    name: ${self:provider.functions.formview}
    handler: src/formview.handle
    events:
      - http:
          path: /form/view/{formId}
          method: get
          cors: true
  postConfirmation:
    name: ${self:provider.functions.postconfirmation}
    handler: src/postconfirmation.handle
    events:
      - http:
          path: /postconfirm
          method: post
          cors: true
      - cognitoUserPool:
          pool: fl-${self:provider.stage}-userpool
          trigger: PostConfirmation
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: "Allow"
        Action:
          - "rds-data:BatchExecuteStatement"
          - "rds-data:BeginTransaction"
          - "rds-data:CommitTransaction"
          - "rds-data:ExecuteStatement"
          - "rds-data:RollbackTransaction"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminUpdateUserAttributes
          - cognito-idp:AdminGetUser
        Resource: "${self:provider.environment.userPoolArn}"
  signup:
    name: ${self:provider.functions.invite}
    handler: src/invite.handle
    events:
      - http:
          path: /invite
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MyApiGatewayAuthorizer
            claims:
              - email
              - username
              - custom:tenantId
              - custom:group
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "secretsmanager:GetSecretValue"
        Resource:
          - "arn:aws:secretsmanager:ap-northeast-1:#{AWS::AccountId}:secret:/${self:provider.stage}/formsli/rds/*"
      - Effect: "Allow"
        Action:
          - "rds-data:ExecuteStatement"
        Resource:
          - "${self:provider.environment.dbClusterArn}"
          - "${self:provider.environment.dbClusterArn}:*"
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminGetUser
        Resource: "${self:provider.environment.userPoolArn}"