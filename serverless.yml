#serverless.yml
service: formsgraphql

provider:
  name: aws
  runtime: nodejs8.10
  accountId: 523242459359
  stage: ${opt:stage, 'dev'}
  region: ${opt:stage, 'ap-southeast-2'}
  serviceName: ${self:provider.stage}-${self:service}
  functions:
    postconfirmation: ${self:provider.serviceName}-postconfirmation
    signup: ${self:provider.serviceName}-signup
  profile: default
  environment:
    serviceName: ${self:provider.stage}-${self:service}
    TBL_FORM_ENTRY: table_${self:service}_${self:provider.stage}_entries
    TBL_MASTER_DATA: table_${self:service}_${self:provider.stage}_masterdata
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TBL_MASTER_DATA}"
    - Effect: Allow
      Action:
        - cognito-idp:SignUp
        - cognito-idp:AddCustomAttributes
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminRemoveUserFromGroup
        - cognito-idp:AdminGetUser
        - cognito-idp:GetUser
      Resource:
        - Fn::Join:
          - ':'
          -
            - arn:aws:cognito-idp
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - userpool/*

plugins:
  - serverless-webpack
  - serverless-cognito-add-custom-attributes
  - serverless-iam-roles-per-function
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-offline
  - serverless-offline

resources:
  - ${file(resources/iam.yml)}
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/cognito.userpool.yml)}
  - ${file(resources/s3.yml)}

custom:
  # enable auto including modules
  packagePath: './package.json'
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'npm'   # Packager that will be used to package your external modules
    includeModules:
      forceInclude:
        - source-map-support
  CognitoAddCustomAttributes:
    CognitoUserPoolIdOutputKey: "UserPoolId"              # The key of the outputted UserPool Ref
    CognitoUserPoolClientIdOutputKey: "UserPoolClientId"  # The key of the outputted UserPoolClient Ref
    CustomAttributes:
      -
        AttributeDataType: String
        DeveloperOnlyAttribute: False
        Mutable: True
        Name: "tenant" # this will end up being custom:another
        Required: False
  TBL_MASTER_DATA: ${self:provider.environment.TBL_MASTER_DATA}
  TBL_FORM_ENTRY: ${self:provider.environment.TBL_FORM_ENTRY}
  bucket: ${self:service}-${self:provider.stage}-data
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  dynamodb:
    start:
      port: 8000
      inMemory: true
  appSync:
    name:  ai-forms-backend-${self:provider.stage}
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    # if AMAZON_COGNITO_USER_POOLS
    serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBRole, Arn] }
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId:
        Ref: CognitoUserPoolMyUserPool
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncCloudWatchRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL
    mappingTemplatesLocation: src/mapping-templates
    mappingTemplates:
      - dataSource: MasterData
        type: Query
        field: getAccount
        request: getAccount-request.vtl
        response: getAccount-response.vtl
      - dataSource: MasterData
        type: Query
        field: listAllAccounts
        request: listAllAccounts-request.vtl
        response: listAllAccounts-response.vtl
      - dataSource: MasterData
        type: Query
        field: getPlan
        request: getPlan-request.vtl
        response: getPlan-response.vtl
      - dataSource: MasterData
        type: Query
        field: getPlanType
        request: getPlanType-request.vtl
        response: getPlanType-response.vtl
      - dataSource: MasterData
        type: Mutation
        field: addAccount
        request: addAccount-request.vtl
        response: addAccount-response.vtl
      - dataSource: MasterData
        type: Mutation
        field: addPlanType
        request: addPlanType-request.vtl
        response: addPlanType-response.vtl
      - dataSource: MasterData
        type: Mutation
        field: addPlan
        request: addPlan-request.vtl
        response: addPlan-response.vtl
      - dataSource:  MasterData
        type: Mutation
        field: testPipeline
        request: authorize-request.vtl
        response: authorize-response.vtl
        kind: PIPELINE
        functions:
          - authorizeFunction
      - dataSource: MasterData
        type: Mutation
        field: attachPlan
        request: createAccountPlan-before.vtl
        response: createAccountPlan-after.vtl
        kind: PIPELINE
        functions:
          - addPlan
          - updateAccount
    functionConfigurations:
      - dataSource: MasterData
        name: authorizeFunction
        request: fetchUserAccount-request.vtl
        response: fetchUserAccount-response.vtl
      - dataSource: MasterData
        name: addPlan
        request: addPlan-request.vtl
        response: addPlan-response.vtl
      - dataSource: MasterData
        name: updateAccount
        request: updateAccountPlan-request.vtl
        response: updateAccountPlan-response.vtl
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: MasterData
        description: Master Table
        config:
          tableName: ${self:custom.TBL_MASTER_DATA} # Where MasterDataTable is a dynamodb table defined in Resources
functions:
  signup:
    name: ${self:provider.functions.signup}
    handler: src/signup.handle
    events:
      - http:
          path: /signup
          method: post
          cors: true
    environment:
      cognitoUserPoolId:
        Ref: CognitoUserPoolMyUserPool
      cognitoUserPoolWebClientId:
        Ref: CognitoUserPoolClient
  postConfirmation:
    name: ${self:provider.functions.postconfirmation}
    handler: src/postconfirmation.handle
    events:
      - http:
          path: /postconfirm
          method: post
          cors: true
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PostConfirmation