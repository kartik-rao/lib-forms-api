{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "PostConfirmationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/formsli-postconfirmation"
      }
    },
    "SignupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/formsli-invite"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "formsli",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-dev*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-postconfirmation:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-invite:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-dev*:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-postconfirmation:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-invite:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/app/formsli/dev/db/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds-data:InsertItems",
                    "rds-data:GetItems",
                    "rds-data:UpdateItems",
                    "rds-data:DeleteItems",
                    "rds-data:ExecuteSql",
                    "rds-data:BatchExecuteStatement",
                    "rds-data:BeginTransaction",
                    "rds-data:CommitTransaction",
                    "rds-data:ExecuteStatement",
                    "rds-data:RollbackTransaction"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:formsli-dev"
                    },
                    {
                      "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:formsli-dev:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminAddUserToGroup",
                    "cognito-idp:AdminUpdateUserAttributes",
                    "cognito-idp:AdminRemoveUserFromGroup",
                    "cognito-idp:AdminGetUser",
                    "cognito-idp:AdminCreateUser"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": "arn:aws:ses:us-east-1:*:*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "formsli",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "PostConfirmationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/formsli/dev/1565842748436-2019-08-15T04:19:08.436Z/formsli.zip"
        },
        "FunctionName": "formsli-postconfirmation",
        "Handler": "src/postconfirmation.handle",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "protocol": "http://",
            "domain": "dev-app.forms.li",
            "urlPrefix": "http://dev-app.forms.li",
            "region": "ap-northeast-1",
            "environment": "dev",
            "serviceName": "formsli",
            "dbClusterArn": {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:formsli-dev"
            },
            "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:644527192227:secret:/app/formsli/dev/db/credentials-obdDgQ"
          }
        }
      },
      "DependsOn": [
        "PostConfirmationLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PostConfirmationLambdaVersionQUAQVOjVdXSrsHLm5YCsHUpB4m2IUn8jxIbibaAnk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostConfirmationLambdaFunction"
        },
        "CodeSha256": "9EtWODRiXSlTHuyqwMldCjREZWz4Y4Ka374HZVpeX+c="
      }
    },
    "SignupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/formsli/dev/1565842748436-2019-08-15T04:19:08.436Z/formsli.zip"
        },
        "FunctionName": "formsli-invite",
        "Handler": "src/invite.handle",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "protocol": "http://",
            "domain": "dev-app.forms.li",
            "urlPrefix": "http://dev-app.forms.li",
            "region": "ap-northeast-1",
            "environment": "dev",
            "serviceName": "formsli",
            "dbClusterArn": {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:formsli-dev"
            },
            "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:644527192227:secret:/app/formsli/dev/db/credentials-obdDgQ"
          }
        }
      },
      "DependsOn": [
        "SignupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SignupLambdaVersionfGR192V3v11KEYz5TfyAeJcTT0bgkBfzIsNkyrSTc4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignupLambdaFunction"
        },
        "CodeSha256": "9EtWODRiXSlTHuyqwMldCjREZWz4Y4Ka374HZVpeX+c="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-formsli",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourcePostconfirm": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "postconfirm",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceInvite": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "invite",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPostconfirmOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostconfirm"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodInviteOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceInvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPostconfirmPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostconfirm"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PostConfirmationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodInvitePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceInvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1565842726650": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodPostconfirmOptions",
        "ApiGatewayMethodInviteOptions",
        "ApiGatewayMethodPostconfirmPost",
        "ApiGatewayMethodInvitePost"
      ]
    },
    "PostConfirmationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostConfirmationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CognitoUserPoolMyUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "dev-formsli",
        "LambdaConfig": {
          "PostConfirmation": {
            "Fn::GetAtt": [
              "PostConfirmationLambdaFunction",
              "Arn"
            ]
          }
        },
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "EmailVerificationSubject": "Your Forms.li verification code",
        "EmailVerificationMessage": "{####}",
        "EmailConfiguration": {
          "SourceArn": {
            "Fn::Sub": "arn:aws:ses:us-east-1:${AWS::AccountId}:identity/no-reply@forms.li"
          }
        },
        "AdminCreateUserConfig": {
          "InviteMessageTemplate": {
            "EmailSubject": "Welcome to Forms.li",
            "EmailMessage": "Your username is {username} and temporary password is {####}"
          }
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "tenantId",
            "Required": false
          },
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "tenantName",
            "Required": false
          },
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "source",
            "Required": false
          },
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "group",
            "Required": false
          },
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "environment",
            "Required": false
          },
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "stack",
            "Required": false
          },
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "region",
            "Required": false
          }
        ]
      },
      "DependsOn": [
        "PostConfirmationLambdaFunction"
      ]
    },
    "PostConfirmationLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePostConfirmation": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostConfirmationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolMyUserPool",
            "Arn"
          ]
        }
      }
    },
    "AppSyncRDSRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "formsli-ap-northeast-1-appsync-iam-role",
        "ManagedPolicyArns": [
          {
            "Ref": "AppSyncRDSPolicy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "AppSyncRDSPolicy"
      ]
    },
    "AppSyncRDSPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allow AWS AppSync to access RDS.",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "rds-data:InsertItems",
                "rds-data:GetItems",
                "rds-data:UpdateItems",
                "rds-data:DeleteItems",
                "rds-data:ExecuteSql",
                "rds-data:BatchExecuteStatement",
                "rds-data:BeginTransaction",
                "rds-data:CommitTransaction",
                "rds-data:ExecuteStatement",
                "rds-data:RollbackTransaction",
                "tag:GetResources"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:formsli-dev"
                },
                {
                  "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:formsli-dev:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:ListSecrets",
                "secretsmanager:GetRandomPassword"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/app/formsli/dev/db/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "tag:GetResources",
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "AppSyncCloudWatchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "formsli-ap-northeast-1-appsync-logging-iam-role",
        "ManagedPolicyArns": [
          {
            "Ref": "AppSyncCloudWatchPolicy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "AppSyncCloudWatchPolicy"
      ]
    },
    "AppSyncCloudWatchPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allow AWS AppSync to write logs",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "AttachmentsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "formsli-dev-data",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "formsli-userpoolclient",
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        },
        "ExplicitAuthFlows": [
          "USER_PASSWORD_AUTH"
        ],
        "GenerateSecret": false,
        "ReadAttributes": [
          "email",
          "given_name",
          "family_name",
          "website",
          "email_verified",
          "email",
          "profile",
          "phone_number",
          "phone_number_verified",
          "custom:tenantId",
          "custom:tenantName",
          "custom:source",
          "custom:environment",
          "custom:stack",
          "custom:region",
          "custom:group"
        ],
        "WriteAttributes": [
          "email",
          "given_name",
          "family_name",
          "phone_number",
          "address",
          "website",
          "profile",
          "locale",
          "custom:group",
          "custom:tenantName",
          "custom:source"
        ]
      }
    },
    "CognitoUserPoolAdminClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "formsli-userpooladminclient",
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        },
        "ExplicitAuthFlows": [
          "ADMIN_NO_SRP_AUTH"
        ],
        "GenerateSecret": false,
        "ReadAttributes": [
          "email",
          "given_name",
          "family_name",
          "website",
          "email_verified",
          "email",
          "profile",
          "phone_number",
          "phone_number_verified",
          "custom:tenantId",
          "custom:tenantName",
          "custom:source",
          "custom:group",
          "custom:environment",
          "custom:stack",
          "custom:region"
        ],
        "WriteAttributes": [
          "custom:tenantId",
          "custom:tenantName",
          "custom:source",
          "custom:environment",
          "custom:stack",
          "custom:region",
          "custom:group"
        ]
      }
    },
    "CognitoAppAdminGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "Application Admin",
        "GroupName": "Admin",
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        }
      }
    },
    "CognitoAccountAdminGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "Account admin",
        "GroupName": "AccountAdmin",
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        }
      }
    },
    "CognitoAccountEditorGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "Account editor user",
        "GroupName": "Editor",
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        }
      }
    },
    "CognitoAccountViewerGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "Account read only user",
        "GroupName": "Viewer",
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        }
      }
    },
    "CognitoUserPoolAdminUser": {
      "Type": "AWS::Cognito::UserPoolUser",
      "Properties": {
        "Username": "infrastructure.dev@forms.li",
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        },
        "DesiredDeliveryMediums": [
          "EMAIL"
        ],
        "UserAttributes": [
          {
            "Name": "email",
            "Value": "infrastructure.dev@forms.li"
          },
          {
            "Name": "given_name",
            "Value": "dev Infrastructure"
          },
          {
            "Name": "family_name",
            "Value": "Admin"
          },
          {
            "Name": "email_verified",
            "Value": true
          },
          {
            "Name": "custom:group",
            "Value": "Admin"
          },
          {
            "Name": "custom:region",
            "Value": "ap-northeast-1"
          },
          {
            "Name": "custom:environment",
            "Value": "dev"
          }
        ]
      }
    },
    "CognitoIdentityPoolMyIdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": "formsgraphqlidentitypool",
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "CognitoUserPoolClient"
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "CognitoUserPoolMyUserPool",
                "ProviderName"
              ]
            }
          }
        ]
      }
    },
    "CognitoIdentityPoolRoles": {
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
      "Properties": {
        "IdentityPoolId": {
          "Ref": "CognitoIdentityPoolMyIdentityPool"
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "CognitoAuthRole",
              "Arn"
            ]
          },
          "unauthenticated": {
            "Fn::GetAtt": [
              "CognitoUnAuthorizedRole",
              "Arn"
            ]
          }
        }
      }
    },
    "CognitoUnAuthorizedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "CognitoIdentityPoolMyIdentityPool"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "unauthenticated"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CognitoUnauthorizedPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "mobileanalytics:PutEvents",
                    "cognito-sync:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CognitoAuthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "CognitoIdentityPoolMyIdentityPool"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "formsli-authorized",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "mobileanalytics:PutEvents",
                    "cognito-sync:*",
                    "cognito-identity:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "AttachmentsBucket",
                              "Arn"
                            ]
                          },
                          "/private/",
                          "$",
                          "{cognito-identity.amazonaws.com:sub}/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MyApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 10,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "MyCognitoAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:cognito-idp:",
                {
                  "Fn::Sub": "${AWS::Region}"
                },
                ":",
                {
                  "Fn::Sub": "${AWS::AccountId}"
                },
                ":userpool/",
                {
                  "Ref": "CognitoUserPoolMyUserPool"
                }
              ]
            ]
          }
        ]
      }
    },
    "GraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "formsli-api-dev",
        "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
        "AdditionalAuthenticationProviders": [],
        "UserPoolConfig": {
          "AwsRegion": "ap-northeast-1",
          "UserPoolId": {
            "Ref": "CognitoUserPoolMyUserPool"
          },
          "DefaultAction": "ALLOW"
        },
        "LogConfig": {
          "CloudWatchLogsRoleArn": {
            "Fn::GetAtt": [
              "AppSyncCloudWatchRole",
              "Arn"
            ]
          },
          "FieldLogLevel": "ALL"
        }
      }
    },
    "GraphQlApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "/",
            [
              "/aws/appsync/apis",
              {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              }
            ]
          ]
        }
      }
    },
    "GraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "input TableDateFilterInput {\n    ne: AWSDateTime\n    eq: AWSDateTime\n    le: AWSDateTime\n    lt: AWSDateTime\n    ge: AWSDateTime\n    gt: AWSDateTime\n    between: [AWSDateTime]\n}\n\ninput TableBooleanFilterInput {\n    ne: Boolean\n    eq: Boolean\n}\n\ninput TableFloatFilterInput {\n    ne: Float\n    eq: Float\n    le: Float\n    lt: Float\n    ge: Float\n    gt: Float\n    between: [Float]\n}\n\ninput TableIntFilterInput {\n    ne: Int\n    eq: Int\n    le: Int\n    lt: Int\n    ge: Int\n    gt: Int\n    between: [Int]\n}\n\ninput TableStringFilterInput {\n    ne: String\n    eq: String\n    le: String\n    lt: String\n    ge: String\n    gt: String\n    contains: String\n    notContains: String\n    between: [String]\n    beginsWith: String\n}\n\ntype AppData @model {\n    id: ID!\n    type: ID!\n    meta: String!\n    itemType: String!\n    owner: ID!\n    createdAt: AWSDateTime!\n    updatedAt: AWSDateTime\n    isDeleted: Int\n    version: Int\n    searchField: String\n}\n\ntype FormEntry @model {\n    id: ID!\n    type: ID!\n    meta: String!\n    createdAt: AWSDateTime!\n}\n\ninput AddFormEntryInput {\n  data: AWSJSON!\n}\n\n\ntype FormVersion {\n  id: ID!\n  owner: ID!\n  ownedBy: User!\n  createdAt: AWSDateTime\n  notes: String\n  formData: AWSJSON\n}\n\ninput AddFormVersionInput {\n  formId: ID!\n  owner: ID!\n  notes: String\n  formData: AWSJSON!\n}\n\n\ntype Form @versioned  {\n    id: ID!\n    owner: ID!\n    name: String!\n    desc: String!\n    versionId: ID!\n    formData: FormVersion!\n    ownedBy: User!\n    accountId: ID!\n    account: Account!\n    createdAt: AWSDateTime!\n    updatedAt: AWSDateTime\n    startsAt: AWSDateTime\n    endsAt: AWSDateTime\n    isPaused: Boolean\n    versions(limit: Int): [FormVersion]\n    integrations(limit: Int): [Integration]\n    entries(limit: Int): [FormEntry]\n}\n\ninput FormFilterInput {\n    owner: TableIntFilterInput\n    name: TableStringFilterInput\n    createdAt: TableDateFilterInput\n    updatedAt: TableDateFilterInput\n    startsAt: TableDateFilterInput\n    endsAt: TableDateFilterInput\n}\n\ninput AddFormInput {\n  name: String!\n  desc: String\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ninput UpdateFormInput  {\n  id: ID!\n  currentVersionId: ID\n  name: String\n  desc: String\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ntype User @versioned {\n    id: ID!\n    owner: ID!\n    accountId: ID!\n    account: Account\n    email: String!\n    group: String!\n    given_name: String!\n    family_name: String!\n    phone_number: AWSPhone\n    createdAt: AWSDateTime\n    updatedAt: AWSDateTime\n    isDeleted: Int\n}\n\ninput UserFilterInput {\n    owner: TableIntFilterInput\n    email: TableStringFilterInput\n    given_name: TableStringFilterInput\n    family_name: TableStringFilterInput\n    createdAt: TableDateFilterInput\n    updatedAt: TableDateFilterInput\n    startsAt: TableDateFilterInput\n    endsAt: TableDateFilterInput\n}\n\ninput UpdateUserInputData {\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\ninput UpdateUserInput {\n  id: ID!\n  data: UpdateUserInputData!\n}\n\ninput AddUserInput {\n  email: String!\n  group: String!\n  accountId: ID\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\nenum AddressType {\n  BILLING\n  CONTACT\n}\n\ntype Address @versioned {\n  id: ID!\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\ninput AddressFilterInput {\n    owner: TableIntFilterInput\n    name: TableStringFilterInput\n    createdAt: TableDateFilterInput\n    updatedAt: TableDateFilterInput\n    startsAt: TableDateFilterInput\n    endsAt: TableDateFilterInput\n}\n\ntype AddAddressInput {\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\ntype Account @versioned {\n  id: ID!\n  name: String!\n  addresses(limit: Int): [Address]\n  website: String\n  taxId: String\n  owner: ID!\n  ownedBy: User!\n  plan : Plan\n  planId: ID\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  active: Int\n  users(limit: Int): [User]\n  forms(limit: Int): [Form]\n}\n\ninput AccountFilterInput {\n    name: TableStringFilterInput\n    createdAt: TableDateFilterInput\n    updatedAt: TableDateFilterInput\n}\n\ninput UpdateAccountInput {\n  id: ID!\n  name: String\n  planId: ID\n}\n\ninput AddAccountInput {\n  name: String!\n}\n\ntype PlanType @versioned {\n  id: ID!\n  owner: ID!\n  ownedBy: User!\n  name: String!\n  cost: Float!\n  active: Int!\n  billingTerm: String!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  version: Int\n  isDeleted: Int\n}\n\ninput PlanTypeFilterInput {\n    name: TableStringFilterInput\n    cost: TableFloatFilterInput\n    active: TableBooleanFilterInput\n    billingTerm: TableStringFilterInput\n    createdAt: TableDateFilterInput\n    updatedAt: TableDateFilterInput\n}\n\ninput AddPlanTypeInput {\n  name: String!\n  cost: Float!\n  billingTerm: String!\n  active: Int!\n}\n\ninput UpdatePlanTypeInput {\n  id: ID!\n  name: String\n  cost: Float\n  billingTerm: String\n  active: Int\n}\n\ntype Plan @versioned {\n  id: ID!\n  accountId: ID!\n  account: Account!\n  owner: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  startDate: AWSDateTime!\n  endDate: AWSDateTime\n  active: Int\n  lastBillDate: AWSDateTime\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  planType: PlanType\n  isDeleted: Int\n  version: Int\n}\n\ninput PlanFilterInput {\n    id: TableIntFilterInput\n    accountId: TableIntFilterInput\n    active: TableBooleanFilterInput\n    startDate: TableDateFilterInput\n    endDate: TableDateFilterInput\n    lastBillDate: TableDateFilterInput\n    createdAt: TableDateFilterInput\n    updatedAt: TableDateFilterInput\n}\n\ninput AddPlanInput {\n  accountId: ID!\n  planTypeId: ID!\n  endDate: AWSDateTime\n  active: Int\n}\n\ninput UpdatePlanInput {\n  id: ID!\n  endDate: AWSDateTime\n  active: Int!\n}\n\ntype IntegrationType {\n  id: ID!\n  owner: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  planType: PlanType\n  name: String!\n  active: Int!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n}\n\ninput IntegrationTypeFilterInput {\n    id: TableIntFilterInput\n    planTypeId: TableIntFilterInput\n    active: TableBooleanFilterInput\n    name: TableStringFilterInput\n    createdAt: TableDateFilterInput\n    updatedAt: TableDateFilterInput\n}\n\ninput AddIntegrationTypeInput {\n  name: String!\n  active: Int\n}\n\ninput UpdateIntegrationTypeInput {\n  id: ID!\n  name: String!\n  active: Int\n}\n\ntype Integration @versioned {\n  id: ID!\n  integrationTypeId: ID!\n  integrationType: IntegrationType\n  owner: ID!\n  accountId: ID!\n  formId: ID!\n  form: Form!\n  active: Int!\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n  lastExecuted: AWSDateTime\n  lastExecutionResult: Boolean\n  lastExecutionResultMessage: String\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Int\n}\n\ninput IntegrationFilterInput {\n    id: TableIntFilterInput\n    integrationTypeId: TableIntFilterInput\n    accountId: TableIntFilterInput\n    formId: TableIntFilterInput\n    active: TableBooleanFilterInput\n    lastExecutionResult: TableBooleanFilterInput\n}\n\ninput AddIntegrationInput {\n  integrationTypeId: ID!\n  accountId: ID!\n  formId: ID!\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationTypeInputData {\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationInput {\n  id: ID!\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ntype Query {\n  getAccount(accountId: ID!): Account\n  getUser(userId: ID!): User\n  getPlan(planId: String!): Plan\n  getActiveAccountPlan(accountId: String!): Plan\n  getPlanType(planTypeId: String!): PlanType\n  getForm(formId: String!, versionId: ID!) : Form\n  getIntegrationType(integrationTypeId: String!): IntegrationType\n  getIntegration(integrationId: String!): Integration\n  getFormEntry(formEntryId: String!): FormEntry\n\n  listAccounts(limit: Int, filter: AccountFilterInput): [Account]\n  listUsers(limit: Int, filter: UserFilterInput) : [User]\n#   listAccountUsers(accountId: String!, limit: Int): [User]\n#   listAccountUsersActive(accountId: String!, limit: Int): [User]\n#   listAccountUsersInGroup(accountId: String!, group: String!, limit: Int): [User]\n\n  listPlans(limit: Int, filter: PlanFilterInput): [Plan]\n#   listAccountPlans(accountId: String!, limit: Int): [Plan]\n  listPlanTypes(limit: Int, filter: PlanTypeFilterInput): [PlanType]\n#   listActivePlanTypes(limit: Int): [PlanType]\n\n  listForms(limit: Int, filter: FormFilterInput) : [Form]\n#   listAccountForms(accountId: String!, limit: Int) : [Form]\n#   listAccountFormsActive(accountId: String!, active: String!, limit: Int) : [Form]\n#   listAccountFormsByUser(accountId: String!, userId: String!, limit: Int) : [Form]\n#   listAccountFormsByUserActive(accountId: String!, userId: String!, active: String!, limit: Int) : [Form]\n\n  listIntegrationTypes(limit: Int, filter: IntegrationTypeFilterInput): [IntegrationType]\n#   listIntegrationTypesByPlanType(planTypeId: String!, limit: Int): [IntegrationType]\n#   listIntegrationTypesByPlanTypeActive(planTypeId: String!, active: String!, limit: Int): [IntegrationType]\n\n  listIntegrations(limit: Int, filter: IntegrationFilterInput): [Integration]\n#   listAccountIntegrations(accountId: String!, limit: Int): [Integration]\n#   listAccountFormIntegrations(accountId: String!, formId: String!, limit: Int): [Integration]\n#   listAccountFormIntegrationsActive(accountId: String!, formId: String!, active: String!, limit: Int): [Integration]\n\n  listFormEntries(formId: String!) : [FormEntry]\n  listFormEntriesByTime(formId: String!, timestampPrefix: String!): [FormEntry]\n}\n\ntype Mutation {\n  addPlanType(input: AddPlanTypeInput): PlanType!\n  addPlan(input: AddPlanInput): Plan!\n  addAccount(input: AddAccountInput): Account!\n  addUser(input: AddUserInput): User!\n  addIntegrationType(input: AddIntegrationTypeInput): IntegrationType!\n  addIntegration(input: AddIntegrationInput): Integration!\n  addForm(form: AddFormInput!, notes: String!): Form!\n  addFormVersion(version: AddFormVersionInput): FormVersion!\n\n  updatePlanType(input: UpdatePlanTypeInput): PlanType!\n  updatePlan(input: UpdatePlanInput): Plan!\n  updateAccount(input: UpdateAccountInput): Account!\n  updateUser(input: UpdateUserInput): User!\n  updateIntegrationType(input: UpdateIntegrationTypeInput): IntegrationType!\n  updateIntegration(input: UpdateIntegrationInput): Integration!\n  updateForm(input: UpdateFormInput): Form!\n\n  deletePlanType(planTypeId: ID!): PlanType!\n  deletePlan(accountId: ID!, planId: ID!): Plan!\n  deleteAccount(accountId: ID!): Account!\n  deleteUser(userId: ID!): User!\n  deleteIntegrationType(integrationTypeId: ID!): IntegrationType!\n  deleteIntegration(integrationId: ID!): Integration!\n  deleteForm(formId: ID!): Form!\n\n  addFormEntry(input: AddFormEntryInput!): FormEntry!\n\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n",
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "GraphQlDsAppData": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "AppData",
        "Description": "RDS source for formsli",
        "Type": "RELATIONAL_DATABASE",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncRDSRole",
            "Arn"
          ]
        },
        "RelationalDatabaseConfig": {
          "RdsHttpEndpointConfig": {
            "AwsRegion": "ap-northeast-1",
            "DbClusterIdentifier": {
              "Fn::Join": [
                ":",
                [
                  "arn",
                  "aws",
                  "rds",
                  "ap-northeast-1",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "cluster",
                  "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:formsli-dev"
                ]
              ]
            },
            "DatabaseName": "formsli",
            "AwsSecretStoreArn": "arn:aws:secretsmanager:ap-northeast-1:644527192227:secret:/app/formsli/dev/db/credentials-obdDgQ"
          },
          "RelationalDatabaseSourceType": "RDS_HTTP_ENDPOINT"
        }
      }
    },
    "GraphQlFunctionConfigurationFNgetAccount": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetAccount",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"getAccount_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n\n#set($isAllowed = false)\n#if($identity.tenantId == $args.accountId || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Account WHERE id='${args.accountId}'\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Account[${args.accountId}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNlistAccounts": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNlistAccounts",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#if($identity.isAdmin == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'list'))\n    {\n        \"statements\": [\n            \"SELECT * FROM Account\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [${LIST}] on Account\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_LIST.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNlistUsers": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNlistUsers",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"listAllUsers_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#if($identity.isAdmin == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'User'))\n    $util.qr($ctx.stash.put(\"operation\", 'list'))\n    {\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM User WHERE active=1 AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM User\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute LIST on User\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_LIST.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdateAccount": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdateAccount",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "## Only allow admin and account admin to update account\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n#set($isAllowed = $identity.isAdmin == true || ($identity.isAccountAdmin == true && $args.accountId == $identity.tenantId))\n#set($results=$ctx.stash.results)\n\n#if($util.isNull($results) || $util.isNull($results.ACCOUNT))\n    $util.error(\"Out of order invocation, no ACCOUNT\", \"InvocationOrderException\")\n#end\n\n#if($isAllowed == true)\n    #if(!$util.isNull($ctx.stash.request))\n        #set ($ctx.stash.prevRequest = $ctx.stash.request)\n    #end\n\n    #set($request = $args)\n    $util.qr($request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"request\", $request))\n    $util.qr($ctx.stash.put(\"operation\", 'update'))\n    #return({})\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [${request.operation}] on [${args.accountId}]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_PUT.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetUser": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetUser",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"getUser_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n## Only allow admin and account admin to get other users\n#set($isAllowed = $identity.isAdmin == true || $identity.isAccountAdmin == true || $args.userId == $identity.callerId)\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.userId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'User'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM User WHERE id='${args.userId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM User WHERE id='${args.userId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on User[${args.userId}]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNdeletePlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNdeletePlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n#set($results=$ctx.stash.results)\n\n#set($isAllowed = false)\n#if($identity.isAdmin)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    $set($now=$util.time.nowISO8601())\n    {\n        \"statements\": [\n            \"SELECT * FROM PlanType WHERE id ='${args.planTypeId}'\",\n            \"UPDATE PlanType SET isDeleted=1, active=0, updatedAt='${now}' WHERE id='${args.planTypeId}'\",\n        ],\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on PlanType[${args.planTypeId}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_PUT.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdatePlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdatePlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($request = $args.input)\n\n    #if(!$util.isNull($ctx.stash.request))\n        #set ($ctx.stash.prevRequest = $ctx.stash.request)\n    #end\n    #set($request.expectedVersion = $results.PLANTYPE.version)\n    #set($request.itemType = \"PLANTYPE\")\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    $util.qr($ctx.stash.put(\"request\", $request))\n    #return({})\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [PlanType]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_PUT.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNaddPlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNaddPlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    #set($id = $util.autoId())\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO PlanType(id, `name`, cost, billingTerm, active, ownerId, isDeleted, createdAt) VALUES(:id, :name, :cost, :billingTerm, :active, :ownerId, :isDeleted, :createdAt)\",\n            \"SELECT * FROM PlanType WHERE id = :id\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${id}\",\n            \":name\": \"${args.name}\",\n            \":cost\": \"${args.cost}\",\n            \":billingTerm\": \"${args.billingTerm}\",\n            \":active\": $args.active,\n            \":ownerId\": \"${identity.callerId}\",\n            \":isDeleted\": 0,\n            \":createdAt\": \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Plantype]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_PUT.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetPlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetPlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n$util.qr($ctx.stash.put(\"request\", $args))\n$util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n$util.qr($ctx.stash.put(\"operation\", 'get'))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        #if(!$identity.isAdmin)\n            \"SELECT * FROM PlanType WHERE id='${args.planTypeId}' AND active=1 AND isDeleted=0\"\n        #else\n            \"SELECT * FROM PlanType WHERE id='${args.planTypeId}'\"\n        #end\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNlistPlanTypes": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNlistPlanTypes",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"listPlanTypes_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#if($identity.isAdmin == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'list'))\n    {\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM PlanType active=1\"\n            #else\n                \"SELECT * FROM PlanType\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [${LIST}] on PlanType\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_LIST.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNcreatePlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNcreatePlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if(($identity.isAccountAdmin == true && $identity.tenantId == $args.accountId) || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    #set($id = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO Plan(id, accountId, ownerId, planTypeId, startDate, active, createdAt) VALUES(:id, :accountId, :ownerId, :planTypeId, :startDate, :active, :createdAt)\",\n            \"SELECT * FROM Plan WHERE id='${id}'\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${id}\",\n            \":accountId\": \"${args.accountId}\",\n            \":ownerId\": \"${identity.callerId}\",\n            \":planTypeId\": \"${args.planTypeId}\",\n            \":startDate\": \"${now}\",\n            \":active\": $args.active,\n            \":createdAt\": \"${now}\"\n        }\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [Plan]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_PUT.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdatePlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdatePlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n#set($results=$ctx.stash.results)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($util.isNull($results) || $util.isNull($results.PLAN))\n    $util.error(\"Out of order invocation, no PLAN\", \"InvocationOrderException\")\n#end\n\n#if($isAllowed == true)\n    #if(!$util.isNull($ctx.stash.request))\n        #set ($ctx.stash.prevRequest = $ctx.stash.request)\n    #end\n    #set($request = $args.input)\n    #set($request.expectedVersion = $results.PLAN.version)\n    #set($request.itemType = \"PLAN\")\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    $util.qr($ctx.stash.put(\"request\", $request))\n    #return({})\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Plan]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_PUT.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNdeletePlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNdeletePlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n#set($results=$ctx.stash.results)\n\n#set($isAllowed = false)\n#if($identity.isAdmin || ($identity.isAccountAdmin == true && $identity.tenantId == $args.accountId))\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    $set($now=$util.time.nowISO8601())\n    {\n        \"statements\": [\n            \"SELECT * FROM Plan WHERE id ='${args.planId}'\",\n            \"UPDATE Plan SET isDeleted=1, active=0, endDate='${now}', updatedAt='${now}' WHERE id='${args.planId}' AND accountId='${args.accountId}'\",\n        ],\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on Plan[${args.planId}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_PUT.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetPlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetPlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"getPlan_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM Plan WHERE id='${args.planId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM Plan WHERE id='${args.planId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Plan[${args.planId}]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_common_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlResolverQuerygetUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getUser",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetUser",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerylistUsers": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listUsers",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNlistUsers",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetPlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getPlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetPlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationdeletePlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "deletePlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNdeletePlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddPlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addPlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNcreatePlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdatePlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updatePlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdatePlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetAccount": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getAccount",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetAccount",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdateAccount": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updateAccount",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdateAccount",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverAccountplan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "plan",
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n## Only allow admin and account admin to get other users\n#set($isAllowed = $identity.isAdmin == true || $identity.tenantId == $ctx.source.id)\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Plan WHERE accountId='${ctx.source.id}' and active=1\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Account.Plan[${ctx.source.id}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverPlanplanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Plan",
        "FieldName": "planType",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.planTypeId}\"},\n        \"type\": {\"S\": \"PLANTYPE\"}\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountownedBy": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "ownedBy",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.owner}\"},\n        \"type\": {\"S\": \"USER\"}\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountforms": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "forms",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2018-05-29\",\n    \"operation\": \"Query\",\n    \"index\"    : \"${index_appdata_gsi}\",\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"FORM\"},\n            \":meta\" : {\"S\" : \"${context.source.id}\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n    \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountusers": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "users",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2018-05-29\",\n    \"operation\": \"Query\",\n    \"index\"    : \"${index_appdata_gsi}\",\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"USER\"},\n            \":meta\" : {\"S\" : \"${context.source.id}\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n    \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetForm": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getForm",
        "RequestMappingTemplate": "{\n  \"version\" : \"2018-05-29\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.formId),\n    \"type\" : $util.dynamodb.toDynamoDBJson(\"FORM\")\n  }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverFormownedBy": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "ownedBy",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.owner}\"},\n        \"type\": {\"S\": \"USER\"}\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverFormaccount": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "account",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.id}\"},\n        \"type\": {\"S\": \"ACCOUNT\"}\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverFormformData": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "formData",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.versionId}\"},\n        \"type\": {\"S\": \"FORMVERSION\"}\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverFormversions": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "versions",
        "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2018-05-29\",\n    \"operation\": \"Query\",\n    \"index\"    : \"${index_appdata_gsi}\",\n    \"scanIndexForward\" : false,\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"FORMVERSION\"},\n            \":meta\" : {\"S\" : \"${context.source.id}\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"limit\": $util.defaultIfNull(${ctx.args.limit}, 10),\n    \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerylistForms": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listForms",
        "RequestMappingTemplate": "#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n#end\n## Only Admins allowed\n#if (!$isAdmin == true)\n    $utils.unauthorized()\n#end\n#set($attribs = $context.arguments)\n{\n    \"version\"   : \"2018-05-29\",\n    \"operation\" : \"Query\",\n    \"index\"    : \"${index_appdata_gsi}\",\n    \"query\"     : {\n      \"expression\": \"#type = :objectType\",\n      \"expressionNames\" : {\n            \"#type\" : \"type\"\n        },\n      \"expressionValues\" : {\n        \":objectType\" : { \"S\": \"FORM\" }\n      }\n  },\n  \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationaddAccount": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addAccount",
        "RequestMappingTemplate": "#set($id = $util.autoId())\n#set($attribs = $context.arguments.input)\n#set($attribs.owner = $context.identity.sub)\n#set($attribs.itemType = \"ACCOUNT\")\n#set($attribs.isDeleted = false)\n#set($attribs.meta = \"planType#\")\n#set($attribs.version = 1)\n#set($attribs.createdAt = $util.time.nowISO8601())\n{\n    \"version\": \"2018-05-29\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"id\"  : $util.dynamodb.toDynamoDBJson($id),\n        \"type\": {\"S\" : \"ACCOUNT\"}\n    },\n    \"attributeValues\": $util.toJson($util.dynamodb.toMapValues($attribs)),\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#id)\",\n        \"expressionNames\": {\n            \"#id\": \"id\"\n        }\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerylistPlanTypes": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listPlanTypes",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNlistPlanTypes",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetPlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getPlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetPlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddPlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addPlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNaddPlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdatePlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updatePlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdatePlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationdeletePlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "deletePlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNdeletePlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addUser",
        "RequestMappingTemplate": "#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($id = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO User(id, accountId, ownerId, planTypeId, startDate, active, createdAt) VALUES(:id, :accountId, :ownerId, :planTypeId, :startDate, :active, :createdAt)\",\n            \"SELECT * FROM Plan WHERE id='${id}'\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${args.id}\",\n            \":email\": \"${args.email}\",\n            \":userGroup\": \"${args.group}\",\n            \":accountId\": \"${args.accountId}\",\n            \":given_name\": \"${args.given_name}\",\n            \":family_name\": ${args.family_name},\n            \":createdAt\": \"${now}\"\n        }\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [Plan]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationaddForm": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addForm",
        "RequestMappingTemplate": "#set($items = [])\n\n#set($userId = $context.identity.sub)\n#set($accountId = $context.identity.claims[\"custom:tenantId\"])\n$util.qr($ctx.stash.put(\"userId\", $context.identity.sub))\n$util.qr($ctx.stash.put(\"accountId\", $context.identity.claims[\"custom:tenantId\"]))\n#if($util.isNullOrEmpty($accountId))\n    $utils.unauthorized()\n#end\n#set($formId = $util.autoId())\n#set($historyId = $util.autoId())\n#set($timeNow = $util.time.nowISO8601())\n#set($form = {})\n$util.qr($form.put(\"id\", $formId))\n$util.qr($form.put(\"type\", \"FORM\"))\n$util.qr($form.put(\"itemType\", \"FORM\"))\n$util.qr($form.put(\"meta\", \"${accountId}#${userId}\"))\n$util.qr($form.put(\"owner\", $context.identity.sub))\n$util.qr($form.put(\"accountId\", $accountId))\n$util.qr($form.put(\"versionId\", $historyId))\n$util.qr($form.put(\"isDeleted\", false))\n$util.qr($form.put(\"createdAt\", $timeNow))\n$util.qr($form.put(\"name\", $context.arguments.form.name))\n$util.qr($form.put(\"desc\", $context.arguments.form.desc))\n#if($context.arguments.form.startsAt)\n    $util.qr($form.put(\"startsAt\", $context.arguments.form.startsAt))\n#end\n#if($context.arguments.form.endsAt)\n    $util.qr($form.put(\"endsAt\", $context.arguments.form.endsAt))\n#end\n$util.qr($form.put(\"isPaused\", $util.defaultIfNull($context.arguments.form.isPaused, false)))\n\n#set($history = {})\n$util.qr($history.put(\"id\", $historyId))\n$util.qr($history.put(\"type\", \"FORMVERSION\"))\n$util.qr($history.put(\"itemType\", \"FORMVERSION\"))\n$util.qr($history.put(\"owner\", $context.identity.sub))\n$util.qr($history.put(\"createdAt\", $timeNow))\n$util.qr($history.put(\"formData\", $util.defaultIfNull($context.arguments.form.formData, {})))\n$util.qr($history.put(\"meta\", \"${formId}#${timeNow}\"))\n$util.qr($history.put(\"notes\", $context.arguments.notes))\n$util.qr($items.add($util.dynamodb.toMapValues($history)))\n$util.qr($items.add($util.dynamodb.toMapValues($form)))\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"BatchPutItem\",\n    \"tables\" : {\n        \"formsgraphql_table_appdata\": $utils.toJson($items)\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationaddFormVersion": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addFormVersion",
        "RequestMappingTemplate": "#set($timeNow = $util.time.nowISO8601())\n#set($id = $util.autoId())\n#set($attribs = {})\n#set($attribs.owner = $context.identity.sub)\n#set($attribs.meta = \"${context.arguments.input.formId}#${timeNow}\")\n#set($attribs.itemType = \"FORMVERSION\")\n#set($attribs.isDeleted = false)\n#set($attribs.createdAt = $timeNow)\n{\n    \"version\": \"2018-05-29\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"id\"  : $util.dynamodb.toDynamoDBJson($id),\n        \"type\": {\"S\" : \"FORMVERSION\"}\n    },\n    \"attributeValues\": $util.toJson($util.dynamodb.toMapValues($attribs)),\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#id)\",\n        \"expressionNames\": {\n            \"#id\": \"id\"\n        }\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerylistAccounts": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listAccounts",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"pipeline_identify_BEF.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FN_passthrough_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNlistAccounts",
                "FunctionId"
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "PostConfirmationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostConfirmationLambdaVersionQUAQVOjVdXSrsHLm5YCsHUpB4m2IUn8jxIbibaAnk"
      }
    },
    "SignupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignupLambdaVersionfGR192V3v11KEYz5TfyAeJcTT0bgkBfzIsNkyrSTc4"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    },
    "Region": {
      "Value": "ap-northeast-1"
    },
    "Stage": {
      "Value": "dev"
    },
    "Service": {
      "Value": "formsli"
    },
    "AttachmentsBucketName": {
      "Value": {
        "Ref": "AttachmentsBucket"
      }
    },
    "UserPoolId": {
      "Value": {
        "Ref": "CognitoUserPoolMyUserPool"
      }
    },
    "UserPoolClientId": {
      "Value": {
        "Ref": "CognitoUserPoolClient"
      }
    },
    "AdminUserPoolClientId": {
      "Value": {
        "Ref": "CognitoUserPoolAdminClient"
      }
    },
    "UserPoolAdminUser": {
      "Value": {
        "Ref": "CognitoUserPoolAdminUser"
      }
    },
    "IdentityPoolId": {
      "Value": {
        "Ref": "CognitoIdentityPoolMyIdentityPool"
      }
    },
    "AuthorizerId": {
      "Value": {
        "Ref": "MyApiGatewayAuthorizer"
      }
    },
    "GraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "GraphQLUrl"
        ]
      }
    }
  }
}