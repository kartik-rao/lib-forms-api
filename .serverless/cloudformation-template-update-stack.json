{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "PostConfirmationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/formsli-dev-postconfirmation",
        "RetentionInDays": 14
      }
    },
    "SignupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/formsli-dev-invite",
        "RetentionInDays": 14
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "formsli",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": [
                    "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds-data:InsertItems",
                    "rds-data:GetItems",
                    "rds-data:UpdateItems",
                    "rds-data:DeleteItems",
                    "rds-data:ExecuteSql",
                    "rds-data:BatchExecuteStatement",
                    "rds-data:BeginTransaction",
                    "rds-data:CommitTransaction",
                    "rds-data:ExecuteStatement",
                    "rds-data:RollbackTransaction"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                    },
                    {
                      "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminAddUserToGroup",
                    "cognito-idp:AdminUpdateUserAttributes",
                    "cognito-idp:AdminRemoveUserFromGroup",
                    "cognito-idp:AdminGetUser",
                    "cognito-idp:AdminCreateUser"
                  ],
                  "Resource": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": "arn:aws:ses:us-east-1:*:*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "formsli",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "PostConfirmationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/formsli/dev/1567573094141-2019-09-04T04:58:14.141Z/formsli.zip"
        },
        "FunctionName": "formsli-dev-postconfirmation",
        "Handler": "src/postconfirmation.handle",
        "MemorySize": 2048,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 30,
        "Tags": [
          {
            "Key": "service",
            "Value": "formsli"
          },
          {
            "Key": "region",
            "Value": "ap-northeast-1"
          }
        ],
        "Environment": {
          "Variables": {
            "region": "ap-northeast-1",
            "domain": "dev-app.forms.li",
            "protocol": "http://",
            "urlPrefix": "http://dev-app.forms.li",
            "environment": "dev",
            "serviceName": "formsli",
            "databaseName": "formsli",
            "userPoolId": "ap-northeast-1_Q798Nsl33",
            "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
            "dbClusterId": "fl-rds-cluster-dev",
            "dbClusterArn": {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
            },
            "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
            "s3_user_bucket": "fl-dev-userdata"
          }
        }
      },
      "DependsOn": [
        "PostConfirmationLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PostConfirmationLambdaVersionbgUAmfituzFt10ngZ9UN5bh8gAzMX09msIveTdA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostConfirmationLambdaFunction"
        },
        "CodeSha256": "fEqi6iXCUgCe767crcdB5NYsRKWXR+D5HjmwnhjkhBg="
      }
    },
    "SignupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/formsli/dev/1567573094141-2019-09-04T04:58:14.141Z/formsli.zip"
        },
        "FunctionName": "formsli-dev-invite",
        "Handler": "src/invite.handle",
        "MemorySize": 2048,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 30,
        "Tags": [
          {
            "Key": "service",
            "Value": "formsli"
          },
          {
            "Key": "region",
            "Value": "ap-northeast-1"
          }
        ],
        "Environment": {
          "Variables": {
            "region": "ap-northeast-1",
            "domain": "dev-app.forms.li",
            "protocol": "http://",
            "urlPrefix": "http://dev-app.forms.li",
            "environment": "dev",
            "serviceName": "formsli",
            "databaseName": "formsli",
            "userPoolId": "ap-northeast-1_Q798Nsl33",
            "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
            "dbClusterId": "fl-rds-cluster-dev",
            "dbClusterArn": {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
            },
            "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
            "s3_user_bucket": "fl-dev-userdata"
          }
        }
      },
      "DependsOn": [
        "SignupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SignupLambdaVersionA8YC5EQ3wR04lLPZkcfDnyTM5WLvLVDasPjhHGT6o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignupLambdaFunction"
        },
        "CodeSha256": "fEqi6iXCUgCe767crcdB5NYsRKWXR+D5HjmwnhjkhBg="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-formsli",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourcePostconfirm": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "postconfirm",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceInvite": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "invite",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPostconfirmOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostconfirm"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodInviteOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceInvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPostconfirmPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostconfirm"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PostConfirmationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodInvitePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceInvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1567573069594": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodPostconfirmOptions",
        "ApiGatewayMethodInviteOptions",
        "ApiGatewayMethodPostconfirmPost",
        "ApiGatewayMethodInvitePost"
      ]
    },
    "PostConfirmationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostConfirmationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PostConfirmationCustomCognitoUserPool1": {
      "Type": "Custom::CognitoUserPool",
      "Version": 1,
      "DependsOn": [
        "PostConfirmationLambdaFunction",
        "CustomDashresourceDashexistingDashcupLambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashexistingDashcupLambdaFunction",
            "Arn"
          ]
        },
        "FunctionName": "formsli-dev-postconfirmation",
        "UserPoolName": "fl-dev-userpool",
        "UserPoolConfigs": [
          {
            "Trigger": "PostConfirmation"
          }
        ]
      }
    },
    "CustomDashresourceDashexistingDashcupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/formsli/dev/1567573094141-2019-09-04T04:58:14.141Z/custom-resources.zip"
        },
        "FunctionName": "formsli-dev-custom-resource-existing-cup",
        "Handler": "cognitoUserPool/handler.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 180
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "formsli",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "cognito-idp:ListUserPools",
                    "cognito-idp:DescribeUserPool",
                    "cognito-idp:UpdateUserPool"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "arn:aws:lambda:*:*:function:formsli-dev-postconfirmation",
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "AppSyncRDSRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "formsli-ap-northeast-1-appsync-iam-role",
        "ManagedPolicyArns": [
          {
            "Ref": "AppSyncRDSPolicy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "AppSyncRDSPolicy"
      ]
    },
    "AppSyncRDSPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allow AWS AppSync to access RDS.",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "rds-data:InsertItems",
                "rds-data:GetItems",
                "rds-data:UpdateItems",
                "rds-data:DeleteItems",
                "rds-data:ExecuteSql",
                "rds-data:BatchExecuteStatement",
                "rds-data:BeginTransaction",
                "rds-data:CommitTransaction",
                "rds-data:ExecuteStatement",
                "rds-data:RollbackTransaction",
                "tag:GetResources"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                },
                {
                  "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:ListSecrets",
                "secretsmanager:GetRandomPassword"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/dev/formsli/rds/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "tag:GetResources",
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "AppSyncCloudWatchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "formsli-ap-northeast-1-appsync-logging-iam-role",
        "ManagedPolicyArns": [
          {
            "Ref": "AppSyncCloudWatchPolicy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "AppSyncCloudWatchPolicy"
      ]
    },
    "AppSyncCloudWatchPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allow AWS AppSync to write logs",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "MyApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 10,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "MyCognitoAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33"
        ]
      }
    },
    "PostConfirmationTriggerInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "PostConfirmationLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
        "FunctionName": "formsli-dev-postconfirmation"
      }
    },
    "CognitoUserPoolAdminUser": {
      "Type": "AWS::Cognito::UserPoolUser",
      "Properties": {
        "Username": "infrastructure.dev@forms.li",
        "UserPoolId": "ap-northeast-1_Q798Nsl33",
        "DesiredDeliveryMediums": [
          "EMAIL"
        ],
        "UserAttributes": [
          {
            "Name": "email",
            "Value": "infrastructure.dev@forms.li"
          },
          {
            "Name": "given_name",
            "Value": "dev Infrastructure"
          },
          {
            "Name": "family_name",
            "Value": "Admin"
          },
          {
            "Name": "email_verified",
            "Value": true
          },
          {
            "Name": "custom:group",
            "Value": "Admin"
          },
          {
            "Name": "custom:region",
            "Value": "ap-northeast-1"
          },
          {
            "Name": "custom:environment",
            "Value": "dev"
          }
        ]
      }
    },
    "GraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "formsli-api-dev",
        "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
        "AdditionalAuthenticationProviders": [],
        "UserPoolConfig": {
          "AwsRegion": "ap-northeast-1",
          "UserPoolId": "ap-northeast-1_Q798Nsl33",
          "DefaultAction": "ALLOW"
        },
        "LogConfig": {
          "CloudWatchLogsRoleArn": {
            "Fn::GetAtt": [
              "AppSyncCloudWatchRole",
              "Arn"
            ]
          },
          "FieldLogLevel": "ALL"
        }
      }
    },
    "GraphQlApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "/",
            [
              "/aws/appsync/apis",
              {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              }
            ]
          ]
        },
        "RetentionInDays": 14
      }
    },
    "GraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "enum FilterWith {\n  AND\n  OR\n}\n\nenum NumericFilterExpression {\n  in\n  ne\n  eq\n  le\n  lt\n  ge\n  gt\n  between\n  notBetween\n  isNull\n  isNotNull\n}\n\nenum BooleanFilterExpression {\n  ne\n  eq\n}\n\nenum StringFilterExpression {\n  ne\n  eq\n  contains\n  notContains\n  startsWith\n  isNull\n  isNotNull\n  in\n}\n\ninput DateFilter {\n  with  : FilterWith\n  expression: NumericFilterExpression!\n  value: [AWSDateTime!]\n}\n\ninput BooleanFilter {\n  with  : FilterWith\n  expression: BooleanFilterExpression!\n  value: [Boolean!]\n}\n\ninput FloatFilter {\n  with  : FilterWith\n  expression: NumericFilterExpression!\n  value: [Float!]\n}\n\n\ninput IntFilter {\n  with  : FilterWith\n  expression: NumericFilterExpression!\n  value: [Int!]\n}\n\ninput StringFilter {\n  with  : FilterWith\n  expression: StringFilterExpression!\n  value: [String!]\n}\n\ninput AccountFilterInput {\n  name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  planId: IntFilter\n  active: IntFilter\n  criteria: [AccountFilterInput!]\n}\n\ninput UserFilterInput {\n  accountId: StringFilter\n  ownerId: IntFilter\n  email: StringFilter\n  userGroup: StringFilter\n  given_name: StringFilter\n  family_name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  isDeleted: IntFilter\n  criteria: [UserFilterInput!]\n}\n\ninput PlanTypeFilterInput {\n  ownerId: IntFilter\n  cost: FloatFilter\n  billingTerm: StringFilter\n  name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  isDeleted: IntFilter\n  criteria: [PlanTypeFilterInput!]\n}\n\ninput IntegrationTypeFilterInput {\n  ownerId: IntFilter\n  planTypeId: IntFilter\n  name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  active: IntFilter\n  criteria: [IntegrationTypeFilterInput!]\n}\n\ninput IntegrationFilterInput {\n  ownerId: IntFilter\n  accountId: IntFilter\n  formId: IntFilter\n  active: IntFilter\n  isDeleted: IntFilter\n  lastExecuted: DateFilter\n  lastExecutionResult: IntFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  criteria: [IntegrationFilterInput!]\n}\n\ninput FormFilterInput {\n  name: StringFilter\n  ownerId: IntFilter\n  accountId: IntFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  startsAt: DateFilter\n  endsAt: DateFilter\n  isPaused: IntFilter\n  isDeleted: IntFilter\n  criteria: [FormFilterInput!]\n}\n\ninput PlanFilterInput {\n  accountId: IntFilter\n  ownerId: IntFilter\n  planTypeId: IntFilter\n  lastBillDate: DateFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  startDate: DateFilter\n  endDate: DateFilter\n  criteria: [PlanFilterInput!]\n}\n\ntype FormEntry @model {\n  id: ID!\n  formId: ID!\n  form: Form!\n  data: AWSJSON!\n  createdAt: AWSDateTime!\n}\n\ninput AddFormEntryInput {\n  data: AWSJSON!\n}\n\ntype FormVersion @model {\n  id: ID!\n  formId: ID!\n  ownerId: ID!\n  ownedBy: User!\n  createdAt: AWSDateTime\n  notes: String\n  formData: AWSJSON\n}\n\ninput AddFormVersionInput {\n  accountId: ID!\n  formId: ID!\n  notes: String\n  formData: AWSJSON!\n}\n\n\ntype Form @model  {\n  id: ID!\n  ownerId: ID!\n  name: String!\n  description: String!\n  versionId: ID\n  formData: FormVersion\n  ownedBy: User!\n  accountId: ID!\n  account: Account!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime\n  startDate: AWSDateTime\n  endDate  : AWSDateTime\n  isPaused : Boolean\n  isDeleted: Boolean\n  versions(limit: Int): [FormVersion]\n  integrations(limit: Int): [Integration]\n  entries(limit: Int): [FormEntry]\n}\n\n\ninput AddFormInput {\n  accountId: ID!\n  name: String!\n  description: String!\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ninput UpdateFormInput {\n  id: ID!\n  currentVersionId: ID\n  name: String\n  description: String\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ninput DeleteFormInput {\n  id: ID!\n  accountId: ID!\n}\n\ntype User @model {\n  id: ID!\n  ownerId: ID\n  accountId: ID\n  account: Account\n  email: String!\n  userGroup: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Int\n  numForms: Int\n}\n\n\ninput UpdateUserInputData {\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\ninput UpdateUserInput {\n  id: ID!\n  data: UpdateUserInputData!\n}\n\nenum AddressType {\n  BILLING\n  CONTACT\n}\n\ntype Address @model {\n  id: ID!\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\n\ntype AddAddressInput {\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\ntype Account @model {\n  id: ID!\n  name: String!\n  addresses(limit: Int): [Address]\n  website: String\n  taxId: String\n  ownerId: ID!\n  ownedBy: User!\n  plan : Plan\n  planId: ID\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  active: Int\n  numForms: Int\n  numUsers: Int\n  users(limit: Int): [User]\n  forms(limit: Int): [Form]\n}\n\ninput UpdateAccountInput {\n  id: ID!\n  name: String\n}\ntype PlanType @model {\n  id: ID!\n  ownerId: ID!\n  ownedBy: User!\n  name: String!\n  cost: Float!\n  active: Int!\n  billingTerm: String!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Int\n}\n\ninput AddPlanTypeInput {\n  name: String!\n  cost: Float!\n  billingTerm: String!\n  active: Int!\n}\n\ninput UpdatePlanTypeInput {\n  id: ID!\n  name: String\n  cost: Float\n  billingTerm: String\n  active: Int\n}\n\ntype Plan @model {\n  id: ID!\n  accountId: ID!\n  account: Account!\n  ownerId: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  startDate: AWSDateTime!\n  endDate: AWSDateTime\n  active: Int\n  lastBillDate: AWSDateTime\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  planType: PlanType\n  isDeleted: Int\n}\n\ninput AddPlanInput {\n  accountId: ID!\n  planTypeId: ID!\n  endDate: AWSDateTime\n  active: Int\n}\n\ninput UpdatePlanInput {\n  planId: ID!\n  accountId: ID!\n  active: Int!\n  endDate: AWSDateTime\n}\n\ntype IntegrationType @model {\n  id: ID!\n  ownerId: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  planType: PlanType\n  name: String!\n  active: Int!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n}\n\n\ninput AddIntegrationTypeInput {\n  name: String!\n  active: Int\n}\n\ninput UpdateIntegrationTypeInput {\n  id: ID!\n  name: String!\n  active: Int\n}\n\ntype Integration @model {\n  id: ID!\n  integrationTypeId: ID!\n  integrationType: IntegrationType\n  ownerId: ID!\n  accountId: ID!\n  formId: ID!\n  form: Form!\n  active: Int!\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n  lastExecuted: AWSDateTime\n  lastExecutionResult: Int\n  lastExecutionResultMessage: String\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Int\n}\n\n\ninput AddIntegrationInput {\n  integrationTypeId: ID!\n  accountId: ID!\n  formId: ID!\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationTypeInputData {\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationInput {\n  id: ID!\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput OffsetLimit {\n  offset: Int\n  limit: Int\n}\n\ntype Query {\n  getAccount(accountId: ID!): Account\n  getUser(userId: ID!): User\n  getPlan(planId: String!): Plan\n  getActiveAccountPlan(accountId: String!): Plan\n  getPlanType(planTypeId: String!): PlanType\n  getForm(formId: String!) : Form\n  getIntegrationType(integrationTypeId: String!): IntegrationType\n  getIntegration(integrationId: String!): Integration\n  getFormEntry(formEntryId: String!): FormEntry\n  listAccounts(offsetLimit: OffsetLimit, filter: AccountFilterInput): [Account]\n  listUsers(offsetLimit: OffsetLimit, filter: UserFilterInput) : [User]\n  listPlans(offsetLimit: OffsetLimit, filter: PlanFilterInput): [Plan]\n  listPlanTypes(offsetLimit: OffsetLimit, filter: PlanTypeFilterInput): [PlanType]\n  listForms(offsetLimit: OffsetLimit, filter: FormFilterInput) : [Form]\n  listIntegrationTypes(offsetLimit: OffsetLimit, filter: IntegrationTypeFilterInput): [IntegrationType]\n  listIntegrations(offsetLimit: OffsetLimit, filter: IntegrationFilterInput): [Integration]\n  listFormEntries(offsetLimit: OffsetLimit, formId: String!) : [FormEntry]\n  listFormEntriesByTime(offsetLimit: OffsetLimit, formId: String!, timestampPrefix: String!): [FormEntry]\n}\n\ntype Mutation {\n  addPlanType(input: AddPlanTypeInput): PlanType!\n  addPlan(input: AddPlanInput): Plan!\n  addIntegrationType(input: AddIntegrationTypeInput): IntegrationType!\n  addIntegration(input: AddIntegrationInput): Integration!\n  addForm(input: AddFormInput!): Form!\n  addFormVersion(input: AddFormVersionInput): Form!\n\n  updatePlanType(input: UpdatePlanTypeInput): PlanType!\n  updatePlan(input: UpdatePlanInput): Plan!\n  updateAccount(input: UpdateAccountInput): Account!\n  updateAccountPlan(input: AddPlanInput): Account!\n  updateUser(input: UpdateUserInput): User!\n  updateIntegrationType(input: UpdateIntegrationTypeInput): IntegrationType!\n  updateIntegration(input: UpdateIntegrationInput): Integration!\n  updateForm(input: UpdateFormInput): Form!\n\n  deleteForm(input: DeleteFormInput): Form!\n  deletePlanType(planTypeId: ID!): PlanType!\n  deletePlan(accountId: ID!, planId: ID!): Plan!\n  deleteAccount(accountId: ID!): Account!\n  deleteUser(userId: ID!): User!\n  deleteIntegrationType(integrationTypeId: ID!): IntegrationType!\n  deleteIntegration(integrationId: ID!): Integration!\n\n  addFormEntry(input: AddFormEntryInput!): FormEntry!\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n",
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "GraphQlDsAppData": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "AppData",
        "Description": "RDS source for formsli",
        "Type": "RELATIONAL_DATABASE",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncRDSRole",
            "Arn"
          ]
        },
        "RelationalDatabaseConfig": {
          "RdsHttpEndpointConfig": {
            "AwsRegion": "ap-northeast-1",
            "DbClusterIdentifier": {
              "Fn::Join": [
                ":",
                [
                  "arn",
                  "aws",
                  "rds",
                  "ap-northeast-1",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "cluster",
                  "fl-rds-cluster-dev"
                ]
              ]
            },
            "DatabaseName": "formsli",
            "AwsSecretStoreArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX"
          },
          "RelationalDatabaseSourceType": "RDS_HTTP_ENDPOINT"
        }
      }
    },
    "GraphQlFunctionConfigurationFNparseFilter": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNparseFilter",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Common_FN_parseFilter_REQ.vtl\"))\n#set($args=$ctx.arguments)\n#set($identity=$ctx.stash.identity)\n#set($expmap = {\n  \"ne\" : \"!=\",\n  \"eq\" : \"=\",\n  \"le\" : \"<=\",\n  \"lt\" : \"<\",\n  \"ge\" : \">=\",\n  \"gt\" : \">\"\n})\n\n#if($args.filter && $args.filter.criteria)\n    #set($filter = \"\")\n    #foreach($criteria in $args.filter.criteria)\n        #foreach($col in $criteria.keySet())\n            #set($entry=$criteria[$col])\n            #set($values=$entry.value)\n            #if($col == \"accountId\" && !$identity.isAdmin)\n                $values.set(0, $identity.tenantId)\n            #end\n            #set($with=\"\")\n            #set($clause=\"\")\n            #if($foreach.hasNext)\n                #set($with=$entry.with)\n            #end\n            #if($entry.expression == 'contains')\n                #set($clause=\"${col} LIKE '%${values[0]}%' ${with}\")\n            #elseif($entry.expression == 'notContains')\n                #set($clause=\"${col} NOT LIKE '%${values[0]}%' ${with}\")\n            #elseif($entry.expression == 'startsWith')\n                #set($clause=\"${col} LIKE '${values[0]}%' ${with}\")\n            #elseif($entry.expression == 'between')\n                #set($clause=\"${col} BETWEEN ${values[0]} AND ${values[1]} ${with}\")\n            #elseif($entry.expression == 'notBetween')\n                #set($clause=\"${col} NOT BETWEEN ${values[0]} AND ${values[1]} ${with}\")\n            #elseif($entry.expression == 'isNull')\n                #set($clause=\"${col} IS NULL ${with}\")\n            #elseif($entry.expression == 'isNotNull')\n                #set($clause=\"${col} IS NOT NULL ${with}\")\n            #elseif($entry.expression == 'in')\n                #set($clause=\"${col} IN (${values[0]}) ${with}\")\n            #else\n                #set($exp=$expmap.get($entry.expression))\n                #set($clause=\"${col} ${exp} '${values[0]}' ${with}\")\n            #end\n            #set($filter=\"${filter} ${clause}\")\n        #end\n    #end\n    #set($filter = \"WHERE ${filter}\")\n#end\n$util.qr($ctx.stash.put(\"filterExpression\", $filter))\n#return",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Common_FN_parseFilter_RES.vtl\"))\n#return",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetAccount": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetAccount",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n\n#set($isAllowed = false)\n#if($identity.tenantId == $args.accountId || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Account WHERE id='${args.accountId}'\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Account[${args.accountId}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNlistAccounts": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNlistAccounts",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($expmap = {\n  \"ne\" : \"!=\",\n  \"eq\" : \"=\",\n  \"le\" : \"<=\",\n  \"lt\" : \"<\",\n  \"ge\" : \">=\",\n  \"gt\" : \">\"\n})\n\n#if($identity.isAdmin == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'list'))\n    #set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n    $util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n    $util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n    $util.qr($ctx.stash.put(\"limits\", $limits))\n    #set($filter = $util.defaultIfNull($ctx.stash.filterExpression, \"\"))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Account ${filter} LIMIT ${limits.offset}, ${limits.limit}\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute LIST on Account\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNlistUsers": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNlistUsers",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"User_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n$util.qr($ctx.stash.put(\"request\", $args))\n$util.qr($ctx.stash.request.put(\"itemType\", 'User'))\n$util.qr($ctx.stash.put(\"operation\", 'list'))\n#set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n$util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n$util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n$util.qr($ctx.stash.put(\"limits\", $limits))\n#if($ctx.stash.filterExpression)\n    #if(!$identity.isAdmin)\n        #if($ctx.stash.filterExpression.indexOf('accountId') == -1 && !$identity.isAdmin)\n            #set($filter=\"${ctx.stash.filterExpression} AND accountId = '${identity.tenantId}'\")\n        #end\n    #else\n        #set($filter=$ctx.stash.filterExpression)\n    #end\n#else\n    #if(!$identity.isAdmin)\n        #set($filter = \"WHERE accountId = '${identity.tenantId}'\")\n    #else\n        #set($filter = \"\")\n    #end\n#end\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User ${filter} LIMIT ${limits.offset}, ${limits.limit}\"\n    ]\n}\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdateAccount": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdateAccount",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "## Only allow admin and account admin to update account\n$util.qr($ctx.stash.paths.add(\"Account_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = $identity.isAdmin == true || ($identity.isAccountAdmin == true && $args.accountId == $identity.tenantId))\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE Account SET updatedAt='${util.time.nowISO8601()}' #if($args.name) , `name`='${args.name}' #end WHERE id='${args.id}'\",\n            \"SELECT * FROM Account WHERE id ='${args.id}'\"\n        ]\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [Account]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdateAccountPlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdateAccountPlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "## Only allow admin and account admin to update account\n## This must run after FN_createPlan\n$util.qr($ctx.stash.paths.put(\"Account_plan_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n#set($isAllowed = $identity.isAdmin == true || ($identity.isAccountAdmin == true && $args.accountId == $identity.tenantId))\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"request\", $request))\n    $util.qr($ctx.stash.put(\"operation\", 'update'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"CALL changeAccountPlan('$args.accountId', '$ctx.prev.result.id', '${util.time.nowISO8601()}')\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [${ctx.stash.operation}] on [${args.accountId}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetUser": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetUser",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"User_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n## Only allow admin and account admin to get other users\n#set($isAllowed = $identity.isAdmin == true || $identity.isAccountAdmin == true || $args.userId == $identity.callerId)\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.userId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'User'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM User WHERE id='${args.userId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM User WHERE id='${args.userId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on User[${args.userId}]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNdeletePlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNdeletePlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM PlanType WHERE id ='${args.planTypeId}'\",\n            \"UPDATE PlanType SET isDeleted=1, active=0, updatedAt='${util.time.nowISO8601()}' WHERE id='${args.planTypeId}'\",\n        ],\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on PlanType[${args.planTypeId}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_delete_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdatePlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdatePlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE PlanType SET updatedAt='${util.time.nowISO8601()}' #if($args.name) , `name`='${args.name}' #end #if($args.billingTerm) , billingTerm='${args.billingTerm}' #end #if(!$util.isNull($args.cost)) , cost=${args.cost} #end #if(!$util.isNull($args.active)) , active=${args.active} #end WHERE id='${args.id}'\",\n            \"SELECT * FROM PlanType WHERE id ='${args.id}'\"\n        ]\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [PlanType]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNaddPlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNaddPlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    #set($id = $util.autoId())\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO PlanType(id, `name`, cost, billingTerm, active, ownerId, isDeleted, createdAt) VALUES(:id, :name, :cost, :billingTerm, :active, :ownerId, :isDeleted, :createdAt)\",\n            \"SELECT * FROM PlanType WHERE id = :id\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${id}\",\n            \":name\": \"${args.name}\",\n            \":cost\": \"${args.cost}\",\n            \":billingTerm\": \"${args.billingTerm}\",\n            \":active\": $args.active,\n            \":ownerId\": \"${identity.callerId}\",\n            \":isDeleted\": 0,\n            \":createdAt\": \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Plantype]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetPlanType": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetPlanType",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n$util.qr($ctx.stash.put(\"request\", $args))\n$util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n$util.qr($ctx.stash.put(\"operation\", 'get'))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        #if(!$identity.isAdmin)\n            \"SELECT * FROM PlanType WHERE id='${args.planTypeId}' AND active=1 AND isDeleted=0\"\n        #else\n            \"SELECT * FROM PlanType WHERE id='${args.planTypeId}'\"\n        #end\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNlistPlanTypes": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNlistPlanTypes",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#if($identity.isAdmin == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'list'))\n    #set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n    $util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n    $util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n    $util.qr($ctx.stash.put(\"limits\", $limits))\n    {\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM PlanType active=1 LIMIT ${limits.offset}, ${limits.limit}\"\n            #else\n                \"SELECT * FROM PlanType LIMIT ${limits.offset}, ${limits.limit}\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [${LIST}] on PlanType\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNcreatePlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNcreatePlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if(($identity.isAccountAdmin == true && $identity.tenantId == $args.accountId) || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    #set($id = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO Plan(id, accountId, ownerId, planTypeId, startDate, createdAt) VALUES(:id, :accountId, :ownerId, :planTypeId, :startDate, :createdAt)\",\n            \"SELECT * FROM Plan WHERE id='${id}'\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${id}\",\n            \":accountId\": \"${args.accountId}\",\n            \":ownerId\": \"${identity.callerId}\",\n            \":planTypeId\": \"${args.planTypeId}\",\n            \":startDate\": \"${now}\",\n            \":active\": 1,\n            \":createdAt\": \"${now}\"\n        }\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [Plan]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdatePlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdatePlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.request.put(\"id\", $args.planId))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE Plan SET updatedAt=:isotime #if($args.endDate) , endDate=:endDate #end #if(!$util.isNull($args.active)) , active=:active #end WHERE id=:id AND accountId= :accountId\",\n            \"SELECT * FROM Plan WHERE id=:id\"\n        ],\n        \"variableMap\": {\n            \":id\"       : \"${args.planId}\",\n            \":endDate\"  : \"${args.endDate}\",\n            \":accountId\": \"${args.accountId}\",\n            \":active\"   : $args.active,\n            \":isotime\"  : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on Plan[${ctx.stash.request.id}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNdeletePlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNdeletePlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin || $identity.isAccountAdmin == true && $identity.tenantId == $args.accountId)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.request.put(\"id\", $args.planId))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Plan WHERE id ='${args.planId}'\",\n            \"UPDATE Plan SET isDeleted=1, active=0, endDate=:isotime, updatedAt=:isotime WHERE id='${args.planId}' AND accountId='${args.accountId}'\",\n        ],\n        \"variableMap\": {\n            \":isotime\" : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on Plan[${args.planId}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_delete_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetPlan": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetPlan",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM Plan WHERE id='${args.planId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM Plan WHERE id='${args.planId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Plan[${args.planId}]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNgetForm": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNgetForm",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.tenantId == $args.accountId || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.formId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            #if($identity.isAdmin != true)\n                \"SELECT * FROM Form WHERE id='${args.formId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM Form WHERE id='${args.formId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Form[${args.formId}]\", \"Unauthorized\")\n#end\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNlistForm": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNlistForm",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n$util.qr($ctx.stash.put(\"request\", $args))\n$util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n$util.qr($ctx.stash.put(\"operation\", 'list'))\n#set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n$util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n$util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n$util.qr($ctx.stash.put(\"limits\", $limits))\n#if($ctx.stash.filterExpression)\n    #if(!$identity.isAdmin)\n        #if($ctx.stash.filterExpression.indexOf('accountId') == -1 && !$identity.isAdmin)\n            #set($filter=\"${ctx.stash.filterExpression} AND accountId = '${identity.tenantId}'\")\n        #end\n    #else\n        #set($filter=$ctx.stash.filterExpression)\n    #end\n#else\n    #if(!$identity.isAdmin)\n        #set($filter = \"WHERE accountId = '${identity.tenantId}'\")\n    #else\n        #set($filter = \"\")\n    #end\n#end\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Form ${filter} LIMIT ${limits.offset}, ${limits.limit}\"\n    ]\n}\n",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNupdateForm": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNupdateForm",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true || $identity.isAccountAdmin == true || $identity.isAccountEditor == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.request.put(\"id\", $args.id))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE Form SET updatedAt=:isotime #if($args.startDate) , startDate=:startDate #end #if($args.endDate) , endDate=:endDate #end #if(!$util.isNull($args.name)) , `name`=:name #end #if(!$util.isNull($args.description)) , description=:description #end #if(!$util.isNull($args.isPaused)) , isPaused=:isPaused #end  WHERE id=:id\",\n            \"SELECT * FROM Form WHERE id ='${args.id}'\"\n        ],\n        \"variableMap\": {\n            \":id\" : \"${args.id}\",\n            \":name\" : \"${args.name}\",\n            \":isPaused\": \":isPaused\",\n            \":description\": \"description\",\n            \":startDate\": \"${args.startDate}\",\n            \":endDate\": \"${args.endDate}\",\n            \":isotime\" : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Form]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNaddForm": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNaddForm",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true || ($identity.tenantId == $args.accountId && ($identity.isAccountAdmin == true || $identity.isAccountEditor == true)))\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($formId = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $formId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO Form(id, ownerId, accountId, `name`, description, createdAt) VALUES(:id, :ownerId, :accountId, :name, :description, :createdAt)\",\n            \"SELECT * FROM Form WHERE id=:id\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${formId}\",\n            \":ownerId\": \"${identity.callerId}\",\n            \":accountId\": \"${args.accountId}\",\n            \":name\": \"${args.name}\",\n            \":description\": \"${args.description}\",\n            \":createdAt\": \"${now}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Form]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNattachFormVersion": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNattachFormVersion",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FormVersion_attach_REQ.vtl\"))\n#set($args=$ctx.arguments.input)\n#set($now = \"${util.time.nowISO8601()}\")\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"UPDATE Form SET versionId=:versionId, updatedAt=:updatedAt WHERE id=:formId\",\n        \"SELECT * FROM Form WHERE id=:formId\"\n    ],\n    \"variableMap\" : {\n        \":versionId\": \"${ctx.prev.result.id}\",\n        \":updatedAt\": \"${now}\",\n        \":formId\"   : \"${args.formId}\"\n    }\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNdeleteForm": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNdeleteForm",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin || (($identity.isAccountAdmin == true || $identity.tenantId == $args.accountId) && $args.accountId == $identity.tenantId))\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.id))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Form WHERE id=:id AND accountId=:accountId\",\n            \"UPDATE Form SET isDeleted=1, isPaused=1, endDate=:isotime, updatedAt=:isotime WHERE id=:id AND accountId=:accountId\",\n        ],\n        \"variableMap\": {\n            \":id\" : \"${args.id}\",\n            \":accountId\" : \"${args.accountId}\",\n            \":isotime\" : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on Form[${args.id}]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_delete_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlFunctionConfigurationFNaddFormVersion": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "GraphQlFunctionConfigurationFNaddFormVersion",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FormVersion_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true || ($identity.tenantId == $args.accountId && ($identity.isAccountAdmin == true || $identity.isAccountEditor == true)))\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed)\n    #set($versionId = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $versionId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'FormVersion'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO FormVersion(id, formId, ownerId, notes, formData, createdAt) VALUES(:id, :formId, :ownerId, :notes, :formData, :createdAt)\",\n            \"SELECT * FROM FormVersion WHERE id='${versionId}'\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${versionId}\",\n            \":formId\": \"${args.formId}\",\n            \":ownerId\": \"${identity.callerId}\",\n            \":notes\": \"${args.notes}\",\n            \":formData\": \"${args.formData}\",\n            \":createdAt\": \"${now}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [FormVersion]\", \"Unauthorized\")\n#end",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
        "FunctionVersion": "2018-05-29"
      }
    },
    "GraphQlResolverQuerygetUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getUser",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetUser",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverUsernumForms": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "User",
        "FieldName": "numForms",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"User_numForms_get.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT count(*) as item_count FROM Form WHERE ownerId='${ctx.source.id}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_count_RES.vtl\"))\n#set($count=$utils.rds.toJsonObject($ctx.result)[0][0])\n#if($count[\"item_count\"])\n    $utils.toJson($count[\"item_count\"])\n#else\n    $utils.toJson(0)\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerylistUsers": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listUsers",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNparseFilter",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNlistUsers",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverPlanplanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Plan",
        "FieldName": "planType",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_planType_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM PlanType WHERE id='${ctx.source.planTypeId}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_planType_get_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"PlanType not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetPlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getPlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetPlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationdeletePlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "deletePlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNdeletePlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddPlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addPlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNcreatePlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdatePlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updatePlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdatePlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetAccount": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getAccount",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetAccount",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerylistAccounts": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listAccounts",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNparseFilter",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNlistAccounts",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdateAccount": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updateAccount",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdateAccount",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdateAccountPlan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updateAccountPlan",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNcreatePlan",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdateAccountPlan",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverAccountnumForms": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "numForms",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_numForms_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT count(*) as item_count FROM Form WHERE accountId='${ctx.source.id}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_count_RES.vtl\"))\n#set($count=$utils.rds.toJsonObject($ctx.result)[0][0])\n#if($count[\"item_count\"])\n    $utils.toJson($count[\"item_count\"])\n#else\n    $utils.toJson(0)\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountnumUsers": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "numUsers",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_numUsers_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT count(*) as item_count FROM User WHERE accountId='${ctx.source.id}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_count_RES.vtl\"))\n#set($count=$utils.rds.toJsonObject($ctx.result)[0][0])\n#if($count[\"item_count\"])\n    $utils.toJson($count[\"item_count\"])\n#else\n    $utils.toJson(0)\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountplan": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "plan",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_plan_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Plan WHERE accountId='${ctx.source.id}' and active=1\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_plan_get_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountownedBy": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "ownedBy",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"User not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountforms": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "forms",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Account_forms_list_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Form WHERE accountId='${ctx.source.id}' ORDER BY createdAt DESC, updatedAt DESC\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Account_forms_list_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverAccountusers": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Account",
        "FieldName": "users",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_user_list_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE active=1 AND accountId='${ctx.source.id}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_user_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetForm": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getForm",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetForm",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdateForm": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updateForm",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdateForm",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddForm": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addForm",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNaddForm",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationdeleteForm": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "deleteForm",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNdeleteForm",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddFormVersion": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addFormVersion",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNaddFormVersion",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNattachFormVersion",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerylistForms": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listForms",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNparseFilter",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNlistForm",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverFormownedBy": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "ownedBy",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"User not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverFormaccount": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "account",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Account_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Account WHERE id='${ctx.source.accountId}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Account_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"Account not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverFormformData": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "formData",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM FormVersion WHERE id='${ctx.source.versionId}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_get_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.toJson(null)\n#else\n    $util.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverFormversions": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Form",
        "FieldName": "versions",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_list_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM FormVersion WHERE formId='${ctx.source.formId}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_list_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerylistPlanTypes": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listPlanTypes",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNlistPlanTypes",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverPlanTypeownedBy": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "PlanType",
        "FieldName": "ownedBy",
        "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"User not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsAppData",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetPlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getPlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNgetPlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddPlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addPlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNaddPlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationupdatePlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updatePlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNupdatePlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationdeletePlanType": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "deletePlanType",
        "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
        "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationFNdeletePlanType",
                "FunctionId"
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "PostConfirmationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostConfirmationLambdaVersionbgUAmfituzFt10ngZ9UN5bh8gAzMX09msIveTdA"
      }
    },
    "SignupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignupLambdaVersionA8YC5EQ3wR04lLPZkcfDnyTM5WLvLVDasPjhHGT6o"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    },
    "Region": {
      "Value": {
        "Fn::Sub": "${AWS::Region}"
      }
    },
    "Stage": {
      "Value": "dev"
    },
    "Service": {
      "Value": "formsli"
    },
    "AccountId": {
      "Value": {
        "Fn::Sub": "${AWS::AccountId}"
      }
    },
    "AuthorizerId": {
      "Value": {
        "Ref": "MyApiGatewayAuthorizer"
      }
    },
    "DBClusterId": {
      "Value": "fl-rds-cluster-dev"
    },
    "DBClusterArn": {
      "Value": {
        "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
      }
    },
    "DBSecretArn": {
      "Value": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX"
    },
    "UserPoolId": {
      "Value": "ap-northeast-1_Q798Nsl33"
    },
    "IdentityPoolId": {
      "Value": "ap-northeast-1:5be23074-d96a-4e55-be17-3fe13545156a"
    },
    "UserPoolClientId": {
      "Value": "7pvdgcaflsg9juob60mosafi9d"
    },
    "UserPoolAdminUser": {
      "Value": {
        "Ref": "CognitoUserPoolAdminUser"
      }
    },
    "GraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "GraphQLUrl"
        ]
      }
    }
  }
}