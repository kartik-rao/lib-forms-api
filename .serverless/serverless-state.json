{
  "service": {
    "service": "formsgraphql",
    "serviceObject": {
      "name": "formsgraphql"
    },
    "provider": {
      "stage": "dev",
      "region": "ap-southeast-2",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "functions": {
        "postconfirmation": "formsgraphql-postconfirmation",
        "invite": "formsgraphql-invite"
      },
      "profile": "default",
      "environment": {
        "protocol": "http://",
        "domain": "dev-app.forms.li",
        "urlPrefix": "http://dev-app.forms.li",
        "region": "ap-southeast-2",
        "environment": "dev",
        "serviceName": "formsgraphql",
        "table_form_entries": "formsgraphql_table_form_entries",
        "table_app_data": "formsgraphql_table_appdata"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:BatchWriteItem"
          ],
          "Resource": "arn:aws:dynamodb:ap-southeast-2:*:table/formsgraphql_table_appdata"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ses:SendEmail",
            "ses:SendRawEmail"
          ],
          "Resource": "arn:aws:ses:us-east-1:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:BatchWriteItem"
          ],
          "Resource": "arn:aws:dynamodb:ap-southeast-2:*:table/formsgraphql_table_form_entries"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:AdminAddUserToGroup",
            "cognito-idp:AdminUpdateUserAttributes",
            "cognito-idp:AdminRemoveUserFromGroup",
            "cognito-idp:AdminGetUser",
            "cognito-idp:AdminCreateUser"
          ],
          "Resource": {
            "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
          }
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "PostConfirmationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/formsgraphql-postconfirmation"
            }
          },
          "SignupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/formsgraphql-invite"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "formsgraphql",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsgraphql-postconfirmation:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsgraphql-invite:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsgraphql-postconfirmation:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsgraphql-invite:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "formsgraphql",
                    "dev",
                    "ap-southeast-2",
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PostConfirmationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsgraphql/dev/1553157451218-2019-03-21T08:37:31.218Z/formsgraphql.zip"
              },
              "FunctionName": "formsgraphql-postconfirmation",
              "Handler": "src/postconfirmation.handle",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "protocol": "http://",
                  "domain": "dev-app.forms.li",
                  "urlPrefix": "http://dev-app.forms.li",
                  "region": "ap-southeast-2",
                  "environment": "dev",
                  "serviceName": "formsgraphql",
                  "table_form_entries": "formsgraphql_table_form_entries",
                  "table_app_data": "formsgraphql_table_appdata"
                }
              }
            },
            "DependsOn": [
              "PostConfirmationLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PostConfirmationLambdaVersionQSYYmSf2bnBg5VYO4wlGh0XBBfuLaWAEp6z7FttuR4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostConfirmationLambdaFunction"
              },
              "CodeSha256": "KWp35yJuxq6AUdb7FUuCLquiVIzY6LRdToce470Rb3o="
            }
          },
          "SignupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsgraphql/dev/1553157451218-2019-03-21T08:37:31.218Z/formsgraphql.zip"
              },
              "FunctionName": "formsgraphql-invite",
              "Handler": "src/invite.handle",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "protocol": "http://",
                  "domain": "dev-app.forms.li",
                  "urlPrefix": "http://dev-app.forms.li",
                  "region": "ap-southeast-2",
                  "environment": "dev",
                  "serviceName": "formsgraphql",
                  "table_form_entries": "formsgraphql_table_form_entries",
                  "table_app_data": "formsgraphql_table_appdata"
                }
              }
            },
            "DependsOn": [
              "SignupLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "SignupLambdaVersiongEHOtNtFNGwQVMEkPpUV8vma3GwA8DaBSX4IjOWOY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignupLambdaFunction"
              },
              "CodeSha256": "KWp35yJuxq6AUdb7FUuCLquiVIzY6LRdToce470Rb3o="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-formsgraphql",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourcePostconfirm": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "postconfirm",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceInvite": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "invite",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostconfirmOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin == \"*\") #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostconfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodInviteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin == \"*\") #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostconfirmPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostconfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostConfirmationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodInvitePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1553157451313": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodPostconfirmOptions",
              "ApiGatewayMethodInviteOptions",
              "ApiGatewayMethodPostconfirmPost",
              "ApiGatewayMethodInvitePost"
            ]
          },
          "PostConfirmationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostConfirmationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CognitoUserPoolMyUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "formsgraphql-userpool",
              "LambdaConfig": {
                "PostConfirmation": {
                  "Fn::GetAtt": [
                    "PostConfirmationLambdaFunction",
                    "Arn"
                  ]
                }
              },
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "EmailVerificationSubject": "Your Forms.li verification code",
              "EmailVerificationMessage": "{####}",
              "EmailConfiguration": {
                "SourceArn": {
                  "Fn::Sub": "arn:aws:ses:us-east-1:${AWS::AccountId}:identity/no-reply@forms.li"
                }
              },
              "Schema": [
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "tenantId",
                  "Required": false
                },
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "tenantName",
                  "Required": false
                },
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "source",
                  "Required": false
                },
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "group",
                  "Required": false
                },
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "environment",
                  "Required": false
                },
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "stack",
                  "Required": false
                },
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "region",
                  "Required": false
                }
              ]
            },
            "DependsOn": [
              "PostConfirmationLambdaFunction"
            ]
          },
          "PostConfirmationLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePostConfirmation": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostConfirmationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "cognito-idp.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::GetAtt": [
                  "CognitoUserPoolMyUserPool",
                  "Arn"
                ]
              }
            }
          },
          "AppSyncDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "formsgraphql-ap-southeast-2-appsync-iam-role",
              "ManagedPolicyArns": [
                {
                  "Ref": "AppSyncDynamoDBPolicy"
                }
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "AppSyncDynamoDBPolicy"
            ]
          },
          "AppSyncDynamoDBPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "Description": "Allow AWS AppSync to access dynamodb.",
              "Path": "/deepdish/",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:GetItem",
                      "dynamodb:PutItem",
                      "dynamodb:DeleteItem",
                      "dynamodb:UpdateItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:BatchGetItem",
                      "dynamodb:BatchWriteItem"
                    ],
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": "AppDataTable.Arn"
                            },
                            "*"
                          ]
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "AppSyncCloudWatchRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "formsgraphql-ap-southeast-2-appsync-logging-iam-role",
              "ManagedPolicyArns": [
                {
                  "Ref": "AppSyncCloudWatchPolicy"
                }
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "AppSyncCloudWatchPolicy"
            ]
          },
          "AppSyncCloudWatchPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "Description": "Allow AWS AppSync to write logs",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          },
          "AppDataTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "formsgraphql_table_appdata",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "meta",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "type",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "formsgraphql_table_appdata_gsi",
                  "KeySchema": [
                    {
                      "AttributeName": "type",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "meta",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ]
            }
          },
          "FormEntriesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "formsgraphql_table_form_entries",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "meta",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "type",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "formsgraphql_table_form_entries_gsi",
                  "KeySchema": [
                    {
                      "AttributeName": "type",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "meta",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ]
            }
          },
          "AttachmentsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "formsgraphql-dev-data",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "formsgraphql-userpoolclient",
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              },
              "ExplicitAuthFlows": [
                "USER_PASSWORD_AUTH"
              ],
              "GenerateSecret": false,
              "ReadAttributes": [
                "email",
                "given_name",
                "family_name",
                "website",
                "email_verified",
                "email",
                "profile",
                "phone_number",
                "phone_number_verified",
                "custom:tenantId",
                "custom:tenantName",
                "custom:source",
                "custom:environment",
                "custom:stack",
                "custom:region",
                "custom:group"
              ],
              "WriteAttributes": [
                "email",
                "given_name",
                "family_name",
                "phone_number",
                "address",
                "website",
                "profile",
                "locale",
                "custom:group",
                "custom:tenantName",
                "custom:source"
              ]
            }
          },
          "CognitoUserPoolAdminClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "formsgraphql-userpooladminclient",
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              },
              "ExplicitAuthFlows": [
                "ADMIN_NO_SRP_AUTH"
              ],
              "GenerateSecret": false,
              "ReadAttributes": [
                "email",
                "given_name",
                "family_name",
                "website",
                "email_verified",
                "email",
                "profile",
                "phone_number",
                "phone_number_verified",
                "custom:tenantId",
                "custom:tenantName",
                "custom:source",
                "custom:group",
                "custom:environment",
                "custom:stack",
                "custom:region"
              ],
              "WriteAttributes": [
                "custom:tenantId",
                "custom:tenantName",
                "custom:source",
                "custom:environment",
                "custom:stack",
                "custom:region",
                "custom:group"
              ]
            }
          },
          "CognitoAppAdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Application Admin",
              "GroupName": "Admin",
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              }
            }
          },
          "CognitoAccountAdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Account admin",
              "GroupName": "AccountAdmin",
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              }
            }
          },
          "CognitoAccountEditorGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Account editor user",
              "GroupName": "Editor",
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              }
            }
          },
          "CognitoAccountViewerGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Account read only user",
              "GroupName": "Viewer",
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              }
            }
          },
          "CognitoUserPoolAdminUser": {
            "Type": "AWS::Cognito::UserPoolUser",
            "Properties": {
              "Username": "infrastructure.dev@forms.li",
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              },
              "DesiredDeliveryMediums": [
                "EMAIL"
              ],
              "UserAttributes": [
                {
                  "Name": "email",
                  "Value": "infrastructure.dev@forms.li"
                },
                {
                  "Name": "given_name",
                  "Value": "dev Infrastructure"
                },
                {
                  "Name": "family_name",
                  "Value": "Admin"
                },
                {
                  "Name": "email_verified",
                  "Value": true
                },
                {
                  "Name": "custom:group",
                  "Value": "Admin"
                },
                {
                  "Name": "custom:region",
                  "Value": "ap-southeast-2"
                },
                {
                  "Name": "custom:environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "CognitoIdentityPoolMyIdentityPool": {
            "Type": "AWS::Cognito::IdentityPool",
            "Properties": {
              "IdentityPoolName": "formsgraphqlidentitypool",
              "AllowUnauthenticatedIdentities": false,
              "CognitoIdentityProviders": [
                {
                  "ClientId": {
                    "Ref": "CognitoUserPoolClient"
                  },
                  "ProviderName": {
                    "Fn::GetAtt": [
                      "CognitoUserPoolMyUserPool",
                      "ProviderName"
                    ]
                  }
                }
              ]
            }
          },
          "CognitoIdentityPoolRoles": {
            "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
            "Properties": {
              "IdentityPoolId": {
                "Ref": "CognitoIdentityPoolMyIdentityPool"
              },
              "Roles": {
                "authenticated": {
                  "Fn::GetAtt": [
                    "CognitoAuthRole",
                    "Arn"
                  ]
                },
                "unauthenticated": {
                  "Fn::GetAtt": [
                    "CognitoUnAuthorizedRole",
                    "Arn"
                  ]
                }
              }
            }
          },
          "CognitoUnAuthorizedRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "cognito-identity.amazonaws.com"
                    },
                    "Action": [
                      "sts:AssumeRoleWithWebIdentity"
                    ],
                    "Condition": {
                      "StringEquals": {
                        "cognito-identity.amazonaws.com:aud": {
                          "Ref": "CognitoIdentityPoolMyIdentityPool"
                        }
                      },
                      "ForAnyValue:StringLike": {
                        "cognito-identity.amazonaws.com:amr": "unauthenticated"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CognitoUnauthorizedPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "mobileanalytics:PutEvents",
                          "cognito-sync:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CognitoAuthRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "cognito-identity.amazonaws.com"
                    },
                    "Action": [
                      "sts:AssumeRoleWithWebIdentity"
                    ],
                    "Condition": {
                      "StringEquals": {
                        "cognito-identity.amazonaws.com:aud": {
                          "Ref": "CognitoIdentityPoolMyIdentityPool"
                        }
                      },
                      "ForAnyValue:StringLike": {
                        "cognito-identity.amazonaws.com:amr": "authenticated"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "formsgraphql-authorized",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "mobileanalytics:PutEvents",
                          "cognito-sync:*",
                          "cognito-identity:*"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                {
                                  "Fn::GetAtt": [
                                    "AttachmentsBucket",
                                    "Arn"
                                  ]
                                },
                                "/private/",
                                "$",
                                "{cognito-identity.amazonaws.com:sub}/*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "MyApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 10,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "MyCognitoAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:cognito-idp:",
                      {
                        "Fn::Sub": "${AWS::Region}"
                      },
                      ":",
                      {
                        "Fn::Sub": "${AWS::AccountId}"
                      },
                      ":userpool/",
                      {
                        "Ref": "CognitoUserPoolMyUserPool"
                      }
                    ]
                  ]
                }
              ]
            }
          },
          "GraphQlApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "Name": "ai-forms-backend",
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "UserPoolConfig": {
                "AwsRegion": "ap-southeast-2",
                "DefaultAction": "ALLOW",
                "UserPoolId": {
                  "Ref": "CognitoUserPoolMyUserPool"
                }
              },
              "LogConfig": {
                "CloudWatchLogsRoleArn": {
                  "Fn::GetAtt": [
                    "AppSyncCloudWatchRole",
                    "Arn"
                  ]
                },
                "FieldLogLevel": "ALL"
              }
            }
          },
          "GraphQlApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": {
                "Fn::Join": [
                  "/",
                  [
                    "/aws/appsync/apis",
                    {
                      "Fn::GetAtt": [
                        "GraphQlApi",
                        "ApiId"
                      ]
                    }
                  ]
                ]
              }
            }
          },
          "GraphQlSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "Definition": "type AppData @model {\n    id: ID!\n    type: ID!\n    meta: String!\n    itemType: String!\n    owner: ID!\n    createdAt: AWSDateTime!\n    updatedAt: AWSDateTime\n    isDeleted: Boolean\n    version: Int\n}\n\ntype FormEntry @model {\n    id: ID!\n    type: ID!\n    meta: String!\n    createdAt: AWSDateTime!\n}\n\ninput AddFormEntryInput {\n  data: AWSJSON!\n}\n\ntype PaginatedFormEntries {\n  items: [FormEntry!]\n  nextToken: String\n}\n\ntype FormVersion {\n  id: ID!\n  owner: ID!\n  ownedBy: User!\n  createdAt: AWSDateTime\n  notes: String\n  formData: AWSJSON\n}\n\ninput AddFormVersionInput {\n  formId: ID!\n  owner: ID!\n  notes: String\n  formData: AWSJSON!\n}\n\ntype PaginatedFormVersion {\n  items: [FormVersion!]\n  nextToken: String\n}\n\ntype Form @versioned {\n    id: ID!\n    owner: ID!\n    name: String!\n    desc: String!\n    versionId: ID!\n    formData(versionId: ID!): FormVersion!\n    ownedBy: User!\n    accountId: ID!\n    account: Account!\n    createdAt: AWSDateTime!\n    updatedAt: AWSDateTime\n    startsAt: AWSDateTime\n    endsAt: AWSDateTime\n    isPaused: Boolean\n    versions(limit: Int, nextToken: String): PaginatedFormVersion\n    integrations(limit: Int, nextToken: String): PaginatedIntegration\n    entries(limit: Int, nextToken: String): PaginatedFormEntries\n}\n\ninput AddFormInput {\n  name: String!\n  desc: String\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ninput UpdateFormInput  {\n  id: ID!\n  currentVersionId: ID\n  name: String\n  desc: String\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ntype PaginatedForm {\n  items: [Form!]\n  nextToken: String\n}\n\ntype User @versioned {\n  id: ID!\n  owner: ID!\n  accountId: ID!\n  account: Account\n  email: String!\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Boolean\n}\n\ninput UpdateUserInputData {\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\ninput UpdateUserInput {\n  id: ID!\n  data: UpdateUserInputData!\n}\n\ninput AddUserInput {\n  email: String!\n  group: String!\n  accountId: ID!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\ntype PaginatedUser {\n  items: [User!]\n  nextToken: String\n}\n\nenum AddressType {\n  BILLING\n  CONTACT\n}\n\ntype Address @versioned {\n  id: ID!\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\ntype AddAddressInput {\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\ntype PaginatedAddress {\n  items: [Address!]\n  nextToken: String\n}\n\ntype Account @versioned {\n  id: ID!\n  name: String!\n  addresses(limit: Int, nextToken: String): PaginatedAddress\n  website: String\n  taxId: String\n  owner: ID!\n  ownedBy: User!\n  plan : Plan\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  users(limit: Int, nextToken: String): PaginatedUser\n  forms(limit: Int, nextToken: String): PaginatedForm\n}\n\ninput UpdateAccountInput {\n  id: ID!\n  name: String\n  planId: ID\n}\n\ninput AddAccountInput {\n  name: String!\n}\n\ntype PaginatedAccount {\n  items: [Account!]\n  nextToken: String\n}\n\ntype PlanType @versioned {\n  id: ID!\n  owner: ID!\n  ownedBy: User!\n  name: String!\n  cost: Float!\n  active: Boolean!\n  billingTerm: String!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n}\n\ninput AddPlanTypeInput {\n  name: String!\n  cost: Float!\n  billingTerm: String!\n  active: Boolean!\n}\n\ninput UpdatePlanTypeInput {\n  id: ID!\n  name: String!\n  cost: Float!\n  billingTerm: String!\n  active: Boolean!\n}\n\ntype PaginatedPlanType {\n  items: [PlanType!]\n  nextToken: String\n}\n\ntype Plan @versioned {\n  id: ID!\n  accountId: ID!\n  account: Account!\n  owner: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  startDate: AWSDateTime!\n  endDate: AWSDateTime\n  active: Boolean\n  lastBillDate: AWSDateTime\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  planType: PlanType\n}\n\ninput AddPlanInput {\n  accountId: ID!\n  planTypeId: ID!\n  endDate: AWSDateTime\n  active: Boolean\n}\n\ninput UpdatePlanInput {\n  id: ID!\n  endDate: AWSDateTime\n  active: Boolean!\n}\n\ntype PaginatedPlan {\n  items: [Plan!]\n  nextToken: String\n}\n\ntype IntegrationType {\n  id: ID!\n  owner: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  planType: PlanType\n  name: String!\n  active: Boolean!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n}\n\ninput AddIntegrationTypeInput {\n  name: String!\n  active: Boolean\n}\n\ninput UpdateIntegrationTypeInput {\n  id: ID!\n  name: String!\n  active: Boolean\n}\n\ntype PaginatedIntegrationType {\n  items: [IntegrationType!]\n  nextToken: String\n}\n\ntype Integration @versioned {\n  id: ID!\n  integrationTypeId: ID!\n  integrationType: IntegrationType\n  owner: ID!\n  accountId: ID!\n  formId: ID!\n  form: Form!\n  active: Boolean!\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n  lastExecuted: AWSDateTime\n  lastExecutionResult: Boolean\n  lastExecutionResultMessage: String\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n}\n\ninput AddIntegrationInput {\n  integrationTypeId: ID!\n  accountId: ID!\n  formId: ID!\n  active: Boolean\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationTypeInputData {\n  active: Boolean\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationInput {\n  id: ID!\n  active: Boolean\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ntype PaginatedIntegration {\n  items: [Integration!]\n  nextToken: String\n}\n\ntype Query {\n  getAccount(accountId: ID!): Account\n  listAllAccounts(limit: Int, nextToken: String): PaginatedAccount!\n  getUser(userId: ID!): User\n  listAllUsers(limit: Int, nextToken: String) : PaginatedUser!\n  listAllAccountUsers(accountId: String!, limit: Int, nextToken: String): PaginatedUser!\n  listAllAccountUsersActive(accountId: String!, limit: Int, nextToken: String): PaginatedUser!\n  listAccountUsersInGroup(accountId: String!, group: String!, limit: Int, nextToken: String): PaginatedUser!\n\n  getPlan(planId: String!): Plan\n  listAllPlans(limit: Int, nextToken: String): PaginatedPlan!\n  listAllAccountPlans(accountId: String!, limit: Int, nextToken: String): PaginatedPlan!\n  getActiveAccountPlan(accountId: String!): PaginatedPlan!\n  getPlanType(planTypeId: String!): PlanType\n  listAllPlanTypes(limit: Int, nextToken: String): PaginatedPlanType!\n  listAllActivePlanTypes(limit: Int, nextToken: String): PaginatedPlanType!\n\n  getForm(formId: String!, versionId: ID!) : Form!\n  listAllForms(limit: Int, nextToken: String) : PaginatedForm!\n  listAllAccountForms(accountId: String!, limit: Int, nextToken: String) : PaginatedForm!\n  listAllAccountFormsActive(accountId: String!, active: String!, limit: Int, nextToken: String) : PaginatedForm!\n  listAllAccountFormsByUser(accountId: String!, userId: String!, limit: Int, nextToken: String) : PaginatedForm!\n  listAllAccountFormsByUserActive(accountId: String!, userId: String!, active: String!, limit: Int, nextToken: String) : PaginatedForm!\n\n  getIntegrationType(integrationTypeId: String!): IntegrationType\n  listAllIntegrationTypes(limit: Int, nextToken: String): PaginatedIntegrationType!\n  listAllIntegrationTypesByPlanType(planTypeId: String!, limit: Int, nextToken: String): PaginatedIntegrationType!\n  listAllIntegrationTypesByPlanTypeActive(planTypeId: String!, active: String!, limit: Int, nextToken: String): PaginatedIntegrationType!\n\n  getIntegration(integrationId: String!): Integration\n  listAllIntegrations(limit: Int, nextToken: String): PaginatedIntegration!\n  listAllAccountIntegrations(accountId: String!, limit: Int, nextToken: String): PaginatedIntegration!\n  listAllAccountFormIntegrations(accountId: String!, formId: String!, limit: Int, nextToken: String): PaginatedIntegration!\n  listAllAccountFormIntegrationsActive(accountId: String!, formId: String!, active: String!, limit: Int, nextToken: String): PaginatedIntegration!\n\n  getFormEntry(formEntryId: String!): FormEntry\n  listAllFormEntries(formId: String!) : PaginatedFormEntries!\n  listAllFormEntriesByTime(formId: String!, timestampPrefix: String!): PaginatedFormEntries!\n}\n\ntype Mutation {\n  addPlanType(input: AddPlanTypeInput): PlanType!\n  addPlan(input: AddPlanInput): Plan!\n  addAccount(input: AddAccountInput): Account!\n  addUser(input: AddUserInput): User!\n  addIntegrationType(input: AddIntegrationTypeInput): IntegrationType!\n  addIntegration(input: AddIntegrationInput): Integration!\n  addForm(form: AddFormInput!, notes: String!): Form!\n  addFormVersion(version: AddFormVersionInput): FormVersion!\n\n  updatePlanType(input: UpdatePlanTypeInput): PlanType!\n  updatePlan(input: UpdatePlanInput): Plan!\n  updateAccount(input: UpdateAccountInput): Account!\n  updateUser(input: UpdateUserInput): User!\n  updateIntegrationType(input: UpdateIntegrationTypeInput): IntegrationType!\n  updateIntegration(input: UpdateIntegrationInput): Integration!\n  updateForm(input: UpdateFormInput): Form!\n\n  deletePlanType(id: ID!): PlanType!\n  deletePlan(id: ID!): Plan!\n  deleteAccount(id: ID!): Account!\n  deleteUser(id: ID!): User!\n  deleteIntegrationType(id: ID!): IntegrationType!\n  deleteIntegration(id: ID!): Integration!\n  deleteForm(id: ID!): Form!\n\n  addFormEntry(input: AddFormEntryInput!): FormEntry!\n  testPipeline: AWSJSON\n  attachPlan(input: AddPlanInput): Account\n}\n\ntype Schema {\n  query: Query\n  mutation: Mutation\n}",
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              }
            }
          },
          "GraphQlDsAppDataRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "GraphQlDsAppDataPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:UpdateItem",
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                "aws",
                                "dynamodb",
                                "ap-southeast-2",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      "formsgraphql_table_appdata"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                {
                                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlDsAppDataRole\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][0][\"Resource\"][0]"
                                },
                                "*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GraphQlDsFormEntriesRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "GraphQlDsFormEntriesPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:UpdateItem",
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                "aws",
                                "dynamodb",
                                "ap-southeast-2",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      "formsgraphql_table_form_entries"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                {
                                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlDsFormEntriesRole\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][0][\"Resource\"][0]"
                                },
                                "*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GraphQlDsAppData": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "AppData",
              "Description": "App Data Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "GraphQlDsAppDataRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "ap-southeast-2",
                "TableName": "formsgraphql_table_appdata",
                "UseCallerCredentials": false
              }
            }
          },
          "GraphQlDsFormEntries": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "FormEntries",
              "Description": "FormEntries Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "GraphQlDsFormEntriesRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "ap-southeast-2",
                "TableName": "formsgraphql_table_form_entries",
                "UseCallerCredentials": false
              }
            }
          },
          "GraphQlResolverQuerygetUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getUser",
              "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.userId),\n    \"type\" : $util.dynamodb.toDynamoDBJson(\"FORM\")\n  }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetAccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getAccount",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${attribs.accountId}\"},\n        \"type\": {\"S\": \"ACCOUNT\"}\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountplan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "plan",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2017-02-28\",\n    \"operation\": \"Query\",\n    \"index\"    : \"formsgraphql_table_appdata_gsi\",\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"PLAN\"},\n            \":meta\" : {\"S\" : \"${context.source.id}#true\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\"\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if($ctx.result && $ctx.result.items && $ctx.result.items.size() > 0)\n    $util.toJson($ctx.result.items[0])\n#else\n    #return\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverPlanplanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Plan",
              "FieldName": "planType",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.planTypeId}\"},\n        \"type\": {\"S\": \"PLANTYPE\"}\n    }\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if($ctx.result)\n    $util.toJson($ctx.result)\n#else\n    #return\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountownedBy": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "ownedBy",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.owner}\"},\n        \"type\": {\"S\": \"USER\"}\n    }\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if($ctx.result)\n    $util.toJson($ctx.result)\n#else\n    #return\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountforms": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "forms",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2017-02-28\",\n    \"operation\": \"Query\",\n    \"index\"    : \"formsgraphql_table_appdata_gsi\",\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"FORM\"},\n            \":meta\" : {\"S\" : \"${context.source.id}\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n    \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountusers": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "users",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2017-02-28\",\n    \"operation\": \"Query\",\n    \"index\"    : \"formsgraphql_table_appdata_gsi\",\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"USER\"},\n            \":meta\" : {\"S\" : \"${context.source.id}\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n    \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetForm": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getForm",
              "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.formId),\n    \"type\" : $util.dynamodb.toDynamoDBJson(\"FORM\")\n  }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverFormownedBy": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "ownedBy",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.owner}\"},\n        \"type\": {\"S\": \"USER\"}\n    }\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if($ctx.result)\n    $util.toJson($ctx.result)\n#else\n    #return\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverFormaccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "account",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.id}\"},\n        \"type\": {\"S\": \"ACCOUNT\"}\n    }\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if($ctx.result)\n    $util.toJson($ctx.result)\n#else\n    #return\n#end\n",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverFormformData": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "formData",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\": {\n        \"id\"  : {\"S\": \"${context.source.versionId}\"},\n        \"type\": {\"S\": \"FORMVERSION\"}\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverFormversions": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "versions",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2017-02-28\",\n    \"operation\": \"Query\",\n    \"index\"    : \"formsgraphql_table_appdata_gsi\",\n    \"scanIndexForward\" : false,\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"FORMVERSION\"},\n            \":meta\" : {\"S\" : \"${context.source.id}\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"limit\": $util.defaultIfNull(${ctx.args.limit}, 10),\n    \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistAllAccounts": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listAllAccounts",
              "RequestMappingTemplate": "#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n#end\n## Only Admins allowed\n#if (!$isAdmin == true)\n    $utils.unauthorized()\n#end\n#set($attribs = $context.arguments)\n{\n    \"version\"   : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"index\"     : \"formsgraphql_table_appdata_gsi\",\n    \"query\"     : {\n      \"expression\": \"#type = :objectType\",\n      \"expressionNames\" : {\n            \"#type\" : \"type\"\n        },\n      \"expressionValues\" : {\n        \":objectType\" : { \"S\": \"ACCOUNT\" }\n      }\n  },\n  \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistAllForms": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listAllForms",
              "RequestMappingTemplate": "#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n#end\n## Only Admins allowed\n#if (!$isAdmin == true)\n    $utils.unauthorized()\n#end\n#set($attribs = $context.arguments)\n{\n    \"version\"   : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"index\"     : \"formsgraphql_table_appdata_gsi\",\n    \"query\"     : {\n      \"expression\": \"#type = :objectType\",\n      \"expressionNames\" : {\n            \"#type\" : \"type\"\n        },\n      \"expressionValues\" : {\n        \":objectType\" : { \"S\": \"FORM\" }\n      }\n  },\n  \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistAllUsers": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listAllUsers",
              "RequestMappingTemplate": "#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n#end\n## Only Admins allowed\n#if (!$isAdmin == true)\n    $utils.unauthorized()\n#end\n#set($attribs = $context.arguments)\n{\n    \"version\"   : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"index\"     : \"formsgraphql_table_appdata_gsi\",\n    \"query\"     : {\n      \"expression\": \"#type = :objectType\",\n      \"expressionNames\" : {\n            \"#type\" : \"type\"\n        },\n      \"expressionValues\" : {\n        \":objectType\" : { \"S\": \"USER\" }\n      }\n  },\n  \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetPlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getPlan",
              "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.planId),\n    \"type\" : $util.dynamodb.toDynamoDBJson(\"PLAN\")\n  }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetPlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getPlanType",
              "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.planTypeId),\n        \"type\" : {\"S\" : \"PLANTYPE\"}\n  }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistAllAccountForms": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listAllAccountForms",
              "RequestMappingTemplate": "#set($attribs = $context.arguments)\n{\n    \"version\"  : \"2017-02-28\",\n    \"operation\": \"Query\",\n    \"index\"    : \"formsgraphql_table_appdata_gsi\",\n    \"query\"    : {\n        \"expression\" : \"#type = :type AND begins_with(#meta, :meta)\",\n        \"expressionNames\" : {\n            \"#type\" : \"type\",\n            \"#meta\" : \"meta\"\n        },\n        \"expressionValues\": {\n            \":type\" : {\"S\" : \"FORM\"},\n            \":meta\" : {\"S\" : \"${context.source.id}\"}\n        }\n    },\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n    \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddAccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addAccount",
              "RequestMappingTemplate": "#set($id = $util.autoId())\n#set($attribs = $context.arguments.input)\n#set($attribs.owner = $context.identity.sub)\n#set($attribs.itemType = \"ACCOUNT\")\n#set($attribs.isDeleted = false)\n#set($attribs.meta = \"planType#\")\n#set($attribs.createdAt = $util.time.nowISO8601())\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"id\"  : $util.dynamodb.toDynamoDBJson($id),\n        \"type\": {\"S\" : \"ACCOUNT\"}\n    },\n    \"attributeValues\": $util.toJson($util.dynamodb.toMapValues($attribs)),\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#id)\",\n        \"expressionNames\": {\n            \"#id\": \"id\"\n        }\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddPlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addPlanType",
              "RequestMappingTemplate": "#set($id = $util.autoId())\n#set($attribs = $context.arguments.input)\n#set($attribs.meta = \"$context.arguments.input.active\")\n#set($attribs.owner = $context.identity.sub)\n#set($attribs.itemType = \"PLANTYPE\")\n#set($attribs.isDeleted = false)\n#set($attribs.createdAt = $util.time.nowISO8601())\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"id\"  : $util.dynamodb.toDynamoDBJson($id),\n        \"type\": {\"S\" : \"PLANTYPE\"}\n    },\n    \"attributeValues\": $util.toJson($util.dynamodb.toMapValues($attribs)),\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#id)\",\n        \"expressionNames\": {\n            \"#id\": \"id\"\n        }\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddPlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addPlan",
              "RequestMappingTemplate": "#set($id = $util.autoId())\n#set($attribs = $context.arguments.input)\n#set($attribs.meta = \"${context.arguments.input.accountId}#true\")\n#set($attribs.owner = $context.identity.sub)\n#set($attribs.itemType = \"PLAN\")\n#set($attribs.isDeleted = false)\n#set($attribs.createdAt = $util.time.nowISO8601())\n#set($attribs.startDate = $attribs.createdAt)\n#set($attribs.active = true)\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"id\"  : $util.dynamodb.toDynamoDBJson($id),\n        \"type\": {\"S\": \"PLAN\"}\n    },\n    \"attributeValues\": $util.toJson($util.dynamodb.toMapValues($attribs)),\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#id)\",\n        \"expressionNames\": {\n            \"#id\": \"id\",\n        }\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addUser",
              "RequestMappingTemplate": "#set($id = $util.autoId())\n#set($attribs = $context.arguments.input)\n#set($attribs.owner = $context.identity.sub)\n#set($attribs.itemType = \"USER\")\n#set($attribs.meta = \"${context.arguments.input.accountId}#${context.arguments.input.group}\")\n#set($attribs.isDeleted = false)\n#set($attribs.createdAt = $util.time.nowISO8601())\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"id\"  : $util.dynamodb.toDynamoDBJson($id),\n        \"type\": {\"S\" : \"USER\"}\n    },\n    \"attributeValues\": $util.toJson($util.dynamodb.toMapValues($attribs)),\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#id)\",\n        \"expressionNames\": {\n            \"#id\": \"id\"\n        }\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddForm": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addForm",
              "RequestMappingTemplate": "#set($items = [])\n\n#set($userId = $context.identity.sub)\n#set($accountId = $context.identity.claims.get(\"custom:tenantId\"))\n#if(!$accountId)\n    $utils.unauthorized()\n#end\n#set($formId = $util.autoId())\n#set($historyId = $util.autoId())\n#set($timeNow = $util.time.nowISO8601())\n#set($form = {})\n$util.qr($form.put(\"id\", $formId))\n$util.qr($form.put(\"type\", \"FORM\"))\n$util.qr($form.put(\"itemType\", \"FORM\"))\n$util.qr($form.put(\"meta\", \"${accountId}#${userId}\"))\n$util.qr($form.put(\"owner\", $context.identity.sub))\n$util.qr($form.put(\"accountId\", $accountId))\n$util.qr($form.put(\"versionId\", $historyId))\n$util.qr($form.put(\"isDeleted\", false))\n$util.qr($form.put(\"createdAt\", $timeNow))\n$util.qr($form.put(\"name\", $context.arguments.form.name))\n$util.qr($form.put(\"desc\", $context.arguments.form.desc))\n#if($context.arguments.form.startsAt)\n    $util.qr($form.put(\"startsAt\", $context.arguments.form.startsAt))\n#end\n#if($context.arguments.form.endsAt)\n    $util.qr($form.put(\"endsAt\", $context.arguments.form.endsAt))\n#end\n$util.qr($form.put(\"isPaused\", $util.defaultIfNull($context.arguments.form.isPaused, false)))\n\n#set($history = {})\n$util.qr($history.put(\"id\", $historyId))\n$util.qr($history.put(\"type\", \"FORMVERSION\"))\n$util.qr($history.put(\"itemType\", \"FORMVERSION\"))\n$util.qr($history.put(\"owner\", $context.identity.sub))\n$util.qr($history.put(\"createdAt\", $timeNow))\n$util.qr($history.put(\"formData\", $util.defaultIfNull($context.arguments.form.formData, {})))\n$util.qr($history.put(\"meta\", \"${formId}#${timeNow}\"))\n$util.qr($history.put(\"notes\", $context.arguments.notes))\n$util.qr($items.add($util.dynamodb.toMapValues($history)))\n$util.qr($items.add($util.dynamodb.toMapValues($form)))\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"BatchPutItem\",\n    \"tables\" : {\n        \"formsgraphql_table_appdata\": $utils.toJson($items)\n    }\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if($ctx.result && $ctx.result.unprocessedItems.formsgraphql_table_appdata.size() == 0)\n    $util.toJson($ctx.result.data.formsgraphql_table_appdata[1])\n#else\n    #return\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddFormVersion": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addFormVersion",
              "RequestMappingTemplate": "#set($timeNow = $util.time.nowISO8601())\n#set($id = $util.autoId())\n#set($attribs = {})\n#set($attribs.owner = $context.identity.sub)\n#set($attribs.meta = \"${context.arguments.input.formId}#${timeNow}\")\n#set($attribs.itemType = \"FORMVERSION\")\n#set($attribs.isDeleted = false)\n#set($attribs.createdAt = $timeNow)\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"id\"  : $util.dynamodb.toDynamoDBJson($id),\n        \"type\": {\"S\" : \"FORMVERSION\"}\n    },\n    \"attributeValues\": $util.toJson($util.dynamodb.toMapValues($attribs)),\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#id)\",\n        \"expressionNames\": {\n            \"#id\": \"id\"\n        }\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.put(\"tenant\", $context.identity.claims.get(\"custom:tenantId\")))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    $util.qr($ctx.stash.put(\"group\", $group))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($ctx.stash.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($ctx.stash.put(\"isAccountAdmin\", true))\n    #end\n    #if($ctx.result.owner == $context.identity.sub)\n        #set($isRecordOwner = true)\n    #end\n    #if($isAdmin == true ||  $ctx.result.type == \"PLANTYPE\" || $ctx.result.type == \"INTEGRATIONTYPE\")\n        #set($isAllowed = true)\n    #elseif (($ctx.result.accountId == $ctx.stash.tenant) && $isAccountAdmin == true)\n        #set($isAllowed = true)\n    #else\n        #set($isAllowed = $isRecordOwner == true)\n    #end\n    $util.qr($ctx.stash.put(\"recordType\", $ctx.result.type))\n    $util.qr($ctx.stash.put(\"isRecordOwner\", $isRecordOwner))\n    $util.qr($ctx.stash.put(\"authResult\", $isAllowed))\n#end\n## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB\n#if ($isAllowed == true)\n    $util.toJson($ctx.result)\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "PostConfirmationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostConfirmationLambdaVersionQSYYmSf2bnBg5VYO4wlGh0XBBfuLaWAEp6z7FttuR4"
            }
          },
          "SignupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignupLambdaVersiongEHOtNtFNGwQVMEkPpUV8vma3GwA8DaBSX4IjOWOY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.ap-southeast-2.",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "AttachmentsBucketName": {
            "Value": {
              "Ref": "AttachmentsBucket"
            }
          },
          "UserPoolId": {
            "Value": {
              "Ref": "CognitoUserPoolMyUserPool"
            }
          },
          "UserPoolClientId": {
            "Value": {
              "Ref": "CognitoUserPoolClient"
            }
          },
          "AdminUserPoolClientId": {
            "Value": {
              "Ref": "CognitoUserPoolAdminClient"
            }
          },
          "UserPoolAdminUser": {
            "Value": {
              "Ref": "CognitoUserPoolAdminUser"
            }
          },
          "IdentityPoolId": {
            "Value": {
              "Ref": "CognitoIdentityPoolMyIdentityPool"
            }
          },
          "AuthorizerId": {
            "Value": {
              "Ref": "MyApiGatewayAuthorizer"
            }
          },
          "GraphQlApiUrl": {
            "Value": {
              "Fn::GetAtt": [
                "GraphQlApi",
                "GraphQLUrl"
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "output": {
        "file": "outputs/stack.json"
      },
      "packagePath": "./package.json",
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "packager": "npm",
        "includeModules": {
          "forceInclude": [
            "source-map-support"
          ]
        }
      },
      "bucket": "formsgraphql-dev-data",
      "dynamodb": {
        "start": {
          "port": 8000,
          "inMemory": true
        }
      },
      "appsync-offline": {
        "port": 62222,
        "dynamodb": {
          "client": {
            "endpoint": "http://localhost:8000",
            "region": "localhost"
          }
        }
      },
      "appSync": {
        "name": "ai-forms-backend",
        "authenticationType": "AMAZON_COGNITO_USER_POOLS",
        "serviceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncDynamoDBRole",
            "Arn"
          ]
        },
        "userPoolConfig": {
          "awsRegion": "ap-southeast-2",
          "defaultAction": "ALLOW",
          "userPoolId": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlApi\"][\"Properties\"][\"UserPoolConfig\"][\"UserPoolId\"]"
          }
        },
        "logConfig": {
          "loggingRoleArn": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlApi\"][\"Properties\"][\"LogConfig\"][\"CloudWatchLogsRoleArn\"]"
          },
          "level": "ALL"
        },
        "schema": "schema.graphql",
        "dataSources": [
          {
            "type": "AMAZON_DYNAMODB",
            "name": "AppData",
            "description": "App Data Table",
            "config": {
              "tableName": "formsgraphql_table_appdata"
            }
          },
          {
            "type": "AMAZON_DYNAMODB",
            "name": "FormEntries",
            "description": "FormEntries Table",
            "config": {
              "tableName": "formsgraphql_table_form_entries"
            }
          }
        ],
        "mappingTemplatesLocation": "src/mapping-templates",
        "mappingTemplates": [
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getUser",
            "request": "getUser-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getAccount",
            "request": "getAccount-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "plan",
            "request": "getAccountPlan-request.vtl",
            "response": "getAccountPlan-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Plan",
            "field": "planType",
            "request": "getPlanPlanType-request.vtl",
            "response": "getPlanPlanType-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "ownedBy",
            "request": "getOwnedBy-request.vtl",
            "response": "getOwnedBy-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "forms",
            "request": "getAccountForms-request.vtl",
            "response": "getAccountForms-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "users",
            "request": "getAccountUsers-request.vtl",
            "response": "getAccountUsers-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getForm",
            "request": "getForm-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "ownedBy",
            "request": "getOwnedBy-request.vtl",
            "response": "getOwnedBy-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "account",
            "request": "getParentAccount-request.vtl",
            "response": "getParentAccount-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "formData",
            "request": "getFormVersion-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "versions",
            "request": "getFormVersions-request.vtl",
            "response": "passthrough-paginated-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listAllAccounts",
            "request": "listAllAccounts-request.vtl",
            "response": "passthrough-paginated-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listAllForms",
            "request": "listAllForms-request.vtl",
            "response": "passthrough-paginated-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listAllUsers",
            "request": "listAllUsers-request.vtl",
            "response": "passthrough-paginated-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getPlan",
            "request": "getPlan-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getPlanType",
            "request": "getPlanType-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listAllAccountForms",
            "request": "getAccountForms-request.vtl",
            "response": "getAccountForms-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addAccount",
            "request": "addAccount-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addPlanType",
            "request": "addPlanType-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addPlan",
            "request": "addPlan-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addUser",
            "request": "addUser-request.vtl",
            "response": "passthrough-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addForm",
            "request": "addForm-request.vtl",
            "response": "addForm-response.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addFormVersion",
            "request": "addFormVersion-request.vtl",
            "response": "passthrough-response.vtl"
          }
        ]
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-pseudo-parameters",
      "serverless-iam-roles-per-function",
      "serverless-appsync-plugin",
      "serverless-dynamodb-local",
      "@anttiviljami/serverless-stack-output",
      "serverless-appsync-offline",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "postConfirmation": {
        "name": "formsgraphql-postconfirmation",
        "handler": "src/postconfirmation.handle",
        "events": [
          {
            "http": {
              "path": "postconfirm",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "cognitoUserPool": {
              "pool": "MyUserPool",
              "trigger": "PostConfirmation"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/formsgraphql.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "signup": {
        "name": "formsgraphql-invite",
        "handler": "src/invite.handle",
        "events": [
          {
            "http": {
              "path": "invite",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "username",
                  "custom:tenantId",
                  "custom:group"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/formsgraphql.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "AppSyncDynamoDBRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "formsgraphql-ap-southeast-2-appsync-iam-role",
            "ManagedPolicyArns": [
              {
                "Ref": "AppSyncDynamoDBPolicy"
              }
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          },
          "DependsOn": [
            "AppSyncDynamoDBPolicy"
          ]
        },
        "AppSyncDynamoDBPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "Description": "Allow AWS AppSync to access dynamodb.",
            "Path": "/deepdish/",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": "AppDataTable.Arn"
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "AppSyncCloudWatchRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "formsgraphql-ap-southeast-2-appsync-logging-iam-role",
            "ManagedPolicyArns": [
              {
                "Ref": "AppSyncCloudWatchPolicy"
              }
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          },
          "DependsOn": [
            "AppSyncCloudWatchPolicy"
          ]
        },
        "AppSyncCloudWatchPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "Description": "Allow AWS AppSync to write logs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        },
        "AppDataTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "formsgraphql_table_appdata",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "type",
                "AttributeType": "S"
              },
              {
                "AttributeName": "meta",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "type",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "formsgraphql_table_appdata_gsi",
                "KeySchema": [
                  {
                    "AttributeName": "type",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "meta",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            ]
          }
        },
        "FormEntriesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "formsgraphql_table_form_entries",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "type",
                "AttributeType": "S"
              },
              {
                "AttributeName": "meta",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "type",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "formsgraphql_table_form_entries_gsi",
                "KeySchema": [
                  {
                    "AttributeName": "type",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "meta",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            ]
          }
        },
        "AttachmentsBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "formsgraphql-dev-data",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "CognitoUserPoolMyUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "formsgraphql-userpool",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "EmailVerificationSubject": "Your Forms.li verification code",
            "EmailVerificationMessage": "{####}",
            "EmailConfiguration": {
              "SourceArn": "arn:aws:ses:us-east-1:#{AWS::AccountId}:identity/no-reply@forms.li"
            },
            "Schema": [
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "tenantId",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "tenantName",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "source",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "group",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "environment",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "stack",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "region",
                "Required": false
              }
            ]
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "formsgraphql-userpoolclient",
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            },
            "ExplicitAuthFlows": [
              "USER_PASSWORD_AUTH"
            ],
            "GenerateSecret": false,
            "ReadAttributes": [
              "email",
              "given_name",
              "family_name",
              "website",
              "email_verified",
              "email",
              "profile",
              "phone_number",
              "phone_number_verified",
              "custom:tenantId",
              "custom:tenantName",
              "custom:source",
              "custom:environment",
              "custom:stack",
              "custom:region",
              "custom:group"
            ],
            "WriteAttributes": [
              "email",
              "given_name",
              "family_name",
              "phone_number",
              "address",
              "website",
              "profile",
              "locale",
              "custom:group",
              "custom:tenantName",
              "custom:source"
            ]
          }
        },
        "CognitoUserPoolAdminClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "formsgraphql-userpooladminclient",
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            },
            "ExplicitAuthFlows": [
              "ADMIN_NO_SRP_AUTH"
            ],
            "GenerateSecret": false,
            "ReadAttributes": [
              "email",
              "given_name",
              "family_name",
              "website",
              "email_verified",
              "email",
              "profile",
              "phone_number",
              "phone_number_verified",
              "custom:tenantId",
              "custom:tenantName",
              "custom:source",
              "custom:group",
              "custom:environment",
              "custom:stack",
              "custom:region"
            ],
            "WriteAttributes": [
              "custom:tenantId",
              "custom:tenantName",
              "custom:source",
              "custom:environment",
              "custom:stack",
              "custom:region",
              "custom:group"
            ]
          }
        },
        "CognitoAppAdminGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Application Admin",
            "GroupName": "Admin",
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            }
          }
        },
        "CognitoAccountAdminGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Account admin",
            "GroupName": "AccountAdmin",
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            }
          }
        },
        "CognitoAccountEditorGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Account editor user",
            "GroupName": "Editor",
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            }
          }
        },
        "CognitoAccountViewerGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Account read only user",
            "GroupName": "Viewer",
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            }
          }
        },
        "CognitoUserPoolAdminUser": {
          "Type": "AWS::Cognito::UserPoolUser",
          "Properties": {
            "Username": "infrastructure.dev@forms.li",
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            },
            "DesiredDeliveryMediums": [
              "EMAIL"
            ],
            "UserAttributes": [
              {
                "Name": "email",
                "Value": "infrastructure.dev@forms.li"
              },
              {
                "Name": "given_name",
                "Value": "dev Infrastructure"
              },
              {
                "Name": "family_name",
                "Value": "Admin"
              },
              {
                "Name": "email_verified",
                "Value": true
              },
              {
                "Name": "custom:group",
                "Value": "Admin"
              },
              {
                "Name": "custom:region",
                "Value": "ap-southeast-2"
              },
              {
                "Name": "custom:environment",
                "Value": "dev"
              }
            ]
          }
        },
        "CognitoIdentityPoolMyIdentityPool": {
          "Type": "AWS::Cognito::IdentityPool",
          "Properties": {
            "IdentityPoolName": "formsgraphqlidentitypool",
            "AllowUnauthenticatedIdentities": false,
            "CognitoIdentityProviders": [
              {
                "ClientId": {
                  "Ref": "CognitoUserPoolClient"
                },
                "ProviderName": {
                  "Fn::GetAtt": [
                    "CognitoUserPoolMyUserPool",
                    "ProviderName"
                  ]
                }
              }
            ]
          }
        },
        "CognitoIdentityPoolRoles": {
          "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
          "Properties": {
            "IdentityPoolId": {
              "Ref": "CognitoIdentityPoolMyIdentityPool"
            },
            "Roles": {
              "authenticated": {
                "Fn::GetAtt": [
                  "CognitoAuthRole",
                  "Arn"
                ]
              },
              "unauthenticated": {
                "Fn::GetAtt": [
                  "CognitoUnAuthorizedRole",
                  "Arn"
                ]
              }
            }
          }
        },
        "CognitoUnAuthorizedRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "cognito-identity.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRoleWithWebIdentity"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "cognito-identity.amazonaws.com:aud": {
                        "Ref": "CognitoIdentityPoolMyIdentityPool"
                      }
                    },
                    "ForAnyValue:StringLike": {
                      "cognito-identity.amazonaws.com:amr": "unauthenticated"
                    }
                  }
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CognitoUnauthorizedPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "mobileanalytics:PutEvents",
                        "cognito-sync:*"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "CognitoAuthRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "cognito-identity.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRoleWithWebIdentity"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "cognito-identity.amazonaws.com:aud": {
                        "Ref": "CognitoIdentityPoolMyIdentityPool"
                      }
                    },
                    "ForAnyValue:StringLike": {
                      "cognito-identity.amazonaws.com:amr": "authenticated"
                    }
                  }
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "formsgraphql-authorized",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "mobileanalytics:PutEvents",
                        "cognito-sync:*",
                        "cognito-identity:*"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:*"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "AttachmentsBucket",
                                  "Arn"
                                ]
                              },
                              "/private/",
                              "$",
                              "{cognito-identity.amazonaws.com:sub}/*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "MyApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerResultTtlInSeconds": 10,
            "IdentitySource": "method.request.header.Authorization",
            "Name": "MyCognitoAuthorizer",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Type": "COGNITO_USER_POOLS",
            "ProviderARNs": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:cognito-idp:",
                    "#{AWS::Region}",
                    ":",
                    "#{AWS::AccountId}",
                    ":userpool/",
                    {
                      "Ref": "CognitoUserPoolMyUserPool"
                    }
                  ]
                ]
              }
            ]
          }
        }
      },
      "Outputs": {
        "AttachmentsBucketName": {
          "Value": {
            "Ref": "AttachmentsBucket"
          }
        },
        "UserPoolId": {
          "Value": {
            "Ref": "CognitoUserPoolMyUserPool"
          }
        },
        "UserPoolClientId": {
          "Value": {
            "Ref": "CognitoUserPoolClient"
          }
        },
        "AdminUserPoolClientId": {
          "Value": {
            "Ref": "CognitoUserPoolAdminClient"
          }
        },
        "UserPoolAdminUser": {
          "Value": {
            "Ref": "CognitoUserPoolAdminUser"
          }
        },
        "IdentityPoolId": {
          "Value": {
            "Ref": "CognitoIdentityPoolMyIdentityPool"
          }
        },
        "AuthorizerId": {
          "Value": {
            "Ref": "MyApiGatewayAuthorizer"
          }
        }
      }
    },
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/formsgraphql/dev/1553157451218-2019-03-21T08:37:31.218Z",
    "artifact": ""
  }
}