{
  "service": {
    "service": "formsli",
    "serviceObject": {
      "name": "formsli"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs10.x",
      "region": "ap-northeast-1",
      "memorySize": 2048,
      "timeout": 30,
      "logRetentionInDays": 14,
      "tags": {
        "service": "formsli",
        "region": "ap-northeast-1"
      },
      "functions": {
        "postconfirmation": "formsli-dev-postconfirmation",
        "invite": "formsli-dev-invite",
        "formentry": "formsli-dev-form-entry",
        "formrender": "formsli-dev-form"
      },
      "profile": "fl-infrastructure",
      "environment": {
        "region": "ap-northeast-1",
        "rootDomain": "forms.li",
        "appDomain": "app.forms.li",
        "apiDomain": "api.forms.li",
        "staticDomain": "static.forms.li",
        "environment": "dev",
        "serviceName": "formsli",
        "databaseName": "formsli",
        "userPoolId": "ap-northeast-1_Q798Nsl33",
        "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
        "dbClusterId": "fl-rds-cluster-dev",
        "dbClusterArn": "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:fl-rds-cluster-dev",
        "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
        "s3_user_bucket": "fl-dev-userdata.s3.amazonaws.com",
        "s3_app_bucket": "fl-dev-webapp.s3.amazonaws.com",
        "sqs_entry": "formsli-dev-entry-queue",
        "sqs_integration": "formsli-dev-integration-queue",
        "sqs_entry_url": {
          "Ref": "EntryQueue"
        },
        "sqs_integration_url": {
          "Ref": "IntegrationQueue"
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": [
            {
              "Fn::Sub": "arn:aws:secretsmanager:ap-northeast-1:${AWS::AccountId}:secret:/dev/formsli/rds/*"
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds-data:InsertItems",
            "rds-data:GetItems",
            "rds-data:UpdateItems",
            "rds-data:DeleteItems",
            "rds-data:ExecuteSql",
            "rds-data:BatchExecuteStatement",
            "rds-data:BeginTransaction",
            "rds-data:CommitTransaction",
            "rds-data:ExecuteStatement",
            "rds-data:RollbackTransaction"
          ],
          "Resource": [
            {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
            },
            {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev:*"
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:AdminAddUserToGroup",
            "cognito-idp:AdminUpdateUserAttributes",
            "cognito-idp:AdminRemoveUserFromGroup",
            "cognito-idp:AdminGetUser",
            "cognito-idp:AdminCreateUser"
          ],
          "Resource": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ses:SendEmail",
            "ses:SendRawEmail"
          ],
          "Resource": {
            "Fn::Sub": "arn:aws:ses:us-east-1:${AWS::AccountId}:*"
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:RecieveMessage",
            "sqs:SendMessage"
          ],
          "Resource": {
            "Fn::Sub": "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:ListQueues"
          ],
          "Resource": {
            "Fn::Sub": "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
          }
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "FormJsonLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/formsli-dev-formJson",
              "RetentionInDays": 14
            }
          },
          "FormEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/formsli-dev-form-entry",
              "RetentionInDays": 14
            }
          },
          "FormViewLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/formsli-dev-formView",
              "RetentionInDays": 14
            }
          },
          "PostConfirmationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/formsli-dev-postconfirmation",
              "RetentionInDays": 14
            }
          },
          "SignupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/formsli-dev-invite",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "formsli",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formsli-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][4]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][5]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "formsli",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "FormJsonLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsli/dev/1568590353414-2019-09-15T23:32:33.414Z/formsli.zip"
              },
              "FunctionName": "formsli-dev-formJson",
              "Handler": "src/form.handle",
              "MemorySize": 2048,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "formsli"
                },
                {
                  "Key": "region",
                  "Value": "ap-northeast-1"
                }
              ],
              "Environment": {
                "Variables": {
                  "region": "ap-northeast-1",
                  "rootDomain": "forms.li",
                  "appDomain": "app.forms.li",
                  "apiDomain": "api.forms.li",
                  "staticDomain": "static.forms.li",
                  "environment": "dev",
                  "serviceName": "formsli",
                  "databaseName": "formsli",
                  "userPoolId": "ap-northeast-1_Q798Nsl33",
                  "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
                  "dbClusterId": "fl-rds-cluster-dev",
                  "dbClusterArn": {
                    "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                  },
                  "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
                  "s3_user_bucket": "fl-dev-userdata.s3.amazonaws.com",
                  "s3_app_bucket": "fl-dev-webapp.s3.amazonaws.com",
                  "sqs_entry": "formsli-dev-entry-queue",
                  "sqs_integration": "formsli-dev-integration-queue",
                  "sqs_entry_url": {
                    "Ref": "EntryQueue"
                  },
                  "sqs_integration_url": {
                    "Ref": "IntegrationQueue"
                  }
                }
              }
            },
            "DependsOn": [
              "FormJsonLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "FormJsonLambdaVersionkrMEKfKSVVU6cWlAWqaKvtBC1qpLp7Ict5gqVg9tMmA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FormJsonLambdaFunction"
              },
              "CodeSha256": "bYNoVtZJ9/eMI+StVnFJyPnnNa1XPVhXtmNwobfzN6w="
            }
          },
          "FormEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsli/dev/1568590353414-2019-09-15T23:32:33.414Z/formsli.zip"
              },
              "FunctionName": "formsli-dev-form-entry",
              "Handler": "src/formentry.handle",
              "MemorySize": 2048,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "formsli"
                },
                {
                  "Key": "region",
                  "Value": "ap-northeast-1"
                }
              ],
              "Environment": {
                "Variables": {
                  "region": "ap-northeast-1",
                  "rootDomain": "forms.li",
                  "appDomain": "app.forms.li",
                  "apiDomain": "api.forms.li",
                  "staticDomain": "static.forms.li",
                  "environment": "dev",
                  "serviceName": "formsli",
                  "databaseName": "formsli",
                  "userPoolId": "ap-northeast-1_Q798Nsl33",
                  "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
                  "dbClusterId": "fl-rds-cluster-dev",
                  "dbClusterArn": {
                    "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                  },
                  "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
                  "s3_user_bucket": "fl-dev-userdata.s3.amazonaws.com",
                  "s3_app_bucket": "fl-dev-webapp.s3.amazonaws.com",
                  "sqs_entry": "formsli-dev-entry-queue",
                  "sqs_integration": "formsli-dev-integration-queue",
                  "sqs_entry_url": {
                    "Ref": "EntryQueue"
                  },
                  "sqs_integration_url": {
                    "Ref": "IntegrationQueue"
                  }
                }
              }
            },
            "DependsOn": [
              "FormEntryLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "FormEntryLambdaVersionGKELoeaAnHON7RkExUb80CIou2mUTSrIL0vrhTIGxVI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FormEntryLambdaFunction"
              },
              "CodeSha256": "bYNoVtZJ9/eMI+StVnFJyPnnNa1XPVhXtmNwobfzN6w="
            }
          },
          "FormViewLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsli/dev/1568590353414-2019-09-15T23:32:33.414Z/formsli.zip"
              },
              "FunctionName": "formsli-dev-formView",
              "Handler": "src/formview.handle",
              "MemorySize": 2048,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "formsli"
                },
                {
                  "Key": "region",
                  "Value": "ap-northeast-1"
                }
              ],
              "Environment": {
                "Variables": {
                  "region": "ap-northeast-1",
                  "rootDomain": "forms.li",
                  "appDomain": "app.forms.li",
                  "apiDomain": "api.forms.li",
                  "staticDomain": "static.forms.li",
                  "environment": "dev",
                  "serviceName": "formsli",
                  "databaseName": "formsli",
                  "userPoolId": "ap-northeast-1_Q798Nsl33",
                  "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
                  "dbClusterId": "fl-rds-cluster-dev",
                  "dbClusterArn": {
                    "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                  },
                  "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
                  "s3_user_bucket": "fl-dev-userdata.s3.amazonaws.com",
                  "s3_app_bucket": "fl-dev-webapp.s3.amazonaws.com",
                  "sqs_entry": "formsli-dev-entry-queue",
                  "sqs_integration": "formsli-dev-integration-queue",
                  "sqs_entry_url": {
                    "Ref": "EntryQueue"
                  },
                  "sqs_integration_url": {
                    "Ref": "IntegrationQueue"
                  }
                }
              }
            },
            "DependsOn": [
              "FormViewLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "FormViewLambdaVersionFqqwoTqzwULjjlf16FiIcw24nxX7BsKVEUExbAM9TI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FormViewLambdaFunction"
              },
              "CodeSha256": "bYNoVtZJ9/eMI+StVnFJyPnnNa1XPVhXtmNwobfzN6w="
            }
          },
          "PostConfirmationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsli/dev/1568590353414-2019-09-15T23:32:33.414Z/formsli.zip"
              },
              "FunctionName": "formsli-dev-postconfirmation",
              "Handler": "src/postconfirmation.handle",
              "MemorySize": 2048,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "formsli"
                },
                {
                  "Key": "region",
                  "Value": "ap-northeast-1"
                }
              ],
              "Environment": {
                "Variables": {
                  "region": "ap-northeast-1",
                  "rootDomain": "forms.li",
                  "appDomain": "app.forms.li",
                  "apiDomain": "api.forms.li",
                  "staticDomain": "static.forms.li",
                  "environment": "dev",
                  "serviceName": "formsli",
                  "databaseName": "formsli",
                  "userPoolId": "ap-northeast-1_Q798Nsl33",
                  "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
                  "dbClusterId": "fl-rds-cluster-dev",
                  "dbClusterArn": {
                    "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                  },
                  "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
                  "s3_user_bucket": "fl-dev-userdata.s3.amazonaws.com",
                  "s3_app_bucket": "fl-dev-webapp.s3.amazonaws.com",
                  "sqs_entry": "formsli-dev-entry-queue",
                  "sqs_integration": "formsli-dev-integration-queue",
                  "sqs_entry_url": {
                    "Ref": "EntryQueue"
                  },
                  "sqs_integration_url": {
                    "Ref": "IntegrationQueue"
                  }
                }
              }
            },
            "DependsOn": [
              "PostConfirmationLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PostConfirmationLambdaVersiontXRhYQK4pUoE1wCjJH2osC6JxU300HiSUBidgOQ5UA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostConfirmationLambdaFunction"
              },
              "CodeSha256": "bYNoVtZJ9/eMI+StVnFJyPnnNa1XPVhXtmNwobfzN6w="
            }
          },
          "SignupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsli/dev/1568590353414-2019-09-15T23:32:33.414Z/formsli.zip"
              },
              "FunctionName": "formsli-dev-invite",
              "Handler": "src/invite.handle",
              "MemorySize": 2048,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 30,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "formsli"
                },
                {
                  "Key": "region",
                  "Value": "ap-northeast-1"
                }
              ],
              "Environment": {
                "Variables": {
                  "region": "ap-northeast-1",
                  "rootDomain": "forms.li",
                  "appDomain": "app.forms.li",
                  "apiDomain": "api.forms.li",
                  "staticDomain": "static.forms.li",
                  "environment": "dev",
                  "serviceName": "formsli",
                  "databaseName": "formsli",
                  "userPoolId": "ap-northeast-1_Q798Nsl33",
                  "userPoolArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
                  "dbClusterId": "fl-rds-cluster-dev",
                  "dbClusterArn": {
                    "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                  },
                  "dbClusterSecretArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
                  "s3_user_bucket": "fl-dev-userdata.s3.amazonaws.com",
                  "s3_app_bucket": "fl-dev-webapp.s3.amazonaws.com",
                  "sqs_entry": "formsli-dev-entry-queue",
                  "sqs_integration": "formsli-dev-integration-queue",
                  "sqs_entry_url": {
                    "Ref": "EntryQueue"
                  },
                  "sqs_integration_url": {
                    "Ref": "IntegrationQueue"
                  }
                }
              }
            },
            "DependsOn": [
              "SignupLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "SignupLambdaVersionNPCgN7OkjxFdp92X9wwQySIXocsk2cqe7tzFUP3z0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignupLambdaFunction"
              },
              "CodeSha256": "bYNoVtZJ9/eMI+StVnFJyPnnNa1XPVhXtmNwobfzN6w="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-formsli",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceForm": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "form",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFormJson": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceForm"
              },
              "PathPart": "json",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFormJsonFormidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFormJson"
              },
              "PathPart": "{formId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFormEntry": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceForm"
              },
              "PathPart": "entry",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFormEntryFormidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFormEntry"
              },
              "PathPart": "{formId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFormView": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceForm"
              },
              "PathPart": "view",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFormViewFormidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFormView"
              },
              "PathPart": "{formId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostconfirm": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "postconfirm",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceInvite": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "invite",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFormJsonFormidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFormJsonFormidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFormEntryFormidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFormEntryFormidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFormViewFormidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFormViewFormidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostconfirmOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostconfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodInviteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFormJsonFormidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFormJsonFormidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FormJsonLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFormEntryFormidVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFormEntryFormidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FormEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFormViewFormidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFormViewFormidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FormViewLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostconfirmPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostconfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostConfirmationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodInvitePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1568590330096": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodFormJsonFormidVarOptions",
              "ApiGatewayMethodFormEntryFormidVarOptions",
              "ApiGatewayMethodFormViewFormidVarOptions",
              "ApiGatewayMethodPostconfirmOptions",
              "ApiGatewayMethodInviteOptions",
              "ApiGatewayMethodFormJsonFormidVarGet",
              "ApiGatewayMethodFormEntryFormidVarPost",
              "ApiGatewayMethodFormViewFormidVarGet",
              "ApiGatewayMethodPostconfirmPost",
              "ApiGatewayMethodInvitePost"
            ]
          },
          "FormJsonLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FormJsonLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FormEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FormEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FormViewLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FormViewLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostConfirmationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostConfirmationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostConfirmationCustomCognitoUserPool1": {
            "Type": "Custom::CognitoUserPool",
            "Version": 1,
            "DependsOn": [
              "PostConfirmationLambdaFunction",
              "CustomDashresourceDashexistingDashcupLambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashcupLambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "formsli-dev-postconfirmation",
              "UserPoolName": "fl-dev-userpool",
              "UserPoolConfigs": [
                {
                  "Trigger": "PostConfirmation"
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashcupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/formsli/dev/1568590353414-2019-09-15T23:32:33.414Z/custom-resources.zip"
              },
              "FunctionName": "formsli-dev-custom-resource-existing-cup",
              "Handler": "cognitoUserPool/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 180
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "formsli",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": "*",
                        "Action": [
                          "cognito-idp:ListUserPools",
                          "cognito-idp:DescribeUserPool",
                          "cognito-idp:UpdateUserPool"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": "arn:aws:lambda:*:*:function:formsli-dev-postconfirmation",
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AppSyncRDSRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "formsli-ap-northeast-1-appsync-iam-role",
              "ManagedPolicyArns": [
                {
                  "Ref": "AppSyncRDSPolicy"
                }
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "AppSyncRDSPolicy"
            ]
          },
          "AppSyncRDSPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "Description": "Allow AWS AppSync to access RDS.",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "rds-data:InsertItems",
                      "rds-data:GetItems",
                      "rds-data:UpdateItems",
                      "rds-data:DeleteItems",
                      "rds-data:ExecuteSql",
                      "rds-data:BatchExecuteStatement",
                      "rds-data:BeginTransaction",
                      "rds-data:CommitTransaction",
                      "rds-data:ExecuteStatement",
                      "rds-data:RollbackTransaction",
                      "tag:GetResources"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
                      },
                      {
                        "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev:*"
                      }
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "secretsmanager:GetSecretValue",
                      "secretsmanager:CreateSecret",
                      "secretsmanager:ListSecrets",
                      "secretsmanager:GetRandomPassword"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/dev/formsli/rds/*"
                      }
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": "tag:GetResources",
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "AppSyncCloudWatchRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "formsli-ap-northeast-1-appsync-logging-iam-role",
              "ManagedPolicyArns": [
                {
                  "Ref": "AppSyncCloudWatchPolicy"
                }
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "AppSyncCloudWatchPolicy"
            ]
          },
          "AppSyncCloudWatchPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "Description": "Allow AWS AppSync to write logs",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          },
          "MyApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 10,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "MyCognitoAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33"
              ]
            }
          },
          "PostConfirmationTriggerInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": "PostConfirmationLambdaFunction",
            "Properties": {
              "Action": "lambda:InvokeFunction",
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
              "FunctionName": "formsli-dev-postconfirmation"
            }
          },
          "CognitoUserPoolAdminUser": {
            "Type": "AWS::Cognito::UserPoolUser",
            "Properties": {
              "Username": "infrastructure.dev@forms.li",
              "UserPoolId": "ap-northeast-1_Q798Nsl33",
              "DesiredDeliveryMediums": [
                "EMAIL"
              ],
              "UserAttributes": [
                {
                  "Name": "email",
                  "Value": "infrastructure.dev@forms.li"
                },
                {
                  "Name": "given_name",
                  "Value": "dev Infrastructure"
                },
                {
                  "Name": "family_name",
                  "Value": "Admin"
                },
                {
                  "Name": "email_verified",
                  "Value": true
                },
                {
                  "Name": "custom:group",
                  "Value": "Admin"
                },
                {
                  "Name": "custom:region",
                  "Value": "ap-northeast-1"
                },
                {
                  "Name": "custom:environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "EntryQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "formsli-dev-entry-queue"
            }
          },
          "IntegrationQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "formsli-dev-integration-queue"
            }
          },
          "GraphQlApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "Name": "formsli-api-dev",
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "AdditionalAuthenticationProviders": [],
              "UserPoolConfig": {
                "AwsRegion": "ap-northeast-1",
                "UserPoolId": "ap-northeast-1_Q798Nsl33",
                "DefaultAction": "ALLOW"
              },
              "LogConfig": {
                "CloudWatchLogsRoleArn": {
                  "Fn::GetAtt": [
                    "AppSyncCloudWatchRole",
                    "Arn"
                  ]
                },
                "FieldLogLevel": "ALL"
              }
            }
          },
          "GraphQlApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": {
                "Fn::Join": [
                  "/",
                  [
                    "/aws/appsync/apis",
                    {
                      "Fn::GetAtt": [
                        "GraphQlApi",
                        "ApiId"
                      ]
                    }
                  ]
                ]
              },
              "RetentionInDays": 14
            }
          },
          "GraphQlSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "Definition": "enum FilterWith {\n  AND\n  OR\n}\n\nenum NumericFilterExpression {\n  in\n  ne\n  eq\n  le\n  lt\n  ge\n  gt\n  between\n  notBetween\n  isNull\n  isNotNull\n}\n\nenum BooleanFilterExpression {\n  ne\n  eq\n}\n\nenum StringFilterExpression {\n  ne\n  eq\n  contains\n  notContains\n  startsWith\n  isNull\n  isNotNull\n  in\n}\n\ninput DateFilter {\n  with  : FilterWith\n  expression: NumericFilterExpression!\n  value: [AWSDateTime!]\n}\n\ninput BooleanFilter {\n  with  : FilterWith\n  expression: BooleanFilterExpression!\n  value: [Boolean!]\n}\n\ninput FloatFilter {\n  with  : FilterWith\n  expression: NumericFilterExpression!\n  value: [Float!]\n}\n\n\ninput IntFilter {\n  with  : FilterWith\n  expression: NumericFilterExpression!\n  value: [Int!]\n}\n\ninput StringFilter {\n  with  : FilterWith\n  expression: StringFilterExpression!\n  value: [String!]\n}\n\ninput AccountFilterInput {\n  name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  planId: StringFilter\n  active: IntFilter\n  criteria: [AccountFilterInput!]\n}\n\nenum SortOrder { asc desc }\n\ninput AccountSortInput {\n  name: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  planId: SortOrder\n  sortBy: [AccountSortInput!]\n}\n\ninput UserFilterInput {\n  accountId: StringFilter\n  ownerId: StringFilter\n  email: StringFilter\n  userGroup: StringFilter\n  given_name: StringFilter\n  family_name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  isDeleted: IntFilter\n  criteria: [UserFilterInput!]\n}\n\ninput UserSortInput {\n  accountId: SortOrder\n  email: SortOrder\n  given_name: SortOrder\n  family_name: SortOrder\n  userGroup: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  sortBy: [UserSortInput!]\n}\n\ninput PlanTypeFilterInput {\n  ownerId: StringFilter\n  cost: FloatFilter\n  billingTerm: StringFilter\n  name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  isDeleted: IntFilter\n  criteria: [PlanTypeFilterInput!]\n}\n\ninput PlanTypeSortInput {\n  name: SortOrder\n  billingTerm: SortOrder\n  cost: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  sortBy: [PlanTypeSortInput!]\n}\n\ninput IntegrationTypeFilterInput {\n  ownerId: StringFilter\n  planTypeId: StringFilter\n  name: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  active: IntFilter\n  criteria: [IntegrationTypeFilterInput!]\n}\n\ninput IntegrationTypeSortInput {\n  name: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  sortBy: [IntegrationTypeSortInput!]\n}\n\ninput IntegrationFilterInput {\n  ownerId: StringFilter\n  accountId: StringFilter\n  formId: StringFilter\n  active: IntFilter\n  isDeleted: IntFilter\n  lastExecuted: DateFilter\n  lastExecutionResult: IntFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  criteria: [IntegrationFilterInput!]\n}\n\ninput IntegrationSortInput {\n  lastExecuted: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  sortBy: [IntegrationSortInput!]\n}\n\ninput FormFilterInput {\n  name: StringFilter\n  ownerId: StringFilter\n  accountId: StringFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  startsAt: DateFilter\n  endsAt: DateFilter\n  isPaused: IntFilter\n  isDeleted: IntFilter\n  criteria: [FormFilterInput!]\n}\n\ninput FormSortInput {\n  name: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  startsAt: SortOrder\n  endsAt: SortOrder\n  sortBy: [FormSortInput!]\n}\n\ninput PlanFilterInput {\n  accountId: StringFilter\n  ownerId: StringFilter\n  planTypeId: StringFilter\n  lastBillDate: DateFilter\n  createdAt: DateFilter\n  updatedAt: DateFilter\n  startDate: DateFilter\n  endDate: DateFilter\n  criteria: [PlanFilterInput!]\n}\n\ninput PlanSortInput {\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  lastBillDate: SortOrder\n  startDate: SortOrder\n  endDate: SortOrder\n  sortBy: [PlanSortInput!]\n}\n\ntype FormEntry @model {\n  id: ID!\n  formId: ID!\n  form: Form!\n  data: AWSJSON!\n  createdAt: AWSDateTime!\n}\n\ninput AddFormEntryInput {\n  data: AWSJSON!\n}\n\ntype FormVersion @model {\n  id: ID!\n  accountId: ID!\n  formId: ID!\n  ownerId: ID!\n  ownedBy: User!\n  createdAt: AWSDateTime\n  notes: String\n  formData: AWSJSON!\n}\n\ninput FormVersionFilterInput {\n  accountId: StringFilter\n  formId: StringFilter\n  ownerId: StringFilter\n  createdAt: DateFilter\n  criteria: [FormVersionFilterInput!]\n}\n\ninput FormVersionSortInput {\n  createdAt: SortOrder\n  sortBy: [FormVersionSortInput!]\n}\n\ninput AddFormVersionInput {\n  accountId: ID!\n  formId: ID!\n  notes: String\n  formData: AWSJSON!\n}\n\ntype Form @model  {\n  id: ID!\n  ownerId: ID!\n  name: String!\n  description: String!\n  versionId: ID\n  version: FormVersion\n  ownedBy: User!\n  accountId: ID!\n  account: Account!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime\n  startDate: AWSDateTime\n  endDate  : AWSDateTime\n  isPaused : Boolean\n  isDeleted: Boolean\n  redirectNotStarted: AWSURL\n  redirectHasEnded : AWSURL\n  versions(limit: Int): [FormVersion]\n  integrations(limit: Int): [Integration]\n  entries(limit: Int): [FormEntry]\n}\n\n\ninput AddFormInput {\n  accountId: ID!\n  name: String!\n  description: String!\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ninput UpdateFormInput {\n  id: ID!\n  currentVersionId: ID\n  name: String\n  description: String\n  startsAt: AWSDateTime\n  endsAt: AWSDateTime\n  isPaused: Boolean\n}\n\ninput DeleteFormInput {\n  id: ID!\n  accountId: ID!\n}\n\ntype User @model {\n  id: ID!\n  ownerId: ID\n  ownedBy: User\n  accountId: ID\n  account: Account\n  email: String!\n  userGroup: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Int\n  numForms: Int\n}\n\n\ninput UpdateUserInputData {\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\ninput UpdateUserInput {\n  id: ID!\n  data: UpdateUserInputData!\n}\n\nenum AddressType {\n  BILLING\n  CONTACT\n}\n\ntype Address @model {\n  id: ID!\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\ntype AddAddressInput {\n  name: String!\n  addressee: String\n  addressType: AddressType!\n  phone_number: AWSPhone\n  email: String!\n  street: String\n  city: String\n  state: String\n  country: String\n}\n\ntype Account @model {\n  id: ID!\n  name: String!\n  addresses(limit: Int): [Address]\n  website: String\n  taxId: String\n  ownerId: ID!\n  ownedBy: User!\n  plan : Plan\n  planId: ID\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  active: Int\n  numForms: Int\n  numUsers: Int\n  users(limit: Int): [User]\n  forms(limit: Int): [Form]\n}\n\ninput UpdateAccountInput {\n  id: ID!\n  name: String\n}\ntype PlanType @model {\n  id: ID!\n  ownerId: ID!\n  ownedBy: User!\n  name: String!\n  cost: Float!\n  active: Int!\n  billingTerm: String!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Int\n}\n\ninput AddPlanTypeInput {\n  name: String!\n  cost: Float!\n  billingTerm: String!\n  active: Int!\n}\n\ninput UpdatePlanTypeInput {\n  id: ID!\n  name: String\n  cost: Float\n  billingTerm: String\n  active: Int\n}\n\ntype Plan @model {\n  id: ID!\n  accountId: ID!\n  account: Account!\n  ownerId: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  startDate: AWSDateTime!\n  endDate: AWSDateTime\n  active: Int\n  lastBillDate: AWSDateTime\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  planType: PlanType\n  isDeleted: Int\n}\n\ninput AddPlanInput {\n  accountId: ID!\n  planTypeId: ID!\n  endDate: AWSDateTime\n  active: Int\n}\n\ninput UpdatePlanInput {\n  planId: ID!\n  accountId: ID!\n  active: Int!\n  endDate: AWSDateTime\n}\n\ntype IntegrationType @model {\n  id: ID!\n  ownerId: ID!\n  ownedBy: User!\n  planTypeId: ID!\n  planType: PlanType\n  name: String!\n  active: Int!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n}\n\n\ninput AddIntegrationTypeInput {\n  name: String!\n  active: Int\n}\n\ninput UpdateIntegrationTypeInput {\n  id: ID!\n  name: String!\n  active: Int\n}\n\ntype Integration @model {\n  id: ID!\n  integrationTypeId: ID!\n  integrationType: IntegrationType\n  ownerId: ID!\n  accountId: ID!\n  formId: ID!\n  form: Form!\n  active: Int!\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n  lastExecuted: AWSDateTime\n  lastExecutionResult: Int\n  lastExecutionResultMessage: String\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  isDeleted: Int\n}\n\n\ninput AddIntegrationInput {\n  integrationTypeId: ID!\n  accountId: ID!\n  formId: ID!\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationTypeInputData {\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationInput {\n  id: ID!\n  active: Int\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput OffsetLimit {\n  offset: Int\n  limit: Int\n}\n\ntype Query {\n  getAccount(accountId: ID!): Account\n  getUser(userId: ID!): User\n  getPlan(planId: String!): Plan\n  getActiveAccountPlan(accountId: String!): Plan\n  getPlanType(planTypeId: String!): PlanType\n  getForm(formId: String!) : Form\n  getFormVersion(versionId: String!) : FormVersion\n  getIntegrationType(integrationTypeId: String!): IntegrationType\n  getIntegration(integrationId: String!): Integration\n  getFormEntry(formEntryId: String!): FormEntry\n  listAccounts(offsetLimit: OffsetLimit, filter: AccountFilterInput, sort: AccountSortInput): [Account]\n  listUsers(offsetLimit: OffsetLimit, filter: UserFilterInput, sort: UserSortInput) : [User]\n  listPlans(offsetLimit: OffsetLimit, filter: PlanFilterInput, sort: PlanSortInput): [Plan]\n  listPlanTypes(offsetLimit: OffsetLimit, filter: PlanTypeFilterInput, sort: PlanTypeSortInput): [PlanType]\n  listForms(offsetLimit: OffsetLimit, filter: FormFilterInput, sort: FormSortInput) : [Form]\n  listFormVersions(offsetLimit: OffsetLimit, filter: FormVersionFilterInput, sort: FormVersionSortInput) : [FormVersion]\n  listIntegrationTypes(offsetLimit: OffsetLimit, filter: IntegrationTypeFilterInput, sort: IntegrationTypeSortInput): [IntegrationType]\n  listIntegrations(offsetLimit: OffsetLimit, filter: IntegrationFilterInput, sort: IntegrationSortInput): [Integration]\n  listFormEntries(offsetLimit: OffsetLimit, formId: String!) : [FormEntry]\n  listFormEntriesByTime(offsetLimit: OffsetLimit, formId: String!, timestampPrefix: String!): [FormEntry]\n}\n\ntype Mutation {\n  addPlanType(input: AddPlanTypeInput): PlanType!\n  addPlan(input: AddPlanInput): Plan!\n  addIntegrationType(input: AddIntegrationTypeInput): IntegrationType!\n  addIntegration(input: AddIntegrationInput): Integration!\n  addForm(input: AddFormInput!): Form!\n  addFormVersion(input: AddFormVersionInput): Form!\n\n  updatePlanType(input: UpdatePlanTypeInput): PlanType!\n  updatePlan(input: UpdatePlanInput): Plan!\n  updateAccount(input: UpdateAccountInput): Account!\n  updateAccountPlan(input: AddPlanInput): Account!\n  updateUser(input: UpdateUserInput): User!\n  updateIntegrationType(input: UpdateIntegrationTypeInput): IntegrationType!\n  updateIntegration(input: UpdateIntegrationInput): Integration!\n  updateForm(input: UpdateFormInput): Form!\n\n  deleteForm(input: DeleteFormInput): Form!\n  deletePlanType(planTypeId: ID!): PlanType!\n  deletePlan(accountId: ID!, planId: ID!): Plan!\n  deleteAccount(accountId: ID!): Account!\n  deleteUser(userId: ID!): User!\n  deleteIntegrationType(integrationTypeId: ID!): IntegrationType!\n  deleteIntegration(integrationId: ID!): Integration!\n\n  addFormEntry(input: AddFormEntryInput!): FormEntry!\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n",
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              }
            }
          },
          "GraphQlDsAppData": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "AppData",
              "Description": "RDS source for formsli",
              "Type": "RELATIONAL_DATABASE",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "AppSyncRDSRole",
                  "Arn"
                ]
              },
              "RelationalDatabaseConfig": {
                "RdsHttpEndpointConfig": {
                  "AwsRegion": "ap-northeast-1",
                  "DbClusterIdentifier": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        "aws",
                        "rds",
                        "ap-northeast-1",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "cluster",
                        "fl-rds-cluster-dev"
                      ]
                    ]
                  },
                  "DatabaseName": "formsli",
                  "AwsSecretStoreArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX"
                },
                "RelationalDatabaseSourceType": "RDS_HTTP_ENDPOINT"
              }
            }
          },
          "GraphQlFunctionConfigurationFNparseFilter": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNparseFilter",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Common_FN_parseFilter_REQ.vtl\"))\n#set($args=$ctx.arguments)\n#set($identity=$ctx.stash.identity)\n#set($expmap = {\n  \"ne\" : \"!=\",\n  \"eq\" : \"=\",\n  \"le\" : \"<=\",\n  \"lt\" : \"<\",\n  \"ge\" : \">=\",\n  \"gt\" : \">\"\n})\n\n#if($args.sort && $args.sort.sortBy)\n    #set($sort = \"\")\n    #foreach($sortBy in $args.sort.sortBy)\n        #foreach($col in $sortBy.keySet())\n            #set($order=$sortBy[$col])\n            #set($clause=\"${col} ${order}\")\n            #set($suffix=\"\")\n            #if($foreach.hasNext)\n                #set($suffix=\",\")\n            #end\n            #set($sort=\"${sort} ${clause}${suffix}\")\n        #end\n    #end\n    #set($sort = \"ORDER BY ${sort}\")\n#end\n$util.qr($ctx.stash.put(\"sortExpression\", $sort))\n\n#if($args.filter && $args.filter.criteria)\n    #set($filter = \"\")\n    #foreach($criteria in $args.filter.criteria)\n        #foreach($col in $criteria.keySet())\n            #set($entry=$criteria[$col])\n            #set($values=$entry.value)\n            #if($col == \"accountId\" && !$identity.isAdmin)\n                $values.set(0, $identity.tenantId)\n            #end\n            #set($with=\"\")\n            #set($clause=\"\")\n            #if($foreach.hasNext)\n                #set($with=$entry.with)\n            #end\n            #if($entry.expression == 'contains')\n                #set($clause=\"${col} LIKE '%${values[0]}%' ${with}\")\n            #elseif($entry.expression == 'notContains')\n                #set($clause=\"${col} NOT LIKE '%${values[0]}%' ${with}\")\n            #elseif($entry.expression == 'startsWith')\n                #set($clause=\"${col} LIKE '${values[0]}%' ${with}\")\n            #elseif($entry.expression == 'between')\n                #set($clause=\"${col} BETWEEN ${values[0]} AND ${values[1]} ${with}\")\n            #elseif($entry.expression == 'notBetween')\n                #set($clause=\"${col} NOT BETWEEN ${values[0]} AND ${values[1]} ${with}\")\n            #elseif($entry.expression == 'isNull')\n                #set($clause=\"${col} IS NULL ${with}\")\n            #elseif($entry.expression == 'isNotNull')\n                #set($clause=\"${col} IS NOT NULL ${with}\")\n            #elseif($entry.expression == 'in')\n                #set($clause=\"${col} IN (${values[0]}) ${with}\")\n            #else\n                #set($exp=$expmap.get($entry.expression))\n                #set($clause=\"${col} ${exp} '${values[0]}' ${with}\")\n            #end\n            #set($filter=\"${filter} ${clause}\")\n        #end\n    #end\n    #set($filter = \"WHERE ${filter}\")\n#end\n$util.qr($ctx.stash.put(\"filterExpression\", $filter))\n#return",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Common_FN_parseFilter_RES.vtl\"))\n#return",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNgetAccount": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNgetAccount",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n\n#set($isAllowed = false)\n#if($identity.tenantId == $args.accountId || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Account WHERE id='${args.accountId}'\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Account[${args.accountId}]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNlistAccounts": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNlistAccounts",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#if($identity.isAdmin == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'list'))\n    #set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n    $util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n    $util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n    $util.qr($ctx.stash.put(\"limits\", $limits))\n    #set($filter = $util.defaultIfNull($ctx.stash.filterExpression, \"\"))\n    #set($sort = $util.defaultIfNull($ctx.stash.sortExpression, \"\"))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Account ${filter} ${sort} LIMIT ${limits.offset}, ${limits.limit}\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute LIST on Account\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNlistUsers": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNlistUsers",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"User_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n$util.qr($ctx.stash.put(\"request\", $args))\n$util.qr($ctx.stash.request.put(\"itemType\", 'User'))\n$util.qr($ctx.stash.put(\"operation\", 'list'))\n#set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n$util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n$util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n$util.qr($ctx.stash.put(\"limits\", $limits))\n#set($sort = $util.defaultIfNull($ctx.stash.sortExpression, \"\"))\n#if($ctx.stash.filterExpression)\n    #if(!$identity.isAdmin)\n        #if($ctx.stash.filterExpression.indexOf('accountId') == -1 && !$identity.isAdmin)\n            #set($filter=\"${ctx.stash.filterExpression} AND accountId = '${identity.tenantId}'\")\n        #end\n    #else\n        #set($filter=$ctx.stash.filterExpression)\n    #end\n#else\n    #if(!$identity.isAdmin)\n        #set($filter = \"WHERE accountId = '${identity.tenantId}'\")\n    #else\n        #set($filter = \"\")\n    #end\n#end\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User ${filter} ${sort} LIMIT ${limits.offset}, ${limits.limit}\"\n    ]\n}\n",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNupdateAccount": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNupdateAccount",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "## Only allow admin and account admin to update account\n$util.qr($ctx.stash.paths.add(\"Account_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = $identity.isAdmin == true || ($identity.isAccountAdmin == true && $args.accountId == $identity.tenantId))\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE Account SET updatedAt='${util.time.nowISO8601()}' #if($args.name) , `name`='${args.name}' #end WHERE id='${args.id}'\",\n            \"SELECT * FROM Account WHERE id ='${args.id}'\"\n        ]\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [Account]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNupdateAccountPlan": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNupdateAccountPlan",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "## Only allow admin and account admin to update account\n## This must run after FN_createPlan\n$util.qr($ctx.stash.paths.put(\"Account_plan_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n#set($isAllowed = $identity.isAdmin == true || ($identity.isAccountAdmin == true && $args.accountId == $identity.tenantId))\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($request.put(\"itemType\", 'Account'))\n    $util.qr($ctx.stash.put(\"request\", $request))\n    $util.qr($ctx.stash.put(\"operation\", 'update'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"CALL changeAccountPlan('$args.accountId', '$ctx.prev.result.id', '${util.time.nowISO8601()}')\"\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [${ctx.stash.operation}] on [${args.accountId}]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNgetUser": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNgetUser",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"User_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n## Only allow admin and account admin to get other users\n#set($isAllowed = $identity.isAdmin == true || $identity.isAccountAdmin == true || $args.userId == $identity.callerId)\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.userId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'User'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM User WHERE id='${args.userId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM User WHERE id='${args.userId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on User[${args.userId}]\", \"Unauthorized\")\n#end\n",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNdeletePlanType": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNdeletePlanType",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM PlanType WHERE id ='${args.planTypeId}'\",\n            \"UPDATE PlanType SET isDeleted=1, active=0, updatedAt='${util.time.nowISO8601()}' WHERE id='${args.planTypeId}'\",\n        ],\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on PlanType[${args.planTypeId}]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_delete_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNupdatePlanType": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNupdatePlanType",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE PlanType SET updatedAt='${util.time.nowISO8601()}' #if($args.name) , `name`='${args.name}' #end #if($args.billingTerm) , billingTerm='${args.billingTerm}' #end #if(!$util.isNull($args.cost)) , cost=${args.cost} #end #if(!$util.isNull($args.active)) , active=${args.active} #end WHERE id='${args.id}'\",\n            \"SELECT * FROM PlanType WHERE id ='${args.id}'\"\n        ]\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [PlanType]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNaddPlanType": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNaddPlanType",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    #set($id = $util.autoId())\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO PlanType(id, `name`, cost, billingTerm, active, ownerId, isDeleted, createdAt) VALUES(:id, :name, :cost, :billingTerm, :active, :ownerId, :isDeleted, :createdAt)\",\n            \"SELECT * FROM PlanType WHERE id = :id\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${id}\",\n            \":name\": \"${args.name}\",\n            \":cost\": \"${args.cost}\",\n            \":billingTerm\": \"${args.billingTerm}\",\n            \":active\": $args.active,\n            \":ownerId\": \"${identity.callerId}\",\n            \":isDeleted\": 0,\n            \":createdAt\": \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Plantype]\", \"Unauthorized\")\n#end\n",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNgetPlanType": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNgetPlanType",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n$util.qr($ctx.stash.put(\"request\", $args))\n$util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n$util.qr($ctx.stash.put(\"operation\", 'get'))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        #if(!$identity.isAdmin)\n            \"SELECT * FROM PlanType WHERE id='${args.planTypeId}' AND active=1 AND isDeleted=0\"\n        #else\n            \"SELECT * FROM PlanType WHERE id='${args.planTypeId}'\"\n        #end\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNlistPlanTypes": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNlistPlanTypes",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"PlanType_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#if($identity.isAdmin == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'PlanType'))\n    $util.qr($ctx.stash.put(\"operation\", 'list'))\n    #set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n    $util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n    $util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n    $util.qr($ctx.stash.put(\"limits\", $limits))\n    #set($sort = $util.defaultIfNull($ctx.stash.sortExpression, \"\"))\n    {\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM PlanType WHERE active=1 ${sort} LIMIT ${limits.offset}, ${limits.limit}\"\n            #else\n                \"SELECT * FROM PlanType ${sort} LIMIT ${limits.offset}, ${limits.limit}\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [${LIST}] on PlanType\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNcreatePlan": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNcreatePlan",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if(($identity.isAccountAdmin == true && $identity.tenantId == $args.accountId) || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    #set($id = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO Plan(id, accountId, ownerId, planTypeId, startDate, createdAt) VALUES(:id, :accountId, :ownerId, :planTypeId, :startDate, :createdAt)\",\n            \"SELECT * FROM Plan WHERE id='${id}'\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${id}\",\n            \":accountId\": \"${args.accountId}\",\n            \":ownerId\": \"${identity.callerId}\",\n            \":planTypeId\": \"${args.planTypeId}\",\n            \":startDate\": \"${now}\",\n            \":active\": 1,\n            \":createdAt\": \"${now}\"\n        }\n    }\n#else\n    $util.error(\"User [${ctx.stash.identity.callerId}] cannot execute [PUT] on [Plan]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNupdatePlan": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNupdatePlan",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.request.put(\"id\", $args.planId))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE Plan SET updatedAt=:isotime #if($args.endDate) , endDate=:endDate #end #if(!$util.isNull($args.active)) , active=:active #end WHERE id=:id AND accountId= :accountId\",\n            \"SELECT * FROM Plan WHERE id=:id\"\n        ],\n        \"variableMap\": {\n            \":id\"       : \"${args.planId}\",\n            \":endDate\"  : \"${args.endDate}\",\n            \":accountId\": \"${args.accountId}\",\n            \":active\"   : $args.active,\n            \":isotime\"  : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on Plan[${ctx.stash.request.id}]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNdeletePlan": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNdeletePlan",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin || $identity.isAccountAdmin == true && $identity.tenantId == $args.accountId)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.request.put(\"id\", $args.planId))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Plan WHERE id ='${args.planId}'\",\n            \"UPDATE Plan SET isDeleted=1, active=0, endDate=:isotime, updatedAt=:isotime WHERE id='${args.planId}' AND accountId='${args.accountId}'\",\n        ],\n        \"variableMap\": {\n            \":isotime\" : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on Plan[${args.planId}]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_delete_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNgetPlan": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNgetPlan",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Plan'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"statements\": [\n            #if(!$identity.isAdmin)\n                \"SELECT * FROM Plan WHERE id='${args.planId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM Plan WHERE id='${args.planId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Plan[${args.planId}]\", \"Unauthorized\")\n#end\n",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNgetForm": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNgetForm",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.tenantId == $args.accountId || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.formId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            #if($identity.isAdmin != true)\n                \"SELECT * FROM Form WHERE id='${args.formId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM Form WHERE id='${args.formId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on Form[${args.formId}]\", \"Unauthorized\")\n#end\n",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_GET.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNlistForm": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNlistForm",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_list_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n$util.qr($ctx.stash.put(\"request\", $args))\n$util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n$util.qr($ctx.stash.put(\"operation\", 'list'))\n#set($limits = $util.defaultIfNull($args.offsetLimit, {\"offset\":0,\"limit\":50}))\n$util.qr($limits.put(\"offset\", $util.defaultIfNull($args.offsetLimit.offset, 0)))\n$util.qr($limits.put(\"limit\", $util.defaultIfNull($args.offsetLimit.limit, 50)))\n$util.qr($ctx.stash.put(\"limits\", $limits))\n#set($sort = $util.defaultIfNull($ctx.stash.sortExpression, \"\"))\n#if($ctx.stash.filterExpression)\n    #if(!$identity.isAdmin)\n        #if($ctx.stash.filterExpression.indexOf('accountId') == -1 && !$identity.isAdmin)\n            #set($filter=\"${ctx.stash.filterExpression} AND accountId = '${identity.tenantId}'\")\n        #end\n    #else\n        #set($filter=$ctx.stash.filterExpression)\n    #end\n#else\n    #if(!$identity.isAdmin)\n        #set($filter = \"WHERE accountId = '${identity.tenantId}'\")\n    #else\n        #set($filter = \"\")\n    #end\n#end\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Form ${filter} ${sort} LIMIT ${limits.offset}, ${limits.limit}\"\n    ]\n}\n",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNupdateForm": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNupdateForm",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_update_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true || $identity.isAccountAdmin == true || $identity.isAccountEditor == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($request = $args)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.request.put(\"id\", $args.id))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"UPDATE Form SET updatedAt=:isotime #if($args.startDate) , startDate=:startDate #end #if($args.endDate) , endDate=:endDate #end #if(!$util.isNull($args.name)) , `name`=:name #end #if(!$util.isNull($args.description)) , description=:description #end #if(!$util.isNull($args.isPaused)) , isPaused=:isPaused #end  WHERE id=:id\",\n            \"SELECT * FROM Form WHERE id ='${args.id}'\"\n        ],\n        \"variableMap\": {\n            \":id\" : \"${args.id}\",\n            \":name\" : \"${args.name}\",\n            \":isPaused\": \":isPaused\",\n            \":description\": \"description\",\n            \":startDate\": \"${args.startDate}\",\n            \":endDate\": \"${args.endDate}\",\n            \":isotime\" : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Form]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNaddForm": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNaddForm",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true || ($identity.tenantId == $args.accountId && ($identity.isAccountAdmin == true || $identity.isAccountEditor == true)))\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    #set($formId = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $formId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO Form(id, ownerId, accountId, `name`, description, createdAt) VALUES(:id, :ownerId, :accountId, :name, :description, :createdAt)\",\n            \"SELECT * FROM Form WHERE id=:id\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${formId}\",\n            \":ownerId\": \"${identity.callerId}\",\n            \":accountId\": \"${args.accountId}\",\n            \":name\": \"${args.name}\",\n            \":description\": \"${args.description}\",\n            \":createdAt\": \"${now}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [Form]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNattachFormVersion": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNattachFormVersion",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FormVersion_attach_REQ.vtl\"))\n#set($args=$ctx.arguments.input)\n#set($now = \"${util.time.nowISO8601()}\")\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"UPDATE Form SET versionId=:versionId, updatedAt=:updatedAt WHERE id=:formId\",\n        \"SELECT * FROM Form WHERE id=:formId\"\n    ],\n    \"variableMap\" : {\n        \":versionId\": \"${ctx.prev.result.id}\",\n        \":updatedAt\": \"${now}\",\n        \":formId\"   : \"${args.formId}\"\n    }\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNdeleteForm": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNdeleteForm",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_delete_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin || (($identity.isAccountAdmin == true || $identity.tenantId == $args.accountId) && $args.accountId == $identity.tenantId))\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.id))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'Form'))\n    $util.qr($ctx.stash.put(\"operation\", 'delete'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"SELECT * FROM Form WHERE id=:id AND accountId=:accountId\",\n            \"UPDATE Form SET isDeleted=1, isPaused=1, endDate=:isotime, updatedAt=:isotime WHERE id=:id AND accountId=:accountId\",\n        ],\n        \"variableMap\": {\n            \":id\" : \"${args.id}\",\n            \":accountId\" : \"${args.accountId}\",\n            \":isotime\" : \"${util.time.nowISO8601()}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [DELETE] on Form[${args.id}]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_delete_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"${request.itemType} [${request.id}] not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNaddFormVersion": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNaddFormVersion",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FormVersion_add_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments.input)\n\n#set($isAllowed = false)\n#if($identity.isAdmin == true || ($identity.tenantId == $args.accountId && ($identity.isAccountAdmin == true || $identity.isAccountEditor == true)))\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed)\n    #set($versionId = $util.autoId())\n    #set($now = \"${util.time.nowISO8601()}\")\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $versionId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'FormVersion'))\n    $util.qr($ctx.stash.put(\"operation\", 'put'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            \"INSERT INTO FormVersion(id, formId, ownerId, notes, createdAt, formData) VALUES(:id, :formId, :ownerId, :notes, :createdAt, :formData)\",\n            \"SELECT * FROM FormVersion WHERE id='${versionId}'\"\n        ],\n        \"variableMap\": {\n            \":id\": \"${versionId}\",\n            \":accountId\" : \"${args.accountId}\",\n            \":formId\": \"${args.formId}\",\n            \":ownerId\": \"${identity.callerId}\",\n            \":notes\": \"${args.notes}\",\n            \":createdAt\": \"${now}\",\n            \":formData\": \"${util.escapeJavaScript($util.toJson($args.formData))}\"\n        }\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [PUT] on [FormVersion]\", \"Unauthorized\")\n#end",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_upsert_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$util.toJson($util.rds.toJsonObject($ctx.result)[1][0])",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlFunctionConfigurationFNgetFormVersion": {
            "Type": "AWS::AppSync::FunctionConfiguration",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "GraphQlFunctionConfigurationFNgetFormVersion",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              },
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"FormVersion_get_REQ.vtl\"))\n#set($identity=$ctx.stash.identity)\n#set($args=$ctx.arguments)\n\n#set($isAllowed = false)\n#if($identity.tenantId == $args.accountId || $identity.isAdmin == true)\n    #set($isAllowed = true)\n#end\n\n#if($isAllowed == true)\n    $util.qr($ctx.stash.put(\"request\", $args))\n    $util.qr($ctx.stash.request.put(\"id\", $args.versionId))\n    $util.qr($ctx.stash.request.put(\"itemType\", 'FormVersion'))\n    $util.qr($ctx.stash.put(\"operation\", 'get'))\n    {\n        \"version\": \"2018-05-29\",\n        \"statements\": [\n            #if($identity.isAdmin != true)\n                \"SELECT * FROM FormVersion WHERE id='${args.versionId}' AND accountId='${identity.tenantId}'\"\n            #else\n                \"SELECT * FROM FormVersion WHERE id='${args.versionId}'\"\n            #end\n        ]\n    }\n#else\n    $util.error(\"User [${identity.callerId}] cannot execute [GET] on FormVersion[${args.versionId}]\", \"Unauthorized\")\n#end\n",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_get_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.toJson(null)\n#else\n    #set($result=$utils.rds.toJsonObject($ctx.result)[0][0])\n    #if($result.formData)\n        $util.qr($result.put(\"formData\", $util.parseJson($result.formData)))\n    #end\n    $util.toJson($result)\n#end",
              "FunctionVersion": "2018-05-29"
            }
          },
          "GraphQlResolverQuerygetUser": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getUser",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNgetUser",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverUsernumForms": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "User",
              "FieldName": "numForms",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"User_numForms_get.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT count(*) as item_count FROM Form WHERE ownerId='${ctx.source.id}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_count_RES.vtl\"))\n#set($count=$utils.rds.toJsonObject($ctx.result)[0][0])\n#if($count[\"item_count\"])\n    $utils.toJson($count[\"item_count\"])\n#else\n    $utils.toJson(0)\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverUseraccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "User",
              "FieldName": "account",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Account_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Account WHERE id='${ctx.source.accountId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Account_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $utils.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverUserownedBy": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "User",
              "FieldName": "ownedBy",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $utils.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistUsers": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listUsers",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNparseFilter",
                      "FunctionId"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNlistUsers",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverPlanplanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Plan",
              "FieldName": "planType",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_planType_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM PlanType WHERE id='${ctx.source.planTypeId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Plan_planType_get_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.error(\"PlanType not found\", 'NotFound')\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetPlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getPlan",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNgetPlan",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationdeletePlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deletePlan",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNdeletePlan",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationaddPlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addPlan",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNcreatePlan",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationupdatePlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updatePlan",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNupdatePlan",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverQuerygetAccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getAccount",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNgetAccount",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverQuerylistAccounts": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listAccounts",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNparseFilter",
                      "FunctionId"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNlistAccounts",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateAccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateAccount",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNupdateAccount",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateAccountPlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateAccountPlan",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNcreatePlan",
                      "FunctionId"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNupdateAccountPlan",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverAccountnumForms": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "numForms",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_numForms_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT count(*) as item_count FROM Form WHERE accountId='${ctx.source.id}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_count_RES.vtl\"))\n#set($count=$utils.rds.toJsonObject($ctx.result)[0][0])\n#if($count[\"item_count\"])\n    $utils.toJson($count[\"item_count\"])\n#else\n    $utils.toJson(0)\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountnumUsers": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "numUsers",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_numUsers_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT count(*) as item_count FROM User WHERE accountId='${ctx.source.id}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_FN_count_RES.vtl\"))\n#set($count=$utils.rds.toJsonObject($ctx.result)[0][0])\n#if($count[\"item_count\"])\n    $utils.toJson($count[\"item_count\"])\n#else\n    $utils.toJson(0)\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountplan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "plan",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_plan_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Plan WHERE accountId='${ctx.source.id}' and active=1\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_plan_get_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountownedBy": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "ownedBy",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $utils.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountforms": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "forms",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Account_forms_list_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Form WHERE accountId='${ctx.source.id}' ORDER BY createdAt DESC, updatedAt DESC\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Account_forms_list_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverAccountusers": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Account",
              "FieldName": "users",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_user_list_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE active=1 AND accountId='${ctx.source.id}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.put(\"Account_user_list_RES.vtl\"))\n#set($request=$ctx.stash.request)\n#set($itemType=$request.itemType)\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetForm": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getForm",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNgetForm",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateForm": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateForm",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNupdateForm",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationaddForm": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addForm",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNaddForm",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteForm": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteForm",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNdeleteForm",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationaddFormVersion": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addFormVersion",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNaddFormVersion",
                      "FunctionId"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNattachFormVersion",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverQuerylistForms": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listForms",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNparseFilter",
                      "FunctionId"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNlistForm",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverFormownedBy": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "ownedBy",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $utils.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverFormaccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "account",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Account_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM Account WHERE id='${ctx.source.accountId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Account_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $utils.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverFormversion": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "version",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM FormVersion WHERE id='${ctx.source.versionId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_get_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $util.toJson(null)\n#else\n    #set($result=$utils.rds.toJsonObject($ctx.result)[0][0])\n    #if($result.formData)\n        $util.qr($result.put(\"formData\", $util.parseJson($result.formData)))\n    #end\n    $util.toJson($result)\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverFormversions": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Form",
              "FieldName": "versions",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_list_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM FormVersion WHERE formId='${ctx.source.id}' ORDER BY createdAt DESC LIMIT 0, 10\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Form_formVersion_list_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetFormVersion": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getFormVersion",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNgetFormVersion",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverFormVersionownedBy": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "FormVersion",
              "FieldName": "ownedBy",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $utils.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistPlanTypes": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listPlanTypes",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNlistPlanTypes",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverPlanTypeownedBy": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "PlanType",
              "FieldName": "ownedBy",
              "RequestMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_REQ.vtl\"))\n{\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n        \"SELECT * FROM User WHERE id='${ctx.source.ownerId}'\"\n    ]\n}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_Owner_get_RES.vtl\"))\n\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if($utils.rds.toJsonObject($ctx.result)[0].size() == 0)\n    $utils.toJson(null)\n#else\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsAppData",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetPlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getPlanType",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNgetPlanType",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationaddPlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addPlanType",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNaddPlanType",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationupdatePlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updatePlanType",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNupdatePlanType",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          },
          "GraphQlResolverMutationdeletePlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deletePlanType",
              "RequestMappingTemplate": "## Store tenantId, group in stash.identity\n$util.qr($ctx.stash.put(\"paths\", []))\n$util.qr($ctx.stash.paths.add(\"Common_REQ.vtl\"))\n\n#set ($identity = {})\n$util.qr($identity.put(\"tenantId\", $context.identity.claims.get(\"custom:tenantId\")))\n$util.qr($identity.put(\"callerId\", $ctx.identity.sub))\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n        $util.qr($identity.put(\"isAdmin\", true))\n    #end\n    #if($group == \"AccountAdmin\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountAdmin\", true))\n    #end\n    #if($group == \"AccountEditor\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountEditor\", true))\n    #end\n    #if($group == \"AccountViewer\")\n        #set($isAccountAdmin = true)\n        $util.qr($identity.put(\"isAccountViewer\", true))\n    #end\n#end\n$util.qr($ctx.stash.put(\"identity\", $identity))\n$util.qr($ctx.stash.put(\"results\", {}))\n{}",
              "ResponseMappingTemplate": "$util.qr($ctx.stash.paths.add(\"Common_RES.vtl\"))\n#if($ctx.error)\n    $util.qr($ctx.stash.put(\"error\", $ctx.error))\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.qr($ctx.stash.put(\"FINAL\", $context.result))\n$util.toJson($context.result)",
              "Kind": "PIPELINE",
              "PipelineConfig": {
                "Functions": [
                  {
                    "Fn::GetAtt": [
                      "GraphQlFunctionConfigurationFNdeletePlanType",
                      "FunctionId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "FormJsonLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FormJsonLambdaVersionkrMEKfKSVVU6cWlAWqaKvtBC1qpLp7Ict5gqVg9tMmA"
            }
          },
          "FormEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FormEntryLambdaVersionGKELoeaAnHON7RkExUb80CIou2mUTSrIL0vrhTIGxVI"
            }
          },
          "FormViewLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FormViewLambdaVersionFqqwoTqzwULjjlf16FiIcw24nxX7BsKVEUExbAM9TI"
            }
          },
          "PostConfirmationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostConfirmationLambdaVersiontXRhYQK4pUoE1wCjJH2osC6JxU300HiSUBidgOQ5UA"
            }
          },
          "SignupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignupLambdaVersionNPCgN7OkjxFdp92X9wwQySIXocsk2cqe7tzFUP3z0"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "Region": {
            "Value": {
              "Fn::Sub": "${AWS::Region}"
            }
          },
          "Stage": {
            "Value": "dev"
          },
          "Service": {
            "Value": "formsli"
          },
          "AccountId": {
            "Value": {
              "Fn::Sub": "${AWS::AccountId}"
            }
          },
          "AuthorizerId": {
            "Value": {
              "Ref": "MyApiGatewayAuthorizer"
            }
          },
          "DBClusterId": {
            "Value": "fl-rds-cluster-dev"
          },
          "DBClusterArn": {
            "Value": {
              "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:fl-rds-cluster-dev"
            }
          },
          "DBSecretArn": {
            "Value": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX"
          },
          "UserPoolId": {
            "Value": "ap-northeast-1_Q798Nsl33"
          },
          "IdentityPoolId": {
            "Value": "ap-northeast-1:5be23074-d96a-4e55-be17-3fe13545156a"
          },
          "UserPoolClientId": {
            "Value": "7pvdgcaflsg9juob60mosafi9d"
          },
          "UserPoolAdminUser": {
            "Value": {
              "Ref": "CognitoUserPoolAdminUser"
            }
          },
          "IntegrationQueue": {
            "Value": {
              "Ref": "IntegrationQueue"
            }
          },
          "EntryQueue": {
            "Value": {
              "Ref": "EntryQueue"
            }
          },
          "GraphQlApiUrl": {
            "Value": {
              "Fn::GetAtt": [
                "GraphQlApi",
                "GraphQLUrl"
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "customDomain": {
        "DependsOn": "ApiGatewayApiKey1",
        "domainName": "dev-api.forms.li",
        "certificateName": "*.forms.li",
        "stage": "dev",
        "createRoute53Record": true,
        "endpointType": "regional",
        "securityPolicy": "tls_1_2"
      },
      "output": {
        "file": "outputs/stack.dev.json"
      },
      "packagePath": "./package.json",
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "packager": "npm",
        "includeModules": {
          "forceInclude": [
            "source-map-support"
          ]
        }
      },
      "appSync": {
        "name": "formsli-api-dev",
        "authenticationType": "AMAZON_COGNITO_USER_POOLS",
        "userPoolConfig": {
          "awsRegion": "ap-northeast-1",
          "defaultAction": "ALLOW",
          "userPoolId": "ap-northeast-1_Q798Nsl33"
        },
        "logConfig": {
          "loggingRoleArn": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlApi\"][\"Properties\"][\"LogConfig\"][\"CloudWatchLogsRoleArn\"]"
          },
          "level": "ALL"
        },
        "schema": "schema.graphql",
        "dataSources": [
          {
            "type": "RELATIONAL_DATABASE",
            "name": "AppData",
            "description": "RDS source for formsli",
            "config": {
              "dbClusterIdentifier": "fl-rds-cluster-dev",
              "awsSecretStoreArn": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX",
              "databaseName": "formsli",
              "serviceRoleArn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlDsAppData\"][\"Properties\"][\"ServiceRoleArn\"]"
              },
              "region": "ap-northeast-1"
            }
          }
        ],
        "mappingTemplatesLocation": "src/mapping-templates",
        "mappingTemplates": [
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getUser",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_getUser"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "User",
            "field": "numForms",
            "request": "User_numForms_get_REQ.vtl",
            "response": "Common_FN_count_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "User",
            "field": "account",
            "request": "Common_Account_get_REQ.vtl",
            "response": "Common_Account_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "User",
            "field": "ownedBy",
            "request": "Common_Owner_get_REQ.vtl",
            "response": "Common_Owner_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listUsers",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_parseFilter",
              "FN_listUsers"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Plan",
            "field": "planType",
            "request": "Plan_planType_get_REQ.vtl",
            "response": "Plan_planType_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getPlan",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_getPlan"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "deletePlan",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_deletePlan"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addPlan",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_createPlan"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "updatePlan",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_updatePlan"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getAccount",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_getAccount"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listAccounts",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_parseFilter",
              "FN_listAccounts"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "updateAccount",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_updateAccount"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "updateAccountPlan",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_createPlan",
              "FN_updateAccountPlan"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "numForms",
            "request": "Account_numForms_get_REQ.vtl",
            "response": "Common_FN_count_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "numUsers",
            "request": "Account_numUsers_get_REQ.vtl",
            "response": "Common_FN_count_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "plan",
            "request": "Account_plan_get_REQ.vtl",
            "response": "Account_plan_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "ownedBy",
            "request": "Common_Owner_get_REQ.vtl",
            "response": "Common_Owner_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "forms",
            "request": "Account_forms_list_REQ.vtl",
            "response": "Account_forms_list_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Account",
            "field": "users",
            "request": "Account_users_list_REQ.vtl",
            "response": "Account_users_list_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getForm",
            "kind": "PIPELINE",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "functions": [
              "FN_getForm"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "updateForm",
            "kind": "PIPELINE",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "functions": [
              "FN_updateForm"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addForm",
            "kind": "PIPELINE",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "functions": [
              "FN_addForm"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "deleteForm",
            "kind": "PIPELINE",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "functions": [
              "FN_deleteForm"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addFormVersion",
            "kind": "PIPELINE",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "functions": [
              "FN_addFormVersion",
              "FN_attachFormVersion"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listForms",
            "kind": "PIPELINE",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "functions": [
              "FN_parseFilter",
              "FN_listForm"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "ownedBy",
            "request": "Common_Owner_get_REQ.vtl",
            "response": "Common_Owner_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "account",
            "request": "Common_Account_get_REQ.vtl",
            "response": "Common_Account_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "version",
            "request": "Form_formVersion_get_REQ.vtl",
            "response": "Form_formVersion_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Form",
            "field": "versions",
            "request": "Form_formVersion_list_REQ.vtl",
            "response": "Form_formVersion_list_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getFormVersion",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_getFormVersion"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "FormVersion",
            "field": "ownedBy",
            "request": "Common_Owner_get_REQ.vtl",
            "response": "Common_Owner_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "listPlanTypes",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_listPlanTypes"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "PlanType",
            "field": "ownedBy",
            "request": "Common_Owner_get_REQ.vtl",
            "response": "Common_Owner_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "field": "getPlanType",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_getPlanType"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "addPlanType",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_addPlanType"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "updatePlanType",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_updatePlanType"
            ]
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "field": "deletePlanType",
            "request": "Common_REQ.vtl",
            "response": "Common_RES.vtl",
            "kind": "PIPELINE",
            "functions": [
              "FN_deletePlanType"
            ]
          }
        ],
        "functionConfigurations": [
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_parseFilter",
            "request": "Common_FN_parseFilter_REQ.vtl",
            "response": "Common_FN_parseFilter_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_getAccount",
            "request": "Account_get_REQ.vtl",
            "response": "Common_FN_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_listAccounts",
            "request": "Account_list_REQ.vtl",
            "response": "Common_FN_list_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_listUsers",
            "request": "User_list_REQ.vtl",
            "response": "Common_FN_list_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mudation",
            "name": "FN_updateAccount",
            "request": "Account_update_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mudation",
            "name": "FN_updateAccountPlan",
            "request": "Account_plan_update_REQ.vtl",
            "response": "Common_FN_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_getUser",
            "request": "User_get_REQ.vtl",
            "response": "Common_FN_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_deletePlanType",
            "request": "PlanType_delete_REQ.vtl",
            "response": "Common_FN_delete_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_updatePlanType",
            "request": "PlanType_update_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_addPlanType",
            "request": "PlanType_add_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_getPlanType",
            "request": "PlanType_get_REQ.vtl",
            "response": "Common_FN_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_listPlanTypes",
            "request": "PlanType_list_REQ.vtl",
            "response": "Common_FN_list_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_createPlan",
            "request": "Plan_add_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_updatePlan",
            "request": "Plan_update_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_deletePlan",
            "request": "Plan_delete_REQ.vtl",
            "response": "Common_FN_delete_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_getPlan",
            "request": "Plan_get_REQ.vtl",
            "response": "Common_FN_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_getForm",
            "request": "Form_get_REQ.vtl",
            "response": "Common_FN_get_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_listForm",
            "request": "Form_list_REQ.vtl",
            "response": "Common_FN_list_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_updateForm",
            "request": "Form_update_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_addForm",
            "request": "Form_add_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_attachFormVersion",
            "request": "FormVersion_attach_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_deleteForm",
            "request": "Form_delete_REQ.vtl",
            "response": "Common_FN_delete_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Mutation",
            "name": "FN_addFormVersion",
            "request": "FormVersion_add_REQ.vtl",
            "response": "Common_FN_upsert_RES.vtl"
          },
          {
            "dataSource": "AppData",
            "type": "Query",
            "name": "FN_getFormVersion",
            "request": "FormVersion_get_REQ.vtl",
            "response": "FormVersion_get_RES.vtl"
          }
        ],
        "substitutions": null
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-pseudo-parameters",
      "serverless-iam-roles-per-function",
      "serverless-domain-manager",
      "serverless-appsync-plugin",
      "@anttiviljami/serverless-stack-output",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "formJson": {
        "name": "formsli-dev-formJson",
        "handler": "src/form.handle",
        "events": [
          {
            "http": {
              "path": "form/json/{formId}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/formsli.zip"
        },
        "memory": 2048,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "formEntry": {
        "name": "formsli-dev-form-entry",
        "handler": "src/formentry.handle",
        "events": [
          {
            "http": {
              "path": "form/entry/{formId}",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/formsli.zip"
        },
        "memory": 2048,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "formView": {
        "name": "formsli-dev-formView",
        "handler": "src/formview.handle",
        "events": [
          {
            "http": {
              "path": "form/view/{formId}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/formsli.zip"
        },
        "memory": 2048,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "postConfirmation": {
        "name": "formsli-dev-postconfirmation",
        "handler": "src/postconfirmation.handle",
        "events": [
          {
            "http": {
              "path": "postconfirm",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "cognitoUserPool": {
              "pool": "fl-dev-userpool",
              "trigger": "PostConfirmation",
              "existing": true
            }
          }
        ],
        "package": {
          "artifact": ".serverless/formsli.zip"
        },
        "memory": 2048,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "signup": {
        "name": "formsli-dev-invite",
        "handler": "src/invite.handle",
        "events": [
          {
            "http": {
              "path": "invite",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "username",
                  "custom:tenantId",
                  "custom:group"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/formsli.zip"
        },
        "memory": 2048,
        "timeout": 30,
        "runtime": "nodejs10.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "AppSyncRDSRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "formsli-ap-northeast-1-appsync-iam-role",
            "ManagedPolicyArns": [
              {
                "Ref": "AppSyncRDSPolicy"
              }
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          },
          "DependsOn": [
            "AppSyncRDSPolicy"
          ]
        },
        "AppSyncRDSPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "Description": "Allow AWS AppSync to access RDS.",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds-data:InsertItems",
                    "rds-data:GetItems",
                    "rds-data:UpdateItems",
                    "rds-data:DeleteItems",
                    "rds-data:ExecuteSql",
                    "rds-data:BatchExecuteStatement",
                    "rds-data:BeginTransaction",
                    "rds-data:CommitTransaction",
                    "rds-data:ExecuteStatement",
                    "rds-data:RollbackTransaction",
                    "tag:GetResources"
                  ],
                  "Resource": [
                    "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:fl-rds-cluster-dev",
                    "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:fl-rds-cluster-dev:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:CreateSecret",
                    "secretsmanager:ListSecrets",
                    "secretsmanager:GetRandomPassword"
                  ],
                  "Resource": [
                    "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:/dev/formsli/rds/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "tag:GetResources",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        },
        "AppSyncCloudWatchRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "formsli-ap-northeast-1-appsync-logging-iam-role",
            "ManagedPolicyArns": [
              {
                "Ref": "AppSyncCloudWatchPolicy"
              }
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          },
          "DependsOn": [
            "AppSyncCloudWatchPolicy"
          ]
        },
        "AppSyncCloudWatchPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "Description": "Allow AWS AppSync to write logs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        },
        "MyApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerResultTtlInSeconds": 10,
            "IdentitySource": "method.request.header.Authorization",
            "Name": "MyCognitoAuthorizer",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Type": "COGNITO_USER_POOLS",
            "ProviderARNs": [
              "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33"
            ]
          }
        },
        "PostConfirmationTriggerInvokePermission": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": "PostConfirmationLambdaFunction",
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "Principal": "cognito-idp.amazonaws.com",
            "SourceArn": "arn:aws:cognito-idp:ap-northeast-1:286358943194:userpool/ap-northeast-1_Q798Nsl33",
            "FunctionName": "formsli-dev-postconfirmation"
          }
        },
        "CognitoUserPoolAdminUser": {
          "Type": "AWS::Cognito::UserPoolUser",
          "Properties": {
            "Username": "infrastructure.dev@forms.li",
            "UserPoolId": "ap-northeast-1_Q798Nsl33",
            "DesiredDeliveryMediums": [
              "EMAIL"
            ],
            "UserAttributes": [
              {
                "Name": "email",
                "Value": "infrastructure.dev@forms.li"
              },
              {
                "Name": "given_name",
                "Value": "dev Infrastructure"
              },
              {
                "Name": "family_name",
                "Value": "Admin"
              },
              {
                "Name": "email_verified",
                "Value": true
              },
              {
                "Name": "custom:group",
                "Value": "Admin"
              },
              {
                "Name": "custom:region",
                "Value": "ap-northeast-1"
              },
              {
                "Name": "custom:environment",
                "Value": "dev"
              }
            ]
          }
        },
        "EntryQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "formsli-dev-entry-queue"
          }
        },
        "IntegrationQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "formsli-dev-integration-queue"
          }
        }
      },
      "Outputs": {
        "Region": {
          "Value": "#{AWS::Region}"
        },
        "Stage": {
          "Value": "dev"
        },
        "Service": {
          "Value": "formsli"
        },
        "AccountId": {
          "Value": "#{AWS::AccountId}"
        },
        "AuthorizerId": {
          "Value": {
            "Ref": "MyApiGatewayAuthorizer"
          }
        },
        "DBClusterId": {
          "Value": "fl-rds-cluster-dev"
        },
        "DBClusterArn": {
          "Value": "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:fl-rds-cluster-dev"
        },
        "DBSecretArn": {
          "Value": "arn:aws:secretsmanager:ap-northeast-1:286358943194:secret:/dev/formsli/rds/password/secret-jOv5zX"
        },
        "UserPoolId": {
          "Value": "ap-northeast-1_Q798Nsl33"
        },
        "IdentityPoolId": {
          "Value": "ap-northeast-1:5be23074-d96a-4e55-be17-3fe13545156a"
        },
        "UserPoolClientId": {
          "Value": "7pvdgcaflsg9juob60mosafi9d"
        },
        "UserPoolAdminUser": {
          "Value": {
            "Ref": "CognitoUserPoolAdminUser"
          }
        },
        "IntegrationQueue": {
          "Value": {
            "Ref": "IntegrationQueue"
          }
        },
        "EntryQueue": {
          "Value": {
            "Ref": "EntryQueue"
          }
        }
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/formsli/dev/1568590353414-2019-09-15T23:32:33.414Z",
    "artifact": ""
  }
}