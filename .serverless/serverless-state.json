{
  "service": {
    "service": "formsgraphql",
    "serviceObject": {
      "name": "formsgraphql"
    },
    "provider": {
      "stage": "dev",
      "region": "ap-southeast-2",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "profile": "default",
      "environment": {
        "TBL_FORM_ENTRY": "table_formsgraphql_dev_entries",
        "TBL_MASTER_DATA": "table_formsgraphql_dev_masterdata"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:ap-southeast-2:*:table/table_formsgraphql_dev_masterdata"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          },
          "AppSyncDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "formsgraphql-ap-southeast-2-dev-appsync-iam-role",
              "ManagedPolicyArns": [
                {
                  "Ref": "AppSyncDynamoDBPolicy"
                }
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "AppSyncDynamoDBPolicy"
            ]
          },
          "AppSyncDynamoDBPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "Description": "Allow AWS AppSync to access dynamodb.",
              "Path": "/deepdish/",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:GetItem",
                      "dynamodb:PutItem",
                      "dynamodb:DeleteItem",
                      "dynamodb:UpdateItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:BatchGetItem",
                      "dynamodb:BatchWriteItem"
                    ],
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": "MasterDataTable.Arn"
                            },
                            "*"
                          ]
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "AppSyncCloudWatchRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "formsgraphql-ap-southeast-2-dev-appsync--logging-iam-role",
              "ManagedPolicyArns": [
                {
                  "Ref": "AppSyncCloudWatchPolicy"
                }
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "AppSyncCloudWatchPolicy"
            ]
          },
          "AppSyncCloudWatchPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "Description": "Allow AWS AppSync to write logs",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          },
          "MasterDataTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "table_formsgraphql_dev_masterdata",
              "AttributeDefinitions": [
                {
                  "AttributeName": "partitionKey",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sortKey",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "indexKey",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "partitionKey",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sortKey",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "masterDataGSI",
                  "KeySchema": [
                    {
                      "AttributeName": "sortKey",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "indexKey",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ]
            }
          },
          "EntriesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "table_formsgraphql_dev_entries",
              "AttributeDefinitions": [
                {
                  "AttributeName": "partitionKey",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "sortKey",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "indexKey",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "partitionKey",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "sortKey",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "formEntriesGSI",
                  "KeySchema": [
                    {
                      "AttributeName": "sortKey",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "indexKey",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ]
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "dev-user-pool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ]
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "dev-userpoolclient",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "ExplicitAuthFlows": [
                "ADMIN_NO_SRP_AUTH"
              ],
              "GenerateSecret": false
            }
          },
          "CognitoAppAdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Application Admin",
              "GroupName": "Admin",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              }
            }
          },
          "CognitoAccountAdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Account admin",
              "GroupName": "AccountAdmin",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              }
            }
          },
          "CognitoAccountEditorGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Account editor user",
              "GroupName": "Editor",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              }
            }
          },
          "CognitoAccountViewerGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "Account read only user",
              "GroupName": "Viewer",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              }
            }
          },
          "AttachmentsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "formsgraphql-dev-data",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "GraphQlApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "Name": "ai-forms-backend-dev",
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "UserPoolConfig": {
                "AwsRegion": "ap-southeast-2",
                "DefaultAction": "ALLOW",
                "UserPoolId": {
                  "Ref": "CognitoUserPool"
                }
              },
              "LogConfig": {
                "CloudWatchLogsRoleArn": {
                  "Fn::GetAtt": [
                    "AppSyncCloudWatchRole",
                    "Arn"
                  ]
                },
                "FieldLogLevel": "ALL"
              }
            }
          },
          "GraphQlApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": {
                "Fn::Join": [
                  "/",
                  [
                    "/aws/appsync/apis",
                    {
                      "Fn::GetAtt": [
                        "GraphQlApi",
                        "ApiId"
                      ]
                    }
                  ]
                ]
              }
            }
          },
          "GraphQlSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "Definition": "type MasterData @model {\n    partitionKey: ID!\n    sortKey: ID!\n    indexKey: String!\n    type: String!\n    owner: ID!\n    createdAt: AWSDate\n    updatedAt: AWSDate\n    isDeleted: Boolean\n    data: AWSJSON!\n}\n\ntype FormEntry @model {\n    partitionKey: ID!\n    sortKey: ID!\n    indexKey: String!\n    data: AWSJSON!\n}\n\ninput AddFormEntryInput {\n  data: AWSJSON!\n}\n\ntype PaginatedFormEntries {\n  items: [FormEntry!]!\n  nextToken: String\n}\n\ntype Form {\n    id: ID!\n    owner: ID!\n    exid: String\n    desc: String\n    name: String!\n    tenant: AWSJSON\n    status: AWSJSON\n    content: AWSJSON!\n    layout: AWSJSON\n    formLayoutOptions: AWSJSON\n    stopSubmit: Boolean\n    submitTarget: String\n    successRedirect: String\n    errorRedirect: String\n}\n\ninput AddFormInput {\n  name: String!\n  desc: String\n  content: AWSJSON!\n  layout: AWSJSON\n  formLayoutOptions: AWSJSON\n  stopSubmit: Boolean\n  submitTarget: String\n  successRedirect: String\n  errorRedirect: String\n}\n\ninput UpdateFormInput  {\n  id: ID\n  name: String\n  desc: String\n  content: AWSJSON!\n  layout: AWSJSON\n  formLayoutOptions: AWSJSON\n  stopSubmit: Boolean\n  submitTarget: String\n  successRedirect: String\n  errorRedirect: String\n}\n\ntype PaginatedForm {\n  items: [Form!]!\n  nextToken: String\n}\n\ntype User {\n  id: ID!\n  owner: ID!\n  accountId: String!\n  email: String!\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n  createdAt: AWSDate\n}\n\ninput UpdateUserInputData {\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\ninput UpdateUserInput {\n  id: ID!\n  data: UpdateUserInputData!\n}\n\ninput AddUserInput {\n  email: String!\n  group: String!\n  given_name: String!\n  family_name: String!\n  phone_number: AWSPhone\n}\n\ntype PaginatedUser {\n  items: [User!]!\n  nextToken: String\n}\n\ntype Account {\n  id: ID!\n  name: String!\n  owner: ID!\n  planId: ID!\n  createdAt: AWSDate!\n  updatedDate: AWSDate!\n  lastBillDate: AWSDate\n}\n\ninput UpdateAccountInput {\n  id: ID!\n  name: String!\n  planId: ID!\n}\n\ninput AddAccountInput {\n  name: String!\n  planId: ID!\n}\n\ntype PaginatedAccount {\n  items: [Account!]!\n  nextToken: String!\n}\n\ntype PlanType {\n  planTypeId: ID!\n  owner: ID!\n  name: String!\n  cost: Float!\n  active: Boolean!\n  createdAt: AWSDate\n  updatedAt: AWSDate\n  billingTerm: String!\n}\n\ninput AddPlanTypeInput {\n  name: String!\n  cost: Float!\n  billingTerm: String!\n  active: Boolean!\n}\n\ninput UpdatePlanTypeInput {\n  id: ID!\n  name: String!\n  cost: Float!\n  billingTerm: String!\n  active: Boolean!\n}\n\ntype PaginatedPlanType {\n  items: [PlanType!]!\n  nextToken: String!\n}\n\ntype Plan {\n  planId: ID!\n  accountId: ID!\n  owner: ID!\n  planTypeId: ID!\n  startDate: AWSDate!\n  endDate: AWSDate\n  active: Boolean\n  lastBillDate: AWSDate\n}\n\ninput AddPlanInput {\n  accountId: ID!\n  owner: ID!\n  planTypeId: ID!\n  endDate: AWSDate\n  active: Boolean\n}\n\ninput UpdatePlanInput {\n  id: ID!\n  endDate: AWSDate\n  active: Boolean!\n}\n\ntype PaginatedPlan {\n  items: [Plan!]!\n  nextToken: String\n}\n\ntype IntegrationType {\n  integrationTypeId: ID!\n  owner: ID!\n  PlanTypeId: ID!\n  name: String!\n  active: Boolean!\n}\n\ninput AddIntegrationTypeInput {\n  name: String!\n  active: Boolean\n}\n\ninput UpdateIntegrationTypeInput {\n  id: ID!\n  name: String!\n  active: Boolean\n}\n\ntype PaginatedIntegrationType {\n  items: [IntegrationType!]!\n  nextToken: String\n}\n\ntype Integration {\n  integrationId: ID!\n  integrationTypeId: ID!\n  owner: ID!\n  accountId: ID!\n  formId: ID!\n  active: Boolean!\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n  lastExecuted: AWSDate\n  lastExecutionResult: Boolean\n  lastExecutionResultMessage: String\n}\n\ninput AddIntegrationInput {\n  integrationTypeId: ID!\n  accountId: ID!\n  formId: ID!\n  active: Boolean\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationTypeInputData {\n  active: Boolean\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ninput UpdateIntegrationInput {\n  id: ID!\n  active: Boolean\n  authType: String\n  auth: AWSJSON\n  target: String\n  method: String\n}\n\ntype PaginatedIntegration {\n  items: [Integration!]!\n  nextToken: String\n}\n\ntype Query {\n  getAccount(accountId: ID!): Account!\n  @aws_auth(cognito_groups: [\"Admin\", \"AccountAdmin\"])\n\n  listAllAccounts(limit: Int, nextToken: String): PaginatedAccount!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  getUser(userId: String!): User!\n  @aws_auth(cognito_groups: [\"Admin\", \"AccountAdmin\"])\n\n  listAllUsers(limit: Int, nextToken: String) : PaginatedUser!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllAccountUsers(accountId: String!, limit: Int, nextToken: String): PaginatedUser!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  listAllAccountUsersActive(accountId: String!, limit: Int, nextToken: String): PaginatedUser!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  listAccountUsersInGroup(accountId: String!, group: String!, limit: Int, nextToken: String): PaginatedUser!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  getPlan(planId: String!): Plan!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  listAllPlans(limit: Int, nextToken: String): PaginatedPlan!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllAccountPlans(accountId: String!, limit: Int, nextToken: String): PaginatedPlan!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  getActiveAccountPlan(accountId: String!): PaginatedPlan!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Editor\",  \"Viewer\", \"Admin\"])\n\n  getPlanType(planTypeId: String!): PlanType!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  listAllPlanTypes(limit: Int, nextToken: String): PaginatedPlanType!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllActivePlanTypes(limit: Int, nextToken: String): PaginatedPlanType!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  getForm(formId: String!) : Form!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  listAllForms(limit: Int, nextToken: String) : PaginatedForm!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllAccountForms(accountId: String!, limit: Int, nextToken: String) : PaginatedForm!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n\n  listAllAccountFormsActive(accountId: String!, active: String!, limit: Int, nextToken: String) : PaginatedForm!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n\n  listAllAccountFormsByUser(accountId: String!, userId: String!, limit: Int, nextToken: String) : PaginatedForm!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n\n  listAllAccountFormsByUserActive(accountId: String!, userId: String!, active: String!, limit: Int, nextToken: String) : PaginatedForm!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n\n  getIntegrationType(integrationTypeId: String!): IntegrationType!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  listAllIntegrationTypes(limit: Int, nextToken: String): PaginatedIntegrationType!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllIntegrationTypesByPlanType(planTypeId: String!, limit: Int, nextToken: String): PaginatedIntegrationType!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllIntegrationTypesByPlanTypeActive(planTypeId: String!, active: String!, limit: Int, nextToken: String): PaginatedIntegrationType!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  getIntegration(integrationId: String!): Integration!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllIntegrations(limit: Int, nextToken: String): PaginatedIntegration!\n  @aws_auth(cognito_groups: [\"Admin\"])\n\n  listAllAccountIntegrations(accountId: String!, limit: Int, nextToken: String): PaginatedIntegration!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\"])\n\n  listAllAccountFormIntegrations(accountId: String!, formId: String!, limit: Int, nextToken: String): PaginatedIntegration!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n\n  listAllAccountFormIntegrationsActive(accountId: String!, formId: String!, active: String!, limit: Int, nextToken: String): PaginatedIntegration!\n  @aws_auth(cognito_groups: [\"AccountAdmin\"])\n\n  getFormEntry(formEntryId: String!): FormEntry!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n\n  listAllFormEntries(formId: String!) : PaginatedFormEntries!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n\n  listAllFormEntriesByTime(formId: String!, timestampPrefix: String!): PaginatedFormEntries!\n  @aws_auth(cognito_groups: [\"AccountAdmin\", \"Admin\", \"Editor\",  \"Viewer\"])\n}\n\ntype Mutation {\n  addPlanType(input: AddPlanTypeInput): PlanType!\n  addPlan(input: AddPlanInput): Plan!\n  addAccount(input: AddAccountInput): Account!\n  addUser(input: AddUserInput): User!\n  addIntegrationType(input: AddIntegrationTypeInput): IntegrationType!\n  addIntegration(input: AddIntegrationInput): Integration!\n  addForm(input: AddFormInput): Form!\n\n  updatePlanType(input: UpdatePlanTypeInput): PlanType!\n  updatePlan(input: UpdatePlanInput): Plan!\n  updateAccount(input: UpdateAccountInput): Account!\n  updateUser(input: UpdateUserInput): User!\n  updateIntegrationType(input: UpdateIntegrationTypeInput): IntegrationType!\n  updateIntegration(input: UpdateIntegrationInput): Integration!\n  updateForm(input: UpdateFormInput): Form!\n\n  deletePlanType(id: ID!): PlanType!\n  deletePlan(id: ID!): Plan!\n  deleteAccount(id: ID!): Account!\n  deleteUser(id: ID!): User!\n  deleteIntegrationType(id: ID!): IntegrationType!\n  deleteIntegration(id: ID!): Integration!\n  deleteForm(id: ID!): Form!\n\n  addFormEntry(input: AddFormEntryInput!): FormEntry!\n}\n\ntype Schema {\n  query: Query\n  mutation: Mutation\n}",
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              }
            }
          },
          "GraphQlDstableformsgraphqldevmasterdataRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "GraphQlDstableformsgraphqldevmasterdataPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:UpdateItem",
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                "aws",
                                "dynamodb",
                                "ap-southeast-2",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      "table_formsgraphql_dev_masterdata"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                {
                                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlDstableformsgraphqldevmasterdataRole\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][0][\"Resource\"][0]"
                                },
                                "*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GraphQlDstableformsgraphqldevmasterdata": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "table_formsgraphql_dev_masterdata",
              "Description": "Master Table",
              "Type": "AMAZON_DYNAMODB",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdataRole",
                  "Arn"
                ]
              },
              "DynamoDBConfig": {
                "AwsRegion": "ap-southeast-2",
                "TableName": "table_formsgraphql_dev_masterdata",
                "UseCallerCredentials": false
              }
            }
          },
          "GraphQlResolverQuerygetAccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getAccount",
              "RequestMappingTemplate": "\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n  #if($group == \"Admin\" || $context.arguments.input.accountId == $context.identity.claims[\"custom:account\"])\n      #set($inCognitoGroup = true)\n  #end\n#if($inCognitoGroup)\n{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n        \"partitionKey\": $util.dynamodb.toDynamoDBJson($context.arguments.input.accountId)\n  }\n}\n#else\n    $utils.unauthorized()\n#end",
              "ResponseMappingTemplate": "#set($accountId = $context.identity.claims[\"custom:account\"])\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n    #end\n#end\n// If is Admin or record owner or belongs to same account\n#if($isAdmin || $context.result.owner == $context.identity.sub || $context.result.partitionKey == $accountId)\n{\n    $utils.toJson($context.result)\n}\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdata",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistAllAccounts": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listAllAccounts",
              "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"index\": \"masterDataGSI\"\n    \"query\" : {\n      \"expression\": \"sortKey = :objectType\",\n      \"expressionValues\" : {\n        \":objectType\" : { \"S\": \"ACCOUNT\" }\n      }\n  }\n  #if( ${context.arguments.limit} )\n      ,\"limit\": ${context.arguments.limit}\n  #end\n  #if( ${context.arguments.nextToken} )\n      ,\"nextToken\": \"${context.arguments.nextToken}\"\n  #end\n}",
              "ResponseMappingTemplate": "{\n    \"items\": $utils.toJson($context.result.items)\n    #if( ${context.result.nextToken} )\n        ,\"nextToken\": \"${context.result.nextToken}\"\n    #end\n}",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdata",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetPlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getPlan",
              "RequestMappingTemplate": "#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n  #if($group == \"Admin\" || $context.arguments.input.accountId == $context.identity.claims[\"custom:account\"])\n      #set($inCognitoGroup = true)\n#end\n#if($inCognitoGroup)\n{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n        \"partitionKey\": $util.dynamodb.toDynamoDBJson($context.arguments.input.planId)\n  }\n}\n#else\n    $utils.unauthorized()\n#end",
              "ResponseMappingTemplate": "#set($accountId = $context.identity.claims[\"custom:account\"])\n#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($isAdmin = true)\n    #end\n#end\n// If is Admin or record owner or belongs to same account\n#if($isAdmin || $context.result.owner == $context.identity.sub || $util.parseJson($context.result.data).accountId == $accountId)\n{\n    $utils.toJson($context.result)\n}\n#else\n    $utils.unauthorized()\n#end",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdata",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerygetPlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "getPlanType",
              "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"GetItem\",\n  \"key\": {\n        \"partitionKey\": $util.dynamodb.toDynamoDBJson($context.arguments.input.planTypeId)\n  }\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdata",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddAccount": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addAccount",
              "RequestMappingTemplate": "#set($attribs = $util.dynamodb.toMapValues($context.arguments.input))\n#set($attribs.id = $util.autoId())\n#set($attribs.owner = $util.dynamodb.toDynamoDB($context.identity.sub))\n#set($attribs.createdAt = $util.dynamodb.toDynamoDB($util.time.nowISO8601()))\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"partitionKey\": {\"S\" : \"${attribs.id}\"},\n        \"sortKey\"     : {\"S\" : \"ACCOUNT\"},\n        \"indexKey\"    : {\"S\" : \"$context.arguments.input.planId\"}\n    },\n    \"attributeValues\": {\n        \"type\"      : {\"S\" : \"ACCOUNT\"},\n        \"owner\"     : {\"S\" : \"$context.identity.sub\"},\n        \"data\"      : {\"S\" : \"$util.toJson($attribs)\"},\n        \"isDeleted\" : {\"BOOL\": false }\n    },\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(partitionKey)\"\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdata",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddPlanType": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addPlanType",
              "RequestMappingTemplate": "#foreach($group in $context.identity.claims.get(\"cognito:groups\"))\n    #if($group == \"Admin\")\n        #set($inCognitoGroup = true)\n    #end\n#end\n#if($inCognitoGroup)\n    #set($attribs = $context.arguments.input)\n    #set($attribs.id = $util.autoId())\n    #set($attribs.owner = $context.identity.sub)\n    #set($attribs.createdAt = $util.time.nowISO8601())\n    {\n        \"version\": \"2017-02-28\",\n        \"operation\": \"PutItem\",\n        \"key\": {\n            \"partitionKey\": {\"S\" : \"${attribs.id}\"},\n            \"sortKey\"     : {\"S\" : \"PLANTYPE\"}\n        },\n        \"attributeValues\": {\n            \"indexKey\"   : {\"S\" : \"$context.arguments.input.active\"},\n            \"type\"      : {\"S\" : \"PLANTYPE\"},\n            \"owner\"     : {\"S\" : \"$context.identity.sub\"},\n            \"isDeleted\" : {\"BOOL\" : false },\n            \"data\"      : $util.dynamodb.toDynamoDBJson($attribs)\n        },\n        \"condition\": {\n            \"expression\": \"attribute_not_exists(#partitionKey)\",\n                \"expressionNames\": {\n                \"#partitionKey\": \"partitionKey\",\n            }\n        }\n    }\n#else\n    $utils.unauthorized()\n#end",
              "ResponseMappingTemplate": "$util.toJson({\n    \"planTypeId\": \"${ctx.result.partitionKey}\",\n    \"owner\": \"${ctx.result.owner}\",\n    \"name\": \"${ctx.result.data.name}\",\n    \"cost\": ${ctx.result.data.cost},\n    \"active\": ${ctx.result.data.active},\n    \"billingTerm\": \"${ctx.result.data.billingTerm}\",\n    \"createdAt\": \"${ctx.result.createdAt}\",\n    \"updatedAt\"  : \"${ctx.result.data.updatedAt}\"\n})",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdata",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationaddPlan": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "addPlan",
              "RequestMappingTemplate": "#set($attribs = $util.dynamodb.toMapValues($context.arguments.input))\n#set($attribs.id = $util.dynamodb.toMapValues($util.autoId()))\n#set($attribs.owner = $util.dynamodb.toDynamoDB($context.identity.sub))\n#set($attribs.createdAt = $util.dynamodb.toDynamoDB($util.time.nowISO8601()))\n{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"PutItem\",\n    \"key\": {\n        \"partitionKey\": {\"S\": \"${attribs.id}\"},\n        \"sortKey\"     : {\"S\": \"ACCOUNT\"},\n        \"indexKey\"    : {\"S\": ${attribs.planId}}\n    },\n    \"attributeValues\": {\n        \"type\"      : {\"S\" :\"ACCOUNT\"},\n        \"data\"      : {\"S\": \"$util.toJson($attribs)\"},\n        \"isDeleted\" : {\"BOOL\": false }\n    },\n    \"condition\": {\n        \"expression\": \"attribute_not_exists(#partitionKey)\",\n        \"expressionNames\": {\n        \"#partitionKey\": \"id\",\n        }\n    }\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result)",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDstableformsgraphqldevmasterdata",
                  "Name"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "UserPoolId": {
            "Value": {
              "Ref": "CognitoUserPool"
            }
          },
          "UserPoolClientId": {
            "Value": {
              "Ref": "CognitoUserPoolClient"
            }
          },
          "AttachmentsBucketName": {
            "Value": {
              "Ref": "AttachmentsBucket"
            }
          },
          "GraphQlApiUrl": {
            "Value": {
              "Fn::GetAtt": [
                "GraphQlApi",
                "GraphQLUrl"
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "CognitoAddCustomAttributes": {
        "CognitoUserPoolIdOutputKey": "UserPoolId",
        "CognitoUserPoolClientIdOutputKey": "UserPoolClientId",
        "CustomAttributes": [
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "tenant",
            "Required": false
          }
        ]
      },
      "TBL_MASTER_DATA": "table_formsgraphql_dev_masterdata",
      "TBL_FORM_ENTRY": "table_formsgraphql_dev_entries",
      "bucket": "formsgraphql-dev-data",
      "appsync-offline": {
        "port": 62222,
        "dynamodb": {
          "client": {
            "endpoint": "http://localhost:8000",
            "region": "localhost"
          }
        }
      },
      "dynamodb": {
        "start": {
          "port": 8000,
          "inMemory": true
        }
      },
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true
      },
      "appSync": {
        "name": "ai-forms-backend-dev",
        "authenticationType": "AMAZON_COGNITO_USER_POOLS",
        "serviceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncDynamoDBRole",
            "Arn"
          ]
        },
        "userPoolConfig": {
          "awsRegion": "ap-southeast-2",
          "defaultAction": "ALLOW",
          "userPoolId": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlApi\"][\"Properties\"][\"UserPoolConfig\"][\"UserPoolId\"]"
          }
        },
        "logConfig": {
          "loggingRoleArn": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlApi\"][\"Properties\"][\"LogConfig\"][\"CloudWatchLogsRoleArn\"]"
          },
          "level": "ALL"
        },
        "mappingTemplatesLocation": "src/mapping-templates",
        "mappingTemplates": [
          {
            "dataSource": "table_formsgraphql_dev_masterdata",
            "type": "Query",
            "field": "getAccount",
            "request": "getAccount-request.vtl",
            "response": "getAccount-response.vtl"
          },
          {
            "dataSource": "table_formsgraphql_dev_masterdata",
            "type": "Query",
            "field": "listAllAccounts",
            "request": "listAllAccounts-request.vtl",
            "response": "listAllAccounts-response.vtl"
          },
          {
            "dataSource": "table_formsgraphql_dev_masterdata",
            "type": "Query",
            "field": "getPlan",
            "request": "getPlan-request.vtl",
            "response": "getPlan-response.vtl"
          },
          {
            "dataSource": "table_formsgraphql_dev_masterdata",
            "type": "Query",
            "field": "getPlanType",
            "request": "getPlanType-request.vtl",
            "response": "getPlanType-response.vtl"
          },
          {
            "dataSource": "table_formsgraphql_dev_masterdata",
            "type": "Mutation",
            "field": "addAccount",
            "request": "addAccount-request.vtl",
            "response": "addAccount-response.vtl"
          },
          {
            "dataSource": "table_formsgraphql_dev_masterdata",
            "type": "Mutation",
            "field": "addPlanType",
            "request": "addPlanType-request.vtl",
            "response": "addPlanType-response.vtl"
          },
          {
            "dataSource": "table_formsgraphql_dev_masterdata",
            "type": "Mutation",
            "field": "addPlan",
            "request": "addPlan-request.vtl",
            "response": "addPlan-response.vtl"
          }
        ],
        "schema": "schema.graphql",
        "dataSources": [
          {
            "type": "AMAZON_DYNAMODB",
            "name": "table_formsgraphql_dev_masterdata",
            "description": "Master Table",
            "config": {
              "tableName": "table_formsgraphql_dev_masterdata"
            }
          }
        ]
      }
    },
    "plugins": [
      "serverless-cognito-add-custom-attributes",
      "serverless-appsync-plugin",
      "serverless-dynamodb-local",
      "serverless-appsync-offline",
      "serverless-offline"
    ],
    "functions": {},
    "resources": {
      "Resources": {
        "AppSyncDynamoDBRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "formsgraphql-ap-southeast-2-dev-appsync-iam-role",
            "ManagedPolicyArns": [
              {
                "Ref": "AppSyncDynamoDBPolicy"
              }
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          },
          "DependsOn": [
            "AppSyncDynamoDBPolicy"
          ]
        },
        "AppSyncDynamoDBPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "Description": "Allow AWS AppSync to access dynamodb.",
            "Path": "/deepdish/",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": "MasterDataTable.Arn"
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "AppSyncCloudWatchRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "formsgraphql-ap-southeast-2-dev-appsync--logging-iam-role",
            "ManagedPolicyArns": [
              {
                "Ref": "AppSyncCloudWatchPolicy"
              }
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          },
          "DependsOn": [
            "AppSyncCloudWatchPolicy"
          ]
        },
        "AppSyncCloudWatchPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "Description": "Allow AWS AppSync to write logs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        },
        "MasterDataTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "table_formsgraphql_dev_masterdata",
            "AttributeDefinitions": [
              {
                "AttributeName": "partitionKey",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sortKey",
                "AttributeType": "S"
              },
              {
                "AttributeName": "indexKey",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "partitionKey",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sortKey",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "masterDataGSI",
                "KeySchema": [
                  {
                    "AttributeName": "sortKey",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "indexKey",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            ]
          }
        },
        "EntriesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "table_formsgraphql_dev_entries",
            "AttributeDefinitions": [
              {
                "AttributeName": "partitionKey",
                "AttributeType": "S"
              },
              {
                "AttributeName": "sortKey",
                "AttributeType": "S"
              },
              {
                "AttributeName": "indexKey",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "partitionKey",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sortKey",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "formEntriesGSI",
                "KeySchema": [
                  {
                    "AttributeName": "sortKey",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "indexKey",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            ]
          }
        },
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "dev-user-pool",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ]
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "dev-userpoolclient",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "ExplicitAuthFlows": [
              "ADMIN_NO_SRP_AUTH"
            ],
            "GenerateSecret": false
          }
        },
        "CognitoAppAdminGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Application Admin",
            "GroupName": "Admin",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            }
          }
        },
        "CognitoAccountAdminGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Account admin",
            "GroupName": "AccountAdmin",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            }
          }
        },
        "CognitoAccountEditorGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Account editor user",
            "GroupName": "Editor",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            }
          }
        },
        "CognitoAccountViewerGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "Account read only user",
            "GroupName": "Viewer",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            }
          }
        },
        "AttachmentsBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "formsgraphql-dev-data",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "UserPoolId": {
          "Value": {
            "Ref": "CognitoUserPool"
          }
        },
        "UserPoolClientId": {
          "Value": {
            "Ref": "CognitoUserPoolClient"
          }
        },
        "AttachmentsBucketName": {
          "Value": {
            "Ref": "AttachmentsBucket"
          }
        }
      }
    }
  },
  "package": {
    "artifactDirectoryName": "serverless/formsgraphql/dev/1552103187871-2019-03-09T03:46:27.871Z",
    "artifact": ""
  }
}