type MasterData @model {
    partitionKey: ID!
    sortKey: ID!
    indexKey: String!
    type: String!
    owner: ID!
    createdAt: AWSDate
    updatedAt: AWSDate
    isDeleted: Boolean
    data: AWSJSON!
}

type FormEntry @model {
    partitionKey: ID!
    sortKey: ID!
    indexKey: String!
    data: AWSJSON!
}

input AddFormEntryInput {
  data: AWSJSON!
}

type PaginatedFormEntries {
  items: [FormEntry!]!
  nextToken: String
}

type Form {
    id: ID!
    owner: ID!
    exid: String
    desc: String
    name: String!
    tenant: AWSJSON
    status: AWSJSON
    content: AWSJSON!
    layout: AWSJSON
    formLayoutOptions: AWSJSON
    stopSubmit: Boolean
    submitTarget: String
    successRedirect: String
    errorRedirect: String
}

input AddFormInput {
  name: String!
  desc: String
  content: AWSJSON!
  layout: AWSJSON
  formLayoutOptions: AWSJSON
  stopSubmit: Boolean
  submitTarget: String
  successRedirect: String
  errorRedirect: String
}

input UpdateFormInput  {
  id: ID
  name: String
  desc: String
  content: AWSJSON!
  layout: AWSJSON
  formLayoutOptions: AWSJSON
  stopSubmit: Boolean
  submitTarget: String
  successRedirect: String
  errorRedirect: String
}

type PaginatedForm {
  items: [Form!]!
  nextToken: String
}

type User {
  id: ID!
  owner: ID!
  accountId: String!
  email: String!
  group: String!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
  createdAt: AWSDate
}

input UpdateUserInputData {
  group: String!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
}

input UpdateUserInput {
  id: ID!
  data: UpdateUserInputData!
}

input AddUserInput {
  email: String!
  group: String!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
}

type PaginatedUser {
  items: [User!]!
  nextToken: String
}

type Account {
  accountId: ID!
  name: String!
  owner: ID!
  planId: ID
  createdAt: AWSDate!
  updatedAt: AWSDate
}

input UpdateAccountInput {
  id: ID!
  name: String
  planId: ID
}

input AddAccountInput {
  name: String!
}

type PaginatedAccount {
  items: [Account!]!
  nextToken: String!
}

type PlanType {
  planTypeId: ID!
  owner: ID!
  name: String!
  cost: Float!
  active: Boolean!
  createdAt: AWSDate
  updatedAt: AWSDate
  billingTerm: String!
}

input AddPlanTypeInput {
  name: String!
  cost: Float!
  billingTerm: String!
  active: Boolean!
}

input UpdatePlanTypeInput {
  id: ID!
  name: String!
  cost: Float!
  billingTerm: String!
  active: Boolean!
}

type PaginatedPlanType {
  items: [PlanType!]!
  nextToken: String!
}

type Plan {
  planId: ID!
  accountId: ID!
  owner: ID!
  createdAt: AWSDate
  planTypeId: ID!
  startDate: AWSDate!
  endDate: AWSDate
  active: Boolean
  lastBillDate: AWSDate
}

input AddPlanInput {
  accountId: ID!
  owner: ID!
  planTypeId: ID!
  endDate: AWSDate
  active: Boolean
}

input UpdatePlanInput {
  id: ID!
  endDate: AWSDate
  active: Boolean!
}

type PaginatedPlan {
  items: [Plan!]!
  nextToken: String
}

type IntegrationType {
  integrationTypeId: ID!
  owner: ID!
  PlanTypeId: ID!
  name: String!
  active: Boolean!
}

input AddIntegrationTypeInput {
  name: String!
  active: Boolean
}

input UpdateIntegrationTypeInput {
  id: ID!
  name: String!
  active: Boolean
}

type PaginatedIntegrationType {
  items: [IntegrationType!]!
  nextToken: String
}

type Integration {
  integrationId: ID!
  integrationTypeId: ID!
  owner: ID!
  accountId: ID!
  formId: ID!
  active: Boolean!
  authType: String
  auth: AWSJSON
  target: String
  method: String
  lastExecuted: AWSDate
  lastExecutionResult: Boolean
  lastExecutionResultMessage: String
}

input AddIntegrationInput {
  integrationTypeId: ID!
  accountId: ID!
  formId: ID!
  active: Boolean
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

input UpdateIntegrationTypeInputData {
  active: Boolean
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

input UpdateIntegrationInput {
  id: ID!
  active: Boolean
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

type PaginatedIntegration {
  items: [Integration!]!
  nextToken: String
}

type Query {
  getAccount(accountId: ID!): Account
  @aws_auth(cognito_groups: ["Admin", "AccountAdmin"])

  listAllAccounts(limit: Int, nextToken: String): PaginatedAccount!
  @aws_auth(cognito_groups: ["Admin"])

  getUser(userId: String!): User!
  @aws_auth(cognito_groups: ["Admin", "AccountAdmin"])

  listAllUsers(limit: Int, nextToken: String) : PaginatedUser!
  @aws_auth(cognito_groups: ["Admin"])

  listAllAccountUsers(accountId: String!, limit: Int, nextToken: String): PaginatedUser!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  listAllAccountUsersActive(accountId: String!, limit: Int, nextToken: String): PaginatedUser!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  listAccountUsersInGroup(accountId: String!, group: String!, limit: Int, nextToken: String): PaginatedUser!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  getPlan(planId: String!): Plan!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  listAllPlans(limit: Int, nextToken: String): PaginatedPlan!
  @aws_auth(cognito_groups: ["Admin"])

  listAllAccountPlans(accountId: String!, limit: Int, nextToken: String): PaginatedPlan!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  getActiveAccountPlan(accountId: String!): PaginatedPlan!
  @aws_auth(cognito_groups: ["AccountAdmin", "Editor",  "Viewer", "Admin"])

  getPlanType(planTypeId: String!): PlanType!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  listAllPlanTypes(limit: Int, nextToken: String): PaginatedPlanType!
  @aws_auth(cognito_groups: ["Admin"])

  listAllActivePlanTypes(limit: Int, nextToken: String): PaginatedPlanType!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  getForm(formId: String!) : Form!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  listAllForms(limit: Int, nextToken: String) : PaginatedForm!
  @aws_auth(cognito_groups: ["Admin"])

  listAllAccountForms(accountId: String!, limit: Int, nextToken: String) : PaginatedForm!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])

  listAllAccountFormsActive(accountId: String!, active: String!, limit: Int, nextToken: String) : PaginatedForm!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])

  listAllAccountFormsByUser(accountId: String!, userId: String!, limit: Int, nextToken: String) : PaginatedForm!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])

  listAllAccountFormsByUserActive(accountId: String!, userId: String!, active: String!, limit: Int, nextToken: String) : PaginatedForm!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])

  getIntegrationType(integrationTypeId: String!): IntegrationType!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  listAllIntegrationTypes(limit: Int, nextToken: String): PaginatedIntegrationType!
  @aws_auth(cognito_groups: ["Admin"])

  listAllIntegrationTypesByPlanType(planTypeId: String!, limit: Int, nextToken: String): PaginatedIntegrationType!
  @aws_auth(cognito_groups: ["Admin"])

  listAllIntegrationTypesByPlanTypeActive(planTypeId: String!, active: String!, limit: Int, nextToken: String): PaginatedIntegrationType!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  getIntegration(integrationId: String!): Integration!
  @aws_auth(cognito_groups: ["Admin"])

  listAllIntegrations(limit: Int, nextToken: String): PaginatedIntegration!
  @aws_auth(cognito_groups: ["Admin"])

  listAllAccountIntegrations(accountId: String!, limit: Int, nextToken: String): PaginatedIntegration!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin"])

  listAllAccountFormIntegrations(accountId: String!, formId: String!, limit: Int, nextToken: String): PaginatedIntegration!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])

  listAllAccountFormIntegrationsActive(accountId: String!, formId: String!, active: String!, limit: Int, nextToken: String): PaginatedIntegration!
  @aws_auth(cognito_groups: ["AccountAdmin"])

  getFormEntry(formEntryId: String!): FormEntry!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])

  listAllFormEntries(formId: String!) : PaginatedFormEntries!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])

  listAllFormEntriesByTime(formId: String!, timestampPrefix: String!): PaginatedFormEntries!
  @aws_auth(cognito_groups: ["AccountAdmin", "Admin", "Editor",  "Viewer"])
}

type Mutation {
  addPlanType(input: AddPlanTypeInput): PlanType!
  addPlan(input: AddPlanInput): Plan!
  addAccount(input: AddAccountInput): Account!
  addUser(input: AddUserInput): User!
  addIntegrationType(input: AddIntegrationTypeInput): IntegrationType!
  addIntegration(input: AddIntegrationInput): Integration!
  addForm(input: AddFormInput): Form!

  updatePlanType(input: UpdatePlanTypeInput): PlanType!
  updatePlan(input: UpdatePlanInput): Plan!
  updateAccount(input: UpdateAccountInput): Account!
  updateUser(input: UpdateUserInput): User!
  updateIntegrationType(input: UpdateIntegrationTypeInput): IntegrationType!
  updateIntegration(input: UpdateIntegrationInput): Integration!
  updateForm(input: UpdateFormInput): Form!

  deletePlanType(id: ID!): PlanType!
  deletePlan(id: ID!): Plan!
  deleteAccount(id: ID!): Account!
  deleteUser(id: ID!): User!
  deleteIntegrationType(id: ID!): IntegrationType!
  deleteIntegration(id: ID!): Integration!
  deleteForm(id: ID!): Form!

  addFormEntry(input: AddFormEntryInput!): FormEntry!
}

type Schema {
  query: Query
  mutation: Mutation
}