input TableDateFilterInput {
    ne: AWSDateTime
    eq: AWSDateTime
    le: AWSDateTime
    lt: AWSDateTime
    ge: AWSDateTime
    gt: AWSDateTime
    between: [AWSDateTime]
}

input TableBooleanFilterInput {
    ne: Boolean
    eq: Boolean
}

input TableFloatFilterInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    between: [Float]
}

input TableIntFilterInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    between: [Int]
}

input TableStringFilterInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
}

type AppData @model {
    id: ID!
    type: ID!
    meta: String!
    itemType: String!
    ownerId: ID!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime
    isDeleted: Int
    version: Int
    searchField: String
}

type FormEntry @model {
    id: ID!
    type: ID!
    meta: String!
    createdAt: AWSDateTime!
}

input AddFormEntryInput {
  data: AWSJSON!
}


type FormVersion {
  id: ID!
  formId: ID!
  ownerId: ID!
  ownedBy: User!
  createdAt: AWSDateTime
  notes: String
  formData: AWSJSON
}

input AddFormVersionInput {
  formId: ID!
  ownerId: ID!
  notes: String
  formData: AWSJSON!
}


type Form @versioned  {
    id: ID!
    ownerId: ID!
    name: String!
    desc: String!
    versionId: ID!
    formData: FormVersion!
    ownedBy: User!
    accountId: ID!
    account: Account!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime
    startsAt: AWSDateTime
    endsAt: AWSDateTime
    isPaused: Boolean
    versions(limit: Int): [FormVersion]
    integrations(limit: Int): [Integration]
    entries(limit: Int): [FormEntry]
}

input FormFilterInput {
    owner: TableIntFilterInput
    name: TableStringFilterInput
    createdAt: TableDateFilterInput
    updatedAt: TableDateFilterInput
    startsAt: TableDateFilterInput
    endsAt: TableDateFilterInput
}

input AddFormInput {
  name: String!
  desc: String
  startsAt: AWSDateTime
  endsAt: AWSDateTime
  isPaused: Boolean
}

input UpdateFormInput  {
  id: ID!
  currentVersionId: ID
  name: String
  desc: String
  startsAt: AWSDateTime
  endsAt: AWSDateTime
  isPaused: Boolean
}

type User @versioned {
    id: ID!
    ownerId: ID!
    accountId: ID!
    account: Account
    email: String!
    group: String!
    given_name: String!
    family_name: String!
    phone_number: AWSPhone
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    isDeleted: Int
}

input UserFilterInput {
    owner: TableIntFilterInput
    email: TableStringFilterInput
    given_name: TableStringFilterInput
    family_name: TableStringFilterInput
    createdAt: TableDateFilterInput
    updatedAt: TableDateFilterInput
    startsAt: TableDateFilterInput
    endsAt: TableDateFilterInput
}

input UpdateUserInputData {
  group: String!
  given_name: String!
  family_name: String!
  phone_number: AWSPhone
}

input UpdateUserInput {
  id: ID!
  data: UpdateUserInputData!
}

enum AddressType {
  BILLING
  CONTACT
}

type Address @versioned {
  id: ID!
  name: String!
  addressee: String
  addressType: AddressType!
  phone_number: AWSPhone
  email: String!
  street: String
  city: String
  state: String
  country: String
}

input AddressFilterInput {
    owner: TableIntFilterInput
    name: TableStringFilterInput
    createdAt: TableDateFilterInput
    updatedAt: TableDateFilterInput
    startsAt: TableDateFilterInput
    endsAt: TableDateFilterInput
}

type AddAddressInput {
  name: String!
  addressee: String
  addressType: AddressType!
  phone_number: AWSPhone
  email: String!
  street: String
  city: String
  state: String
  country: String
}

type Account @versioned {
  id: ID!
  name: String!
  addresses(limit: Int): [Address]
  website: String
  taxId: String
  ownerId: ID!
  ownedBy: User!
  plan : Plan
  planId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  active: Int
  users(limit: Int): [User]
  forms(limit: Int): [Form]
}

input AccountFilterInput {
    name: TableStringFilterInput
    createdAt: TableDateFilterInput
    updatedAt: TableDateFilterInput
}

input UpdateAccountInput {
  id: ID!
  name: String
  planId: ID
}

type PlanType @versioned {
  id: ID!
  ownerId: ID!
  ownedBy: User!
  name: String!
  cost: Float!
  active: Int!
  billingTerm: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  version: Int
  isDeleted: Int
}

input PlanTypeFilterInput {
    name: TableStringFilterInput
    cost: TableFloatFilterInput
    active: TableBooleanFilterInput
    billingTerm: TableStringFilterInput
    createdAt: TableDateFilterInput
    updatedAt: TableDateFilterInput
}

input AddPlanTypeInput {
  name: String!
  cost: Float!
  billingTerm: String!
  active: Int!
}

input UpdatePlanTypeInput {
  id: ID!
  name: String
  cost: Float
  billingTerm: String
  active: Int
}

type Plan @versioned {
  id: ID!
  accountId: ID!
  account: Account!
  ownerId: ID!
  ownedBy: User!
  planTypeId: ID!
  startDate: AWSDateTime!
  endDate: AWSDateTime
  active: Int
  lastBillDate: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  planType: PlanType
  isDeleted: Int
  version: Int
}

input PlanFilterInput {
    id: TableIntFilterInput
    accountId: TableIntFilterInput
    active: TableBooleanFilterInput
    startDate: TableDateFilterInput
    endDate: TableDateFilterInput
    lastBillDate: TableDateFilterInput
    createdAt: TableDateFilterInput
    updatedAt: TableDateFilterInput
}

input AddPlanInput {
  accountId: ID!
  planTypeId: ID!
  endDate: AWSDateTime
  active: Int
}

input UpdatePlanInput {
  id: ID!
  endDate: AWSDateTime
  active: Int!
}

type IntegrationType {
  id: ID!
  ownerId: ID!
  ownedBy: User!
  planTypeId: ID!
  planType: PlanType
  name: String!
  active: Int!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input IntegrationTypeFilterInput {
    id: TableIntFilterInput
    planTypeId: TableIntFilterInput
    active: TableBooleanFilterInput
    name: TableStringFilterInput
    createdAt: TableDateFilterInput
    updatedAt: TableDateFilterInput
}

input AddIntegrationTypeInput {
  name: String!
  active: Int
}

input UpdateIntegrationTypeInput {
  id: ID!
  name: String!
  active: Int
}

type Integration @versioned {
  id: ID!
  integrationTypeId: ID!
  integrationType: IntegrationType
  ownerId: ID!
  accountId: ID!
  formId: ID!
  form: Form!
  active: Int!
  authType: String
  auth: AWSJSON
  target: String
  method: String
  lastExecuted: AWSDateTime
  lastExecutionResult: Boolean
  lastExecutionResultMessage: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  isDeleted: Int
}

input IntegrationFilterInput {
    id: TableIntFilterInput
    integrationTypeId: TableIntFilterInput
    accountId: TableIntFilterInput
    formId: TableIntFilterInput
    active: TableBooleanFilterInput
    lastExecutionResult: TableBooleanFilterInput
}

input AddIntegrationInput {
  integrationTypeId: ID!
  accountId: ID!
  formId: ID!
  active: Int
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

input UpdateIntegrationTypeInputData {
  active: Int
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

input UpdateIntegrationInput {
  id: ID!
  active: Int
  authType: String
  auth: AWSJSON
  target: String
  method: String
}

type Query {
  getAccount(accountId: ID!): Account
  getUser(userId: ID!): User
  getPlan(planId: String!): Plan
  getActiveAccountPlan(accountId: String!): Plan
  getPlanType(planTypeId: String!): PlanType
  getForm(formId: String!, versionId: ID!) : Form
  getIntegrationType(integrationTypeId: String!): IntegrationType
  getIntegration(integrationId: String!): Integration
  getFormEntry(formEntryId: String!): FormEntry

  listAccounts(limit: Int, filter: AccountFilterInput): [Account]
  listUsers(limit: Int, filter: UserFilterInput) : [User]
#   listAccountUsers(accountId: String!, limit: Int): [User]
#   listAccountUsersActive(accountId: String!, limit: Int): [User]
#   listAccountUsersInGroup(accountId: String!, group: String!, limit: Int): [User]

  listPlans(limit: Int, filter: PlanFilterInput): [Plan]
#   listAccountPlans(accountId: String!, limit: Int): [Plan]
  listPlanTypes(limit: Int, filter: PlanTypeFilterInput): [PlanType]
#   listActivePlanTypes(limit: Int): [PlanType]

  listForms(limit: Int, filter: FormFilterInput) : [Form]
#   listAccountForms(accountId: String!, limit: Int) : [Form]
#   listAccountFormsActive(accountId: String!, active: String!, limit: Int) : [Form]
#   listAccountFormsByUser(accountId: String!, userId: String!, limit: Int) : [Form]
#   listAccountFormsByUserActive(accountId: String!, userId: String!, active: String!, limit: Int) : [Form]

  listIntegrationTypes(limit: Int, filter: IntegrationTypeFilterInput): [IntegrationType]
#   listIntegrationTypesByPlanType(planTypeId: String!, limit: Int): [IntegrationType]
#   listIntegrationTypesByPlanTypeActive(planTypeId: String!, active: String!, limit: Int): [IntegrationType]

  listIntegrations(limit: Int, filter: IntegrationFilterInput): [Integration]
#   listAccountIntegrations(accountId: String!, limit: Int): [Integration]
#   listAccountFormIntegrations(accountId: String!, formId: String!, limit: Int): [Integration]
#   listAccountFormIntegrationsActive(accountId: String!, formId: String!, active: String!, limit: Int): [Integration]

  listFormEntries(formId: String!) : [FormEntry]
  listFormEntriesByTime(formId: String!, timestampPrefix: String!): [FormEntry]
}

type Mutation {
  addPlanType(input: AddPlanTypeInput): PlanType!
  addPlan(input: AddPlanInput): Plan!
  addIntegrationType(input: AddIntegrationTypeInput): IntegrationType!
  addIntegration(input: AddIntegrationInput): Integration!
  addForm(form: AddFormInput!, notes: String!): Form!
  addFormVersion(version: AddFormVersionInput): FormVersion!

  updatePlanType(input: UpdatePlanTypeInput): PlanType!
  updatePlan(input: UpdatePlanInput): Plan!
  updateAccount(input: UpdateAccountInput): Account!
  updateUser(input: UpdateUserInput): User!
  updateIntegrationType(input: UpdateIntegrationTypeInput): IntegrationType!
  updateIntegration(input: UpdateIntegrationInput): Integration!
  updateForm(input: UpdateFormInput): Form!

  deletePlanType(planTypeId: ID!): PlanType!
  deletePlan(accountId: ID!, planId: ID!): Plan!
  deleteAccount(accountId: ID!): Account!
  deleteUser(userId: ID!): User!
  deleteIntegrationType(integrationTypeId: ID!): IntegrationType!
  deleteIntegration(integrationId: ID!): Integration!
  deleteForm(formId: ID!): Form!

  addFormEntry(input: AddFormEntryInput!): FormEntry!

}

schema {
  query: Query
  mutation: Mutation
}
